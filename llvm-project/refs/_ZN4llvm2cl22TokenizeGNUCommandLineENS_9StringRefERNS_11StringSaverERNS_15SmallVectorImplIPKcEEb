<dec f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1900' type='void llvm::cl::TokenizeGNUCommandLine(llvm::StringRef Source, llvm::StringSaver &amp; Saver, SmallVectorImpl&lt;const char *&gt; &amp; NewArgv, bool MarkEOLs = false)'/>
<doc f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1884'>//===----------------------------------------------------------------------===//
// Standalone command line processing utilities.
//

/// Tokenizes a command line that can contain escapes and quotes.
//
/// The quoting rules match those used by GCC and other tools that use
/// libiberty&apos;s buildargv() or expandargv() utilities, and do not match bash.
/// They differ from buildargv() on treatment of backslashes that do not escape
/// a special character to make it possible to accept most Windows file paths.
///
/// \param [in] Source The string to be split on whitespace with quotes.
/// \param [in] Saver Delegates back to the caller for saving parsed strings.
/// \param [in] MarkEOLs true if tokenizing a response file and you want end of
/// lines and end of the response file to be marked with a nullptr string.
/// \param [out] NewArgv All parsed strings are appended to NewArgv.</doc>
<use f='llvm/clang/tools/driver/driver.cpp' l='365' u='a' c='main'/>
<use f='llvm/lld/COFF/DriverUtils.cpp' l='779' u='r' c='_ZN3lld4coffL15getQuotingStyleERN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/ELF/DriverUtils.cpp' l='83' u='r' c='_ZL15getQuotingStyleRN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/ELF/DriverUtils.cpp' l='87' u='r' c='_ZL15getQuotingStyleRN4llvm3opt12InputArgListE'/>
<use f='llvm/lld/MinGW/Driver.cpp' l='94' u='r' c='_ZL15getQuotingStylev'/>
<use f='llvm/lld/tools/lld/lld.cpp' l='69' u='r' c='_ZL22getDefaultQuotingStylev'/>
<use f='llvm/lld/wasm/Driver.cpp' l='167' u='r' c='_ZN12_GLOBAL__N_112WasmOptTable5parseEN4llvm8ArrayRefIPKcEE'/>
<def f='llvm/llvm/lib/Support/CommandLine.cpp' l='809' ll='868' type='void llvm::cl::TokenizeGNUCommandLine(llvm::StringRef Src, llvm::StringSaver &amp; Saver, SmallVectorImpl&lt;const char *&gt; &amp; NewArgv, bool MarkEOLs = false)'/>
<use f='llvm/llvm/lib/Support/CommandLine.cpp' l='1030' u='c' c='_ZN4llvm2cl18tokenizeConfigFileENS_9StringRefERNS_11StringSaverERNS_15SmallVectorImplIPKcEEb'/>
<use f='llvm/llvm/lib/Support/CommandLine.cpp' l='1215' u='c' c='_ZN4llvm2cl23ParseEnvironmentOptionsEPKcS2_S2_'/>
<use f='llvm/llvm/lib/Support/CommandLine.cpp' l='1233' u='c' c='_ZN4llvm2cl23ParseCommandLineOptionsEiPKPKcNS_9StringRefEPNS_11raw_ostreamES2_b'/>
<use f='llvm/llvm/lib/Support/CommandLine.cpp' l='1268' u='r' c='_ZN12_GLOBAL__N_117CommandLineParser23ParseCommandLineOptionsEiPKPKcN4llvm9StringRefEPNS5_11raw_ostreamEb'/>
<use f='llvm/llvm/tools/llvm-ar/llvm-ar.cpp' l='1047' u='r' c='_ZL7ar_mainiPPc'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='240' u='r' c='_ZN12_GLOBAL__N_143CommandLineTest_TokenizeGNUCommandLine_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='833' u='r' c='_ZN12_GLOBAL__N_134CommandLineTest_ResponseFiles_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='906' u='r' c='_ZN12_GLOBAL__N_143CommandLineTest_RecursiveResponseFiles_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='946' u='r' c='_ZN12_GLOBAL__N_145CommandLineTest_ResponseFilesAtArguments_Test8TestBodyEv'/>
