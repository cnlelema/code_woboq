<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1303' type='llvm::Function * llvm::CallBase::getCaller()'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1305' u='c' c='_ZNK4llvm8CallBase9getCallerEv'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1302'>/// Helper to get the caller (the parent function).</doc>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='825' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer14isColdCallSiteERN4llvm8CallBaseEPNS1_18BlockFrequencyInfoE'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='865' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer15updateThresholdERN4llvm8CallBaseERNS1_8FunctionE'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2068' u='c' c='_ZN4llvm13getInlineCostERNS_8CallBaseEPNS_8FunctionERKNS_12InlineParamsERNS_19TargetTransformInfoERSt8functionIFRNS_15AssumptionCacheERS2_EENS_8Option13600799'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='265' type='llvm::Function * llvm::CallBase::getCaller()'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='261'>//===----------------------------------------------------------------------===//
//                        CallBase Implementation
//===----------------------------------------------------------------------===//</doc>
<use f='llvm/llvm/lib/IR/Verifier.cpp' l='4226' u='c' c='_ZN12_GLOBAL__N_18Verifier18visitIntrinsicCallEN4llvm9Intrinsic2IDERNS1_8CallBaseE'/>
