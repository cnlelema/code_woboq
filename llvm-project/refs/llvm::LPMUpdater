<def f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='146' ll='253'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='140'>/// This class provides an interface for updating the loop pass manager based
/// on mutations to the loop nest.
///
/// A reference to an instance of this class is passed as an argument to each
/// Loop pass, and Loop passes should use it to update LPM infrastructure if
/// they modify the loop nest structure.</doc>
<fun r='_ZNK4llvm10LPMUpdater15skipCurrentLoopEv'/>
<fun r='_ZN4llvm10LPMUpdater17markLoopAsDeletedERNS_4LoopENS_9StringRefE'/>
<fun r='_ZN4llvm10LPMUpdater13addChildLoopsENS_8ArrayRefIPNS_4LoopEEE'/>
<fun r='_ZN4llvm10LPMUpdater15addSiblingLoopsENS_8ArrayRefIPNS_4LoopEEE'/>
<fun r='_ZN4llvm10LPMUpdater18revisitCurrentLoopEv'/>
<mbr r='llvm::LPMUpdater::Worklist' o='0' t='SmallPriorityWorklist&lt;llvm::Loop *, 4&gt; &amp;'/>
<mbr r='llvm::LPMUpdater::LAM' o='64' t='LoopAnalysisManager &amp;'/>
<mbr r='llvm::LPMUpdater::CurrentL' o='128' t='llvm::Loop *'/>
<mbr r='llvm::LPMUpdater::SkipCurrentLoop' o='192' t='bool'/>
<mbr r='llvm::LPMUpdater::ParentL' o='256' t='llvm::Loop *'/>
<fun r='_ZN4llvm10LPMUpdaterC1ERNS_21SmallPriorityWorklistIPNS_4LoopELj4EEERNS_15AnalysisManagerIS2_JRNS_27LoopStandardAnalysisResultsEEEE'/>
