<def f='llvm/clang/include/clang/AST/Expr.h' l='2411' type='clang::Expr * clang::ArraySubscriptExpr::getLHS()'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2419' u='c' c='_ZN5clang18ArraySubscriptExpr7getBaseEv'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2422' u='c' c='_ZN5clang18ArraySubscriptExpr6getIdxEv'/>
<doc f='llvm/clang/include/clang/AST/Expr.h' l='2402'>/// An array access can be written A[4] or 4[A] (both are equivalent).
  /// - getBase() and getIdx() always present the normalized view: A[4].
  ///    In this case getBase() returns &quot;A&quot; and getIdx() returns &quot;4&quot;.
  /// - getLHS() and getRHS() present the syntactic view. e.g. for
  ///    4[A] getLHS() returns &quot;4&quot;.
  /// Note: Because vector element access is also written A[4] we must
  /// predicate the format conversion in getBase and getIdx only on the
  /// the type of the RHS, as it is possible for the LHS to be a vector of
  /// integer type</doc>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='6579' u='c' c='_ZN5clang15ASTNodeImporter23VisitArraySubscriptExprEPNS_18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/AST/StmtPrinter.cpp' l='1297' u='c' c='_ZN12_GLOBAL__N_111StmtPrinter23VisitArraySubscriptExprEPN5clang18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/Sema/SemaChecking.cpp' l='12391' u='c' c='_ZN12_GLOBAL__N_115SequenceChecker23VisitArraySubscriptExprEPN5clang18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='9505' u='c' c='_ZN5clang13TreeTransform27TransformArraySubscriptExprEPNS_18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='9515' u='c' c='_ZN5clang13TreeTransform27TransformArraySubscriptExprEPNS_18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='9521' u='c' c='_ZN5clang13TreeTransform27TransformArraySubscriptExprEPNS_18ArraySubscriptExprE'/>
<use f='llvm/clang/lib/Serialization/ASTWriterStmt.cpp' l='636' u='c' c='_ZN5clang13ASTStmtWriter23VisitArraySubscriptExprEPNS_18ArraySubscriptExprE'/>
