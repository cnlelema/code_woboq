<inh f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='28' c='llvm::InstructionPrecedenceTracking'/>
<def f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='97' ll='120'/>
<size>80</size>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='90'>/// This class allows to keep track on instructions with implicit control flow.
/// These are instructions that may not pass execution to their successors. For
/// example, throwing calls and guards do not always do this. If we need to know
/// for sure that some instruction is guaranteed to execute if the given block
/// is reached, then we need to make sure that there is no implicit control flow
/// instruction (ICFI) preceding it. For example, this check is required if we
/// perform PRE moving non-speculable instruction to other place.</doc>
<fun r='_ZN4llvm27ImplicitControlFlowTrackingC1EPNS_13DominatorTreeE'/>
<fun r='_ZN4llvm27ImplicitControlFlowTracking12getFirstICFIEPKNS_10BasicBlockE'/>
<fun r='_ZN4llvm27ImplicitControlFlowTracking6hasICFEPKNS_10BasicBlockE'/>
<fun r='_ZN4llvm27ImplicitControlFlowTracking30isDominatedByICFIFromSameBlockEPKNS_11InstructionE'/>
<fun r='_ZNK4llvm27ImplicitControlFlowTracking20isSpecialInstructionEPKNS_11InstructionE'/>
