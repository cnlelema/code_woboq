<dec f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.h' l='65' type='void llvm::VPlanPredicator::linearizeRegionRec(llvm::VPRegionBlock * Region)'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.h' l='64'>/// Linearize the CFG within \p Region.</doc>
<def f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='207' ll='231' type='void llvm::VPlanPredicator::linearizeRegionRec(llvm::VPRegionBlock * Region)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='239' u='c' c='_ZN4llvm15VPlanPredicator9predicateEv'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='201'>// Linearize the CFG within Region.
// TODO: Predication and linearization need RPOT for every region.
// This traversal is expensive. Since predication is not adding new
// blocks, we should be able to compute RPOT once in predication and
// reuse it here. This becomes even more important once we have nested
// regions.</doc>
