<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1777' type='bool clang::Parser::ParseLambdaIntroducer(clang::LambdaIntroducer &amp; Intro, clang::Parser::LambdaIntroducerTentativeParse * Tentative = nullptr)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='692' u='c' c='_ZN5clang6Parser21ParseLambdaExpressionEv'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='741' u='c' c='_ZN5clang6Parser24TryParseLambdaExpressionEv'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='756' u='c' c='_ZN5clang6Parser24TryParseLambdaExpressionEv'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='780' ll='1102' type='bool clang::Parser::ParseLambdaIntroducer(clang::LambdaIntroducer &amp; Intro, clang::Parser::LambdaIntroducerTentativeParse * Tentative = nullptr)'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='771'>/// Parse a lambda introducer.
/// \param Intro A LambdaIntroducer filled in with information about the
///        contents of the lambda-introducer.
/// \param Tentative If non-null, we are disambiguating between a
///        lambda-introducer and some other construct. In this mode, we do not
///        produce any diagnostics or take any other irreversible action unless
///        we&apos;re sure that this is a lambda-expression.
/// \return \c true if parsing (or disambiguation) failed with a diagnostic and
///         the caller should bail out / recover.</doc>
<use f='llvm/clang/lib/Parse/ParseInit.cpp' l='72' u='c' c='_ZN5clang6Parser21MayBeDesignationStartEv'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='690' u='c' c='_ZN5clang6Parser25isCXX11AttributeSpecifierEbb'/>
