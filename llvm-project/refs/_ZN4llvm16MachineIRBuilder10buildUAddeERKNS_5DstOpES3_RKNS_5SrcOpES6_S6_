<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='453' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildUAdde(const llvm::DstOp &amp; Res, const llvm::DstOp &amp; CarryOut, const llvm::SrcOp &amp; Op0, const llvm::SrcOp &amp; Op1, const llvm::SrcOp &amp; CarryIn)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='439'>/// Build and insert \p Res, \p CarryOut = G_UADDE \p Op0,
  /// \p Op1, \p CarryIn
  ///
  /// G_UADDE sets \p Res to \p Op0 + \p Op1 + \p CarryIn (truncated to the bit
  /// width) and sets \p CarryOut to 1 if the result overflowed in unsigned
  /// arithmetic.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res, \p Op0 and \p Op1 must be generic virtual registers
  ///      with the same scalar type.
  /// \pre \p CarryOut and \p CarryIn must be generic virtual
  ///      registers with the same scalar type (typically s1)
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='535' u='c' c='_ZN4llvm15LegalizerHelper12narrowScalarERNS_12MachineInstrEjNS_3LLTE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='371' ll='378' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildUAdde(const llvm::DstOp &amp; Res, const llvm::DstOp &amp; CarryOut, const llvm::SrcOp &amp; Op0, const llvm::SrcOp &amp; Op1, const llvm::SrcOp &amp; CarryIn)'/>
