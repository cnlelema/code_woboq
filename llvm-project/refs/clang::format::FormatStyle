<def f='llvm/clang/include/clang/Format/Format.h' l='49' ll='2033'/>
<size>584</size>
<doc f='llvm/clang/include/clang/Format/Format.h' l='47'>/// The ``FormatStyle`` is used to configure the formatting to follow
/// specific guidelines.</doc>
<mbr r='clang::format::FormatStyle::AccessModifierOffset' o='0' t='int'/>
<mbr r='clang::format::FormatStyle::AlignAfterOpenBracket' o='32' t='clang::format::FormatStyle::BracketAlignmentStyle'/>
<mbr r='clang::format::FormatStyle::AlignConsecutiveAssignments' o='64' t='bool'/>
<mbr r='clang::format::FormatStyle::AlignConsecutiveDeclarations' o='72' t='bool'/>
<mbr r='clang::format::FormatStyle::AlignEscapedNewlines' o='96' t='clang::format::FormatStyle::EscapedNewlineAlignmentStyle'/>
<mbr r='clang::format::FormatStyle::AlignOperands' o='128' t='bool'/>
<mbr r='clang::format::FormatStyle::AlignTrailingComments' o='136' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowAllArgumentsOnNextLine' o='144' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowAllConstructorInitializersOnNextLine' o='152' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowAllParametersOfDeclarationOnNextLine' o='160' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowShortBlocksOnASingleLine' o='168' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowShortCaseLabelsOnASingleLine' o='176' t='bool'/>
<mbr r='clang::format::FormatStyle::AllowShortFunctionsOnASingleLine' o='192' t='clang::format::FormatStyle::ShortFunctionStyle'/>
<mbr r='clang::format::FormatStyle::AllowShortIfStatementsOnASingleLine' o='224' t='clang::format::FormatStyle::ShortIfStyle'/>
<mbr r='clang::format::FormatStyle::AllowShortLambdasOnASingleLine' o='256' t='clang::format::FormatStyle::ShortLambdaStyle'/>
<mbr r='clang::format::FormatStyle::AllowShortLoopsOnASingleLine' o='288' t='bool'/>
<mbr r='clang::format::FormatStyle::AlwaysBreakAfterDefinitionReturnType' o='320' t='clang::format::FormatStyle::DefinitionReturnTypeBreakingStyle'/>
<mbr r='clang::format::FormatStyle::AlwaysBreakAfterReturnType' o='352' t='clang::format::FormatStyle::ReturnTypeBreakingStyle'/>
<mbr r='clang::format::FormatStyle::AlwaysBreakBeforeMultilineStrings' o='384' t='bool'/>
<mbr r='clang::format::FormatStyle::AlwaysBreakTemplateDeclarations' o='416' t='clang::format::FormatStyle::BreakTemplateDeclarationsStyle'/>
<mbr r='clang::format::FormatStyle::BinPackArguments' o='448' t='bool'/>
<mbr r='clang::format::FormatStyle::BinPackParameters' o='456' t='bool'/>
<mbr r='clang::format::FormatStyle::BreakBeforeBinaryOperators' o='480' t='clang::format::FormatStyle::BinaryOperatorStyle'/>
<mbr r='clang::format::FormatStyle::BreakBeforeBraces' o='512' t='clang::format::FormatStyle::BraceBreakingStyle'/>
<mbr r='clang::format::FormatStyle::BraceWrapping' o='544' t='clang::format::FormatStyle::BraceWrappingFlags'/>
<mbr r='clang::format::FormatStyle::BreakBeforeTernaryOperators' o='672' t='bool'/>
<mbr r='clang::format::FormatStyle::BreakConstructorInitializers' o='704' t='clang::format::FormatStyle::BreakConstructorInitializersStyle'/>
<mbr r='clang::format::FormatStyle::BreakAfterJavaFieldAnnotations' o='736' t='bool'/>
<mbr r='clang::format::FormatStyle::BreakStringLiterals' o='744' t='bool'/>
<mbr r='clang::format::FormatStyle::ColumnLimit' o='768' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::CommentPragmas' o='832' t='std::string'/>
<mbr r='clang::format::FormatStyle::BreakInheritanceList' o='1088' t='clang::format::FormatStyle::BreakInheritanceListStyle'/>
<mbr r='clang::format::FormatStyle::CompactNamespaces' o='1120' t='bool'/>
<mbr r='clang::format::FormatStyle::ConstructorInitializerAllOnOneLineOrOnePerLine' o='1128' t='bool'/>
<mbr r='clang::format::FormatStyle::ConstructorInitializerIndentWidth' o='1152' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::ContinuationIndentWidth' o='1184' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::Cpp11BracedListStyle' o='1216' t='bool'/>
<mbr r='clang::format::FormatStyle::DerivePointerAlignment' o='1224' t='bool'/>
<mbr r='clang::format::FormatStyle::DisableFormat' o='1232' t='bool'/>
<mbr r='clang::format::FormatStyle::ExperimentalAutoDetectBinPacking' o='1240' t='bool'/>
<mbr r='clang::format::FormatStyle::FixNamespaceComments' o='1248' t='bool'/>
<mbr r='clang::format::FormatStyle::ForEachMacros' o='1280' t='std::vector&lt;std::string&gt;'/>
<mbr r='clang::format::FormatStyle::TypenameMacros' o='1472' t='std::vector&lt;std::string&gt;'/>
<mbr r='clang::format::FormatStyle::StatementMacros' o='1664' t='std::vector&lt;std::string&gt;'/>
<mbr r='clang::format::FormatStyle::NamespaceMacros' o='1856' t='std::vector&lt;std::string&gt;'/>
<mbr r='clang::format::FormatStyle::IncludeStyle' o='2048' t='tooling::IncludeStyle'/>
<mbr r='clang::format::FormatStyle::IndentCaseLabels' o='2560' t='bool'/>
<mbr r='clang::format::FormatStyle::IndentPPDirectives' o='2592' t='clang::format::FormatStyle::PPDirectiveIndentStyle'/>
<mbr r='clang::format::FormatStyle::IndentWidth' o='2624' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::IndentWrappedFunctionNames' o='2656' t='bool'/>
<mbr r='clang::format::FormatStyle::JavaImportGroups' o='2688' t='std::vector&lt;std::string&gt;'/>
<mbr r='clang::format::FormatStyle::JavaScriptQuotes' o='2880' t='clang::format::FormatStyle::JavaScriptQuoteStyle'/>
<mbr r='clang::format::FormatStyle::JavaScriptWrapImports' o='2912' t='bool'/>
<mbr r='clang::format::FormatStyle::KeepEmptyLinesAtTheStartOfBlocks' o='2920' t='bool'/>
<fun r='_ZNK5clang6format11FormatStyle5isCppEv'/>
<fun r='_ZNK5clang6format11FormatStyle8isCSharpEv'/>
<mbr r='clang::format::FormatStyle::Language' o='2944' t='clang::format::FormatStyle::LanguageKind'/>
<mbr r='clang::format::FormatStyle::MacroBlockBegin' o='3008' t='std::string'/>
<mbr r='clang::format::FormatStyle::MacroBlockEnd' o='3264' t='std::string'/>
<mbr r='clang::format::FormatStyle::MaxEmptyLinesToKeep' o='3520' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::NamespaceIndentation' o='3552' t='clang::format::FormatStyle::NamespaceIndentationKind'/>
<mbr r='clang::format::FormatStyle::ObjCBinPackProtocolList' o='3584' t='clang::format::FormatStyle::BinPackStyle'/>
<mbr r='clang::format::FormatStyle::ObjCBlockIndentWidth' o='3616' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::ObjCSpaceAfterProperty' o='3648' t='bool'/>
<mbr r='clang::format::FormatStyle::ObjCSpaceBeforeProtocolList' o='3656' t='bool'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakAssignment' o='3680' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakBeforeFirstCallParameter' o='3712' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakComment' o='3744' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakFirstLessLess' o='3776' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakString' o='3808' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyBreakTemplateDeclaration' o='3840' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyExcessCharacter' o='3872' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PenaltyReturnTypeOnItsOwnLine' o='3904' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::PointerAlignment' o='3936' t='clang::format::FormatStyle::PointerAlignmentStyle'/>
<mbr r='clang::format::FormatStyle::RawStringFormats' o='3968' t='std::vector&lt;RawStringFormat&gt;'/>
<mbr r='clang::format::FormatStyle::ReflowComments' o='4160' t='bool'/>
<mbr r='clang::format::FormatStyle::SortIncludes' o='4168' t='bool'/>
<mbr r='clang::format::FormatStyle::SortUsingDeclarations' o='4176' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceAfterCStyleCast' o='4184' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceAfterLogicalNot' o='4192' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceAfterTemplateKeyword' o='4200' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeAssignmentOperators' o='4208' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeCpp11BracedList' o='4216' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeCtorInitializerColon' o='4224' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeInheritanceColon' o='4232' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeParens' o='4256' t='clang::format::FormatStyle::SpaceBeforeParensOptions'/>
<mbr r='clang::format::FormatStyle::SpaceBeforeRangeBasedForLoopColon' o='4288' t='bool'/>
<mbr r='clang::format::FormatStyle::SpaceInEmptyParentheses' o='4296' t='bool'/>
<mbr r='clang::format::FormatStyle::SpacesBeforeTrailingComments' o='4320' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::SpacesInAngles' o='4352' t='bool'/>
<mbr r='clang::format::FormatStyle::SpacesInContainerLiterals' o='4360' t='bool'/>
<mbr r='clang::format::FormatStyle::SpacesInCStyleCastParentheses' o='4368' t='bool'/>
<mbr r='clang::format::FormatStyle::SpacesInParentheses' o='4376' t='bool'/>
<mbr r='clang::format::FormatStyle::SpacesInSquareBrackets' o='4384' t='bool'/>
<mbr r='clang::format::FormatStyle::Standard' o='4416' t='clang::format::FormatStyle::LanguageStandard'/>
<mbr r='clang::format::FormatStyle::TabWidth' o='4448' t='unsigned int'/>
<mbr r='clang::format::FormatStyle::UseTab' o='4480' t='clang::format::FormatStyle::UseTabStyle'/>
<fun r='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<fun r='_ZNK5clang6format11FormatStyle16GetLanguageStyleENS1_12LanguageKindE'/>
<fun r='_ZN5clang6format11FormatStyle30BuildStyleSetFromConfigurationERKS1_RKSt6vectorIS1_SaIS1_EE'/>
<mbr r='clang::format::FormatStyle::StyleSet' o='4544' t='clang::format::FormatStyle::FormatStyleSet'/>
