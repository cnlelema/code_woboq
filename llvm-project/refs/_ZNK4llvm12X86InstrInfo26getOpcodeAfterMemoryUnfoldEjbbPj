<dec f='llvm/llvm/lib/Target/X86/X86InstrInfo.h' l='382' type='unsigned int llvm::X86InstrInfo::getOpcodeAfterMemoryUnfold(unsigned int Opc, bool UnfoldLoad, bool UnfoldStore, unsigned int * LoadRegIndex = nullptr) const'/>
<doc f='llvm/llvm/lib/Target/X86/X86InstrInfo.h' l='375'>/// getOpcodeAfterMemoryUnfold - Returns the opcode of the would be new
  /// instruction after load / store are unfolded from an instruction of the
  /// specified opcode. It returns zero if the specified unfolding is not
  /// possible. If LoadRegIndex is non-null, it is filled in with the operand
  /// index of the operand which will hold the register holding the loaded
  /// value.</doc>
<def f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='5421' ll='5436' type='unsigned int llvm::X86InstrInfo::getOpcodeAfterMemoryUnfold(unsigned int Opc, bool UnfoldLoad, bool UnfoldStore, unsigned int * LoadRegIndex = nullptr) const'/>
<use f='llvm/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp' l='843' u='c' c='_ZL26getRegClassForUnfoldedLoadRN4llvm15MachineFunctionERKNS_12X86InstrInfoEj'/>
