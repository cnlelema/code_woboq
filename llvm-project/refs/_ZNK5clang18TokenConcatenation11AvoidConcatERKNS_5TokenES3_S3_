<dec f='llvm/clang/include/clang/Lex/TokenConcatenation.h' l='60' type='bool clang::TokenConcatenation::AvoidConcat(const clang::Token &amp; PrevPrevTok, const clang::Token &amp; PrevTok, const clang::Token &amp; Tok) const'/>
<use f='llvm/clang/lib/Frontend/PrintPreprocessedOutput.cpp' l='166' u='c' c='_ZN12_GLOBAL__N_124PrintPPOutputPPCallbacks11AvoidConcatERKN5clang5TokenES4_S4_'/>
<def f='llvm/clang/lib/Lex/TokenConcatenation.cpp' l='160' ll='297' type='bool clang::TokenConcatenation::AvoidConcat(const clang::Token &amp; PrevPrevTok, const clang::Token &amp; PrevTok, const clang::Token &amp; Tok) const'/>
<doc f='llvm/clang/lib/Lex/TokenConcatenation.cpp' l='149'>/// AvoidConcat - If printing PrevTok immediately followed by Tok would cause
/// the two individual tokens to be lexed as a single token, return true
/// (which causes a space to be printed between them).  This allows the output
/// of -E mode to be lexed to the same token stream as lexing the input
/// directly would.
///
/// This code must conservatively return true if it doesn&apos;t want to be 100%
/// accurate.  This will cause the output to include extra space characters,
/// but the resulting output won&apos;t have incorrect concatenations going on.
/// Examples include &quot;..&quot;, which we print with a space between, because we
/// don&apos;t want to track enough to tell &quot;x..&quot; from &quot;...&quot;.</doc>
<use f='llvm/clang/lib/Rewrite/HTMLRewrite.cpp' l='645' u='c' c='_ZN5clang4html15HighlightMacrosERNS_8RewriterENS_6FileIDERKNS_12PreprocessorE'/>
