<dec f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h' l='175' type='void llvm::RuntimeDyldELF::resolveRelocation(const llvm::RelocationEntry &amp; RE, uint64_t Value)'/>
<inh f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h' l='416' c='_ZN4llvm15RuntimeDyldImpl17resolveRelocationERKNS_15RelocationEntryEm'/>
<def f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp' l='917' ll='922' type='void llvm::RuntimeDyldELF::resolveRelocation(const llvm::RelocationEntry &amp; RE, uint64_t Value)'/>
<doc f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp' l='897'>// The target location for the relocation is described by RE.SectionID and
// RE.Offset.  RE.SectionID can be used to find the SectionEntry.  Each
// SectionEntry has three members describing its location.
// SectionEntry::Address is the address at which the section has been loaded
// into memory in the current (host) process.  SectionEntry::LoadAddress is the
// address that the section will have in the target process.
// SectionEntry::ObjAddress is the address of the bits for this section in the
// original emitted object image (also in the current address space).
//
// Relocations will be applied as if the section were loaded at
// SectionEntry::LoadAddress, but they will be applied at an address based
// on SectionEntry::Address.  SectionEntry::ObjAddress will be used to refer to
// Target memory contents if they are required for value calculations.
//
// The Value parameter here is the load address of the symbol for the
// relocation to be applied.  For relocations which refer to symbols in the
// current object Value will be the LoadAddress of the section in which
// the symbol resides (RE.Addend provides additional information about the
// symbol location).  For external symbols, Value will be the address of the
// symbol in the target address space.</doc>
<ovr f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldELFMips.cpp' l='14' c='_ZN4llvm18RuntimeDyldELFMips17resolveRelocationERKNS_15RelocationEntryEm'/>
