<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='326' type='ModulePassManager llvm::PassBuilder::buildModuleOptimizationPipeline(llvm::PassBuilder::OptimizationLevel Level, bool DebugLogging = false, bool LTOPreLink = false)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='313'>/// Construct the core LLVM module optimization pipeline.
  ///
  /// This pipeline focuses on optimizing the execution speed of the IR. It
  /// uses cost modeling and thresholds to balance code growth against runtime
  /// improvements. It includes vectorization and other information destroying
  /// transformations. It also cannot generally be run repeatedly on a module
  /// without potentially seriously regressing either runtime performance of
  /// the code or serious code size growth.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.</doc>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='795' ll='974' type='ModulePassManager llvm::PassBuilder::buildModuleOptimizationPipeline(llvm::PassBuilder::OptimizationLevel Level, bool DebugLogging = false, bool LTOPreLink = false)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='998' u='c' c='_ZN4llvm11PassBuilder29buildPerModuleDefaultPipelineENS0_17OptimizationLevelEbb'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1078' u='c' c='_ZN4llvm11PassBuilder27buildThinLTODefaultPipelineENS0_17OptimizationLevelEbPKNS_18ModuleSummaryIndexE'/>
