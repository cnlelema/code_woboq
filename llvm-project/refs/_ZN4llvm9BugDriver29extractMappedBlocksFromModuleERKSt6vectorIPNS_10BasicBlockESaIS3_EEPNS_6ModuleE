<dec f='llvm/llvm/tools/bugpoint/BugDriver.h' l='213' type='std::unique_ptr&lt;Module&gt; llvm::BugDriver::extractMappedBlocksFromModule(const std::vector&lt;BasicBlock *&gt; &amp; BBs, llvm::Module * M)'/>
<doc f='llvm/llvm/tools/bugpoint/BugDriver.h' l='207'>/// Extract all but the specified basic blocks into their own functions. The
  /// only detail is that M is actually a module cloned from the one the BBs are
  /// in, so some mapping needs to be performed. If this operation fails for
  /// some reason (ie the implementation is buggy), this function should return
  /// null, otherwise it returns a new Module.</doc>
<def f='llvm/llvm/tools/bugpoint/ExtractFunction.cpp' l='371' ll='421' type='std::unique_ptr&lt;Module&gt; llvm::BugDriver::extractMappedBlocksFromModule(const std::vector&lt;BasicBlock *&gt; &amp; BBs, llvm::Module * M)'/>
<doc f='llvm/llvm/tools/bugpoint/ExtractFunction.cpp' l='367'>//===----------------------------------------------------------------------===//
// Basic Block Extraction Code
//===----------------------------------------------------------------------===//</doc>
<use f='llvm/llvm/tools/bugpoint/Miscompilation.cpp' l='523' u='c' c='_ZN12_GLOBAL__N_123ReduceMiscompiledBlocks9TestFuncsERKSt6vectorIPN4llvm10BasicBlockESaIS4_EE'/>
<use f='llvm/llvm/tools/bugpoint/Miscompilation.cpp' l='575' u='c' c='_ZL13ExtractBlocksRN4llvm9BugDriverEPFNS_8ExpectedIbEES1_St10unique_ptrINS_6ModuleESt14default_deleteIS5_EES8_ERSt6vectorIPNS_8FunctionESaISD_EE'/>
