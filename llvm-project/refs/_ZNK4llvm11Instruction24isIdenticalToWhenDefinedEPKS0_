<dec f='llvm/llvm/include/llvm/IR/Instruction.h' l='635' type='bool llvm::Instruction::isIdenticalToWhenDefined(const llvm::Instruction * I) const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='632'>/// This is like isIdenticalTo, except that it ignores the
  /// SubclassOptionalData flags, which may specify conditions under which the
  /// instruction&apos;s result is undefined.</doc>
<use f='llvm/llvm/lib/Analysis/Loads.cpp' l='182' u='c' c='_ZL26AreEquivalentAddressValuesPKN4llvm5ValueES2_'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='217' u='c' c='_ZN4llvm23MemoryDependenceResults21getCallDependencyFromEPNS_8CallBaseEbNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb1ELb0Ev5920310'/>
<use f='llvm/llvm/lib/IR/Instruction.cpp' l='439' u='c' c='_ZNK4llvm11Instruction13isIdenticalToEPKS0_'/>
<def f='llvm/llvm/lib/IR/Instruction.cpp' l='443' ll='465' type='bool llvm::Instruction::isIdenticalToWhenDefined(const llvm::Instruction * I) const'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1344' u='c' c='_ZL23equivalentAddressValuesPN4llvm5ValueES1_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/EarlyCSE.cpp' l='238' u='c' c='_ZN4llvm12DenseMapInfoIN12_GLOBAL__N_111SimpleValueEE7isEqualES2_S2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1277' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1284' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1357' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1363' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
