<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='221' type='const llvm::BasicBlock * llvm::BasicBlock::getSinglePredecessor() const'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='224' u='c' c='_ZN4llvm10BasicBlock20getSinglePredecessorEv'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='219'>/// Return the predecessor of this block if it has a single predecessor
  /// block. Otherwise return a null pointer.</doc>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='112' u='c' c='_ZL30CanProveNotTakenFirstIterationPKN4llvm10BasicBlockEPKNS_13DominatorTreeEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='624' u='c' c='_ZN4llvm23isValidAssumeForContextEPKNS_11InstructionES2_PKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5538' u='c' c='_ZN4llvm23isImpliedByDomConditionEPKNS_5ValueEPKNS_11InstructionERKNS_10DataLayoutE'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='233' ll='239' type='const llvm::BasicBlock * llvm::BasicBlock::getSinglePredecessor() const'/>
<doc f='llvm/llvm/lib/IR/BasicBlock.cpp' l='231'>/// If this basic block has a single predecessor block,
/// return the block, otherwise return a null pointer.</doc>
<use f='llvm/llvm/lib/IR/Dominators.cpp' l='189' u='c' c='_ZNK4llvm13DominatorTree9dominatesERKNS_14BasicBlockEdgeEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp' l='495' u='c' c='_ZL21shouldInstrumentBlockRKN4llvm8FunctionEPKNS_10BasicBlockEPKNS_13DominatorTreeEPKNS_17PostDominatorTreeERKNS_24SanitizerCoverageOptionsE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='1652' u='c' c='_ZL26isOnlyReachableViaThisEdgeRKN4llvm14BasicBlockEdgeEPNS_13DominatorTreeE'/>
