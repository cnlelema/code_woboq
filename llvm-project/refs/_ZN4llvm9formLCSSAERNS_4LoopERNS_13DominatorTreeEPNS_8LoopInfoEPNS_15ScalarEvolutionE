<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='90' type='bool llvm::formLCSSA(llvm::Loop &amp; L, llvm::DominatorTree &amp; DT, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='78'>/// Put loop into LCSSA form.
///
/// Looks at all instructions in the loop which have uses outside of the
/// current loop. For each, an LCSSA PHI node is inserted and the uses outside
/// the loop are rewritten to use this node. Sub-loops must be in LCSSA form
/// already.
///
/// LoopInfo and DominatorTree are required and preserved.
///
/// If ScalarEvolution is passed in, it will be preserved.
///
/// Returns true if any modifications are made to the loop.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='325' u='c' c='_ZL20hoistLoopToNewParentRN4llvm4LoopERNS_10BasicBlockERNS_13DominatorTreeERNS_8LoopInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='2242' u='c' c='_ZL28unswitchNontrivialInvariantsRN4llvm4LoopERNS_11InstructionENS_8ArrayRefIPNS_5ValueEEERNS_15SmallVectorImplIPNS_10BasicBlockEEERNS_13DominatorTree1049984'/>
<def f='llvm/llvm/lib/Transforms/Utils/LCSSA.cpp' l='320' ll='382' type='bool llvm::formLCSSA(llvm::Loop &amp; L, llvm::DominatorTree &amp; DT, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE)'/>
<use f='llvm/llvm/lib/Transforms/Utils/LCSSA.cpp' l='393' u='c' c='_ZN4llvm20formLCSSARecursivelyERNS_4LoopERNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='333' u='c' c='_ZL18separateNestedLoopPN4llvm4LoopEPNS_10BasicBlockEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionEbPNS_15AssumptionCacheEPNS_16MemorySSAUpdaterE'/>
