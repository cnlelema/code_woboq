<dec f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h' l='309' type='sys::Mutex'/>
<use f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp' l='123' u='a' c='_ZN4llvm15RuntimeDyldImpl18resolveRelocationsEv'/>
<use f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp' l='159' u='a' c='_ZN4llvm15RuntimeDyldImpl17mapSectionAddressEPKvm'/>
<use f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp' l='180' u='a' c='_ZN4llvm15RuntimeDyldImpl14loadObjectImplERKNS_6object10ObjectFileE'/>
<offset>42368</offset>
<doc f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h' l='299'>// This mutex prevents simultaneously loading objects from two different
  // threads.  This keeps us from having to protect individual data structures
  // and guarantees that section allocation requests to the memory manager
  // won&apos;t be interleaved between modules.  It is also used in mapSectionAddress
  // and resolveRelocations to protect write access to internal data structures.
  //
  // loadObject may be called on the same thread during the handling of of
  // processRelocations, and that&apos;s OK.  The handling of the relocation lists
  // is written in such a way as to work correctly if new elements are added to
  // the end of the list while the list is being processed.</doc>
