<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='184' type='static bool llvm::ConstantInt::isValueValidForType(llvm::Type * Ty, uint64_t V)'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='175'>/// This static method returns true if the type Ty is big enough to
  /// represent the value V. This can be used to avoid having the get method
  /// assert when V is larger than Ty can represent. Note that there are two
  /// versions of this method, one for unsigned and one for signed integers.
  /// Although ConstantInt canonicalizes everything to an unsigned integer,
  /// the signed version avoids callers having to convert a signed quantity
  /// to the appropriate unsigned type before calling the method.
  /// @returns true if V is a valid value for type Ty
  /// Determine if the value is in range for the given type.</doc>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='1995' u='c' c='_ZL10getAsInt32PN4llvm11ConstantIntEPNS_4TypeE'/>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='1276' ll='1281' type='static bool llvm::ConstantInt::isValueValidForType(llvm::Type * Ty, uint64_t Val)'/>
<doc f='llvm/llvm/lib/IR/Constants.cpp' l='1273'>//===----------------------------------------------------------------------===//
//                      isValueValidForType implementations</doc>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='44279' u='c' c='_ZNK4llvm17X86TargetLowering28LowerAsmOperandForConstraintENS_7SDValueERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorIS1_SaIS1_EERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1047' u='c' c='_ZN12_GLOBAL__N_121FunctionStackPoisoner18visitIntrinsicInstERN4llvm13IntrinsicInstE'/>
