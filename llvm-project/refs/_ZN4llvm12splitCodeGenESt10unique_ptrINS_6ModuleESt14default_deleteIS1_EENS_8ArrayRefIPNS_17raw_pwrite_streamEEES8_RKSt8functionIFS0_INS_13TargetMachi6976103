<dec f='llvm/llvm/include/llvm/CodeGen/ParallelCG.h' l='39' type='std::unique_ptr&lt;Module&gt; llvm::splitCodeGen(std::unique_ptr&lt;Module&gt; M, ArrayRef&lt;llvm::raw_pwrite_stream *&gt; OSs, ArrayRef&lt;llvm::raw_pwrite_stream *&gt; BCOSs, const std::function&lt;std::unique_ptr&lt;TargetMachine&gt; ()&gt; &amp; TMFactory, TargetMachine::CodeGenFileType FileType = TargetMachine::CGFT_ObjectFile, bool PreserveLocals = false)'/>
<def f='llvm/llvm/lib/CodeGen/ParallelCG.cpp' l='37' ll='98' type='std::unique_ptr&lt;Module&gt; llvm::splitCodeGen(std::unique_ptr&lt;Module&gt; M, ArrayRef&lt;llvm::raw_pwrite_stream *&gt; OSs, ArrayRef&lt;llvm::raw_pwrite_stream *&gt; BCOSs, const std::function&lt;std::unique_ptr&lt;TargetMachine&gt; ()&gt; &amp; TMFactory, TargetMachine::CodeGenFileType FileType = TargetMachine::CGFT_ObjectFile, bool PreserveLocals = false)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/ParallelCG.h' l='28'>/// Split M into OSs.size() partitions, and generate code for each. Takes a
/// factory function for the TargetMachine TMFactory. Writes OSs.size() output
/// files to the output streams in OSs. The resulting output files if linked
/// together are intended to be equivalent to the single output file that would
/// have been code generated from M.
///
/// Writes bitcode for individual partitions into output streams in BCOSs, if
/// BCOSs is not empty.
///
/// \returns M if OSs.size() == 1, otherwise returns std::unique_ptr&lt;Module&gt;().</doc>
<use f='llvm/llvm/lib/LTO/LTOCodeGenerator.cpp' l='597' u='c' c='_ZN4llvm16LTOCodeGenerator16compileOptimizedENS_8ArrayRefIPNS_17raw_pwrite_streamEEE'/>
