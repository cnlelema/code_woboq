<def f='llvm/llvm/include/llvm/MC/MCInstrAnalysis.h' l='112' ll='115' type='bool llvm::MCInstrAnalysis::isZeroIdiom(const llvm::MCInst &amp; MI, llvm::APInt &amp; Mask, unsigned int CPUID) const'/>
<use f='llvm/llvm/include/llvm/MC/MCInstrAnalysis.h' l='139' u='c' c='_ZNK4llvm15MCInstrAnalysis20isDependencyBreakingERKNS_6MCInstERNS_5APIntEj'/>
<doc f='llvm/llvm/include/llvm/MC/MCInstrAnalysis.h' l='94'>/// Returns true if MI is a dependency breaking zero-idiom for the given
  /// subtarget.
  ///
  /// Mask is used to identify input operands that have their dependency
  /// broken. Each bit of the mask is associated with a specific input operand.
  /// Bits associated with explicit input operands are laid out first in the
  /// mask; implicit operands come after explicit operands.
  /// 
  /// Dependencies are broken only for operands that have their corresponding bit
  /// set. Operands that have their bit cleared, or that don&apos;t have a
  /// corresponding bit in the mask don&apos;t have their dependency broken.  Note
  /// that Mask may not be big enough to describe all operands.  The assumption
  /// for operands that don&apos;t have a correspondent bit in the mask is that those
  /// are still data dependent.
  /// 
  /// The only exception to the rule is for when Mask has all zeroes.
  /// A zero mask means: dependencies are broken for all explicit register
  /// operands.</doc>
