<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='164' type='llvm::BasicBlock * llvm::SplitCriticalEdge(llvm::Instruction * TI, unsigned int SuccNum, const llvm::CriticalEdgeSplittingOptions &amp; Options = llvm::CriticalEdgeSplittingOptions())'/>
<use f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='172' u='c' c='_ZN4llvm17SplitCriticalEdgeEPNS_10BasicBlockENS_12SuccIteratorINS_11InstructionES0_EERKNS_28CriticalEdgeSplittingOptionsE'/>
<use f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='187' u='c' c='_ZN4llvm17SplitCriticalEdgeEPNS_10BasicBlockENS_12PredIteratorIS0_NS_5Value18user_iterator_implINS_4UserEEEEERKNS_28CriticalEdgeSplittingOptionsE'/>
<use f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='203' u='c' c='_ZN4llvm17SplitCriticalEdgeEPNS_10BasicBlockES1_RKNS_28CriticalEdgeSplittingOptionsE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='148'>/// If this edge is a critical edge, insert a new node to split the critical
/// edge. This will update the analyses passed in through the option struct.
/// This returns the new block if the edge was split, null otherwise.
///
/// If MergeIdenticalEdges in the options struct is true (not the default),
/// *all* edges from TI to the specified successor will be merged into the same
/// critical edge block. This is most commonly interesting with switch
/// instructions, which may have many edges to any one destination.  This
/// ensures that all edges to that dest go to one block instead of each going
/// to a different block, but isn&apos;t the standard definition of a &quot;critical
/// edge&quot;.
///
/// It is invalid to call this function on a critical edge that starts at an
/// IndirectBrInst.  Splitting these edges will almost always create an invalid
/// program because the address of the new block won&apos;t be the one that is jumped
/// to.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp' l='378' u='c' c='_ZL28SplitCriticalSideEffectEdgesRN4llvm8FunctionEPNS_13DominatorTreeEPNS_8LoopInfoE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp' l='818' u='c' c='_ZN12_GLOBAL__N_122FuncPGOInstrumentation10getInstrBBEPT_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2379' u='c' c='_ZN4llvm3GVN18splitCriticalEdgesEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='986' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch30EmitPreheaderBranchOnConditionEPN4llvm5ValueEPNS1_8ConstantEPNS1_10BasicBlockES7_PNS1_10BranchInstEPNS1_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='987' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch30EmitPreheaderBranchOnConditionEPN4llvm5ValueEPNS1_8ConstantEPNS1_10BasicBlockES7_PNS1_10BranchInstEPNS1_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='330' u='c' c='_ZN4llvm9SplitEdgeEPNS_10BasicBlockES1_PNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='360' u='c' c='_ZN4llvm21SplitAllCriticalEdgesERNS_8FunctionERKNS_28CriticalEdgeSplittingOptionsE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='136' ll='317' type='llvm::BasicBlock * llvm::SplitCriticalEdge(llvm::Instruction * TI, unsigned int SuccNum, const llvm::CriticalEdgeSplittingOptions &amp; Options = llvm::CriticalEdgeSplittingOptions())'/>
<use f='llvm/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp' l='50' u='c' c='_ZN4llvm16DemoteRegToStackERNS_11InstructionEbPS0_'/>
