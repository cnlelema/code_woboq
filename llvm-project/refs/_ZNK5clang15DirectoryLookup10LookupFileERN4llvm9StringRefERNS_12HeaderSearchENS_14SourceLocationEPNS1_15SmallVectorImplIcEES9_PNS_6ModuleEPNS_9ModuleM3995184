<dec f='llvm/clang/include/clang/Lex/DirectoryLookup.h' l='179' type='const clang::FileEntry * clang::DirectoryLookup::LookupFile(llvm::StringRef &amp; Filename, clang::HeaderSearch &amp; HS, clang::SourceLocation IncludeLoc, SmallVectorImpl&lt;char&gt; * SearchPath, SmallVectorImpl&lt;char&gt; * RelativePath, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool &amp; InUserSpecifiedSystemFramework, bool &amp; IsFrameworkFound, bool &amp; HasBeenMapped, SmallVectorImpl&lt;char&gt; &amp; MappedName) const'/>
<doc f='llvm/clang/include/clang/Lex/DirectoryLookup.h' l='146'>/// LookupFile - Lookup the specified file in this search path, returning it
  /// if it exists or returning null if not.
  ///
  /// \param Filename The file to look up relative to the search paths.
  ///
  /// \param HS The header search instance to search with.
  ///
  /// \param IncludeLoc the source location of the #include or #import
  /// directive.
  ///
  /// \param SearchPath If not NULL, will be set to the search path relative
  /// to which the file was found.
  ///
  /// \param RelativePath If not NULL, will be set to the path relative to
  /// SearchPath at which the file was found. This only differs from the
  /// Filename for framework includes.
  ///
  /// \param RequestingModule The module in which the lookup was performed.
  ///
  /// \param SuggestedModule If non-null, and the file found is semantically
  /// part of a known module, this will be set to the module that should
  /// be imported instead of preprocessing/parsing the file found.
  ///
  /// \param [out] InUserSpecifiedSystemFramework If the file is found,
  /// set to true if the file is located in a framework that has been
  /// user-specified to be treated as a system framework.
  ///
  /// \param [out] IsFrameworkFound For a framework directory set to true if
  /// specified &apos;.framework&apos; directory is found.
  ///
  /// \param [out] MappedName if this is a headermap which maps the filename to
  /// a framework include (&quot;Foo.h&quot; -&gt; &quot;Foo/Foo.h&quot;), set the new name to this
  /// vector and point Filename to it.</doc>
<def f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='328' ll='402' type='const clang::FileEntry * clang::DirectoryLookup::LookupFile(llvm::StringRef &amp; Filename, clang::HeaderSearch &amp; HS, clang::SourceLocation IncludeLoc, SmallVectorImpl&lt;char&gt; * SearchPath, SmallVectorImpl&lt;char&gt; * RelativePath, clang::Module * RequestingModule, ModuleMap::KnownHeader * SuggestedModule, bool &amp; InUserSpecifiedSystemFramework, bool &amp; IsFrameworkFound, bool &amp; HasBeenMapped, SmallVectorImpl&lt;char&gt; &amp; MappedName) const'/>
<use f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='861' u='c' c='_ZN5clang12HeaderSearch10LookupFileEN4llvm9StringRefENS_14SourceLocationEbPKNS_15DirectoryLookupERS6_NS1_8ArrayRefISt4pairIPKNS_9FileEntryEPKNS_14Dire14579246'/>
<doc f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='326'>/// LookupFile - Lookup the specified file in this search path, returning it
/// if it exists or returning null if not.</doc>
