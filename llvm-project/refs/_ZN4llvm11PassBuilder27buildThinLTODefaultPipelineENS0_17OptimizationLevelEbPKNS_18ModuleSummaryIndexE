<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='373' type='ModulePassManager llvm::PassBuilder::buildThinLTODefaultPipeline(llvm::PassBuilder::OptimizationLevel Level, bool DebugLogging, const llvm::ModuleSummaryIndex * ImportSummary)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='361'>/// Build an ThinLTO default optimization pipeline to a pass manager.
  ///
  /// This provides a good default optimization pipeline for link-time
  /// optimization and code generation. It is particularly tuned to fit well
  /// when IR coming into the LTO phase was first run through \c
  /// addPreLinkLTODefaultPipeline, and the two coordinate closely.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.</doc>
<use f='llvm/llvm/lib/LTO/LTOBackend.cpp' l='212' u='c' c='_ZN12_GLOBAL__N_1L14runNewPMPassesERN4llvm3lto6ConfigERNS0_6ModuleEPNS0_13TargetMachineEjbPNS0_18ModuleSummaryIndexEPKS8_'/>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1042' ll='1081' type='ModulePassManager llvm::PassBuilder::buildThinLTODefaultPipeline(llvm::PassBuilder::OptimizationLevel Level, bool DebugLogging, const llvm::ModuleSummaryIndex * ImportSummary)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1809' u='c' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementEbb'/>
