<dec f='llvm/llvm/lib/Target/PowerPC/PPCHazardRecognizers.h' l='77' type='void llvm::PPCHazardRecognizer970::PPCHazardRecognizer970(const llvm::ScheduleDAG &amp; DAG)'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp' l='262' ll='265' type='void llvm::PPCHazardRecognizer970::PPCHazardRecognizer970(const llvm::ScheduleDAG &amp; DAG)'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp' l='236'>//===----------------------------------------------------------------------===//
// PowerPC 970 Hazard Recognizer
//
// This models the dispatch group formation of the PPC970 processor.  Dispatch
// groups are bundles of up to five instructions that can contain various mixes
// of instructions.  The PPC970 can dispatch a peak of 4 non-branch and one
// branch instruction per-cycle.
//
// There are a number of restrictions to dispatch group formation: some
// instructions can only be issued in the first slot of a dispatch group, &amp; some
// instructions fill an entire dispatch group.  Additionally, only branches can
// issue in the 5th (last) slot.
//
// Finally, there are a number of &quot;structural&quot; hazards on the PPC970.  These
// conditions cause large performance penalties due to misprediction, recovery,
// and replay logic that has to happen.  These cases include setting a CTR and
// branching through it in the same dispatch group, and storing to an address,
// then loading from the same address within a dispatch group.  To avoid these
// conditions, we insert no-op instructions when appropriate.
//
// FIXME: This is missing some significant cases:
//   1. Modeling of microcoded instructions.
//   2. Handling of serialized operations.
//   3. Handling of the esoteric cases in &quot;Resource-based Instruction Grouping&quot;.
//</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='140' u='c' c='_ZNK4llvm12PPCInstrInfo34CreateTargetPostRAHazardRecognizerEPKNS_18InstrItineraryDataEPKNS_11ScheduleDAGE'/>
