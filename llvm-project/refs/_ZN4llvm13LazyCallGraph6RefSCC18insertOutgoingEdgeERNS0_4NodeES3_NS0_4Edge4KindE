<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='761' type='void llvm::LazyCallGraph::RefSCC::insertOutgoingEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN, Edge::Kind EK)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='755'>/// Insert an edge whose parent is in this RefSCC and child is in some
    /// child RefSCC.
    ///
    /// There must be an existing path from the \p SourceN to the \p TargetN.
    /// This operation is inexpensive and does not change the set of SCCs and
    /// RefSCCs in the graph.</doc>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='943' ll='961' type='void llvm::LazyCallGraph::RefSCC::insertOutgoingEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN, Edge::Kind EK)'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='639' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
