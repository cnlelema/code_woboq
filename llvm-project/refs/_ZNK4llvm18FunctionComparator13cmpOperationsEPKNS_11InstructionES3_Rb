<dec f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='277' type='int llvm::FunctionComparator::cmpOperations(const llvm::Instruction * L, const llvm::Instruction * R, bool &amp; needToCmpOperands) const'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='248'>/// Compare two Instructions for equivalence, similar to
  /// Instruction::isSameOperationAs.
  ///
  /// Stages are listed in &quot;most significant stage first&quot; order:
  /// On each stage below, we do comparison between some left and right
  /// operation parts. If parts are non-equal, we assign parts comparison
  /// result to the operation comparison result and exit from method.
  /// Otherwise we proceed to the next stage.
  /// Stages:
  /// 1. Operations opcodes. Compared as numbers.
  /// 2. Number of operands.
  /// 3. Operation types. Compared with cmpType method.
  /// 4. Compare operation subclass optional data as stream of bytes:
  /// just convert it to integers and call cmpNumbers.
  /// 5. Compare in operation operand types with cmpType in
  /// most significant operand first order.
  /// 6. Last stage. Check operations for some specific attributes.
  /// For example, for Load it would be:
  /// 6.1.Load: volatile (as boolean flag)
  /// 6.2.Load: alignment (as integer numbers)
  /// 6.3.Load: ordering (as underlying enum class value)
  /// 6.4.Load: synch-scope (as integer numbers)
  /// 6.5.Load: range metadata (as integer ranges)
  /// On this stage its better to see the code, since its not more than 10-15
  /// strings for particular instruction, and could change sometimes.
  ///
  /// Sets \p needToCmpOperands to true if the operands of the instructions
  /// still must be compared afterwards. In this case it&apos;s already guaranteed
  /// that both instructions have the same number of operands.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='481' ll='645' type='int llvm::FunctionComparator::cmpOperations(const llvm::Instruction * L, const llvm::Instruction * R, bool &amp; needToCmpOperands) const'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='756' u='c' c='_ZNK4llvm18FunctionComparator14cmpBasicBlocksEPKNS_10BasicBlockES3_'/>
<doc f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='477'>// Determine whether the two operations are the same except that pointer-to-A
// and pointer-to-B are equivalent. This should be kept in sync with
// Instruction::isSameOperationAs.
// Read method declaration comments for more details.</doc>
<use f='llvm/llvm/unittests/Transforms/Utils/FunctionComparatorTest.cpp' l='89' u='c' c='_ZN14TestComparator17testCmpOperationsEPKN4llvm11InstructionES3_Rb'/>
