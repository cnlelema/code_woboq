<dec f='llvm/llvm/include/llvm/CodeGen/CalcSpillWeights.h' l='92' type='float llvm::VirtRegAuxInfo::weightCalcHelper(llvm::LiveInterval &amp; li, llvm::SlotIndex * start = nullptr, llvm::SlotIndex * end = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/CalcSpillWeights.cpp' l='138' u='c' c='_ZN4llvm14VirtRegAuxInfo27calculateSpillWeightAndHintERNS_12LiveIntervalE'/>
<use f='llvm/llvm/lib/CodeGen/CalcSpillWeights.cpp' l='147' u='c' c='_ZN4llvm14VirtRegAuxInfo12futureWeightERNS_12LiveIntervalENS_9SlotIndexES3_'/>
<def f='llvm/llvm/lib/CodeGen/CalcSpillWeights.cpp' l='150' ll='302' type='float llvm::VirtRegAuxInfo::weightCalcHelper(llvm::LiveInterval &amp; li, llvm::SlotIndex * start = nullptr, llvm::SlotIndex * end = nullptr)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/CalcSpillWeights.h' l='80'>/// Helper function for weight calculations.
    /// (Re)compute li&apos;s spill weight and allocation hint, or, for non null
    /// start and end - compute future expected spill weight of a split
    /// artifact of li that will span between start and end slot indexes.
    /// \param li     The live interval for which to compute the weight.
    /// \param start  The expected begining of the split artifact. Instructions
    ///               before start will not affect the weight. Relevant for
    ///               weight calculation of future split artifact.
    /// \param end    The expected end of the split artifact. Instructions
    ///               after end will not affect the weight. Relevant for
    ///               weight calculation of future split artifact.
    /// \return The spill weight. Returns negative weight for unspillable li.</doc>
