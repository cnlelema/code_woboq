<dec f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='1223' type='void clang::CodeGen::CGOpenMPRuntime::emitTaskLoopCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, const clang::OMPLoopDirective &amp; D, llvm::Function * TaskFunction, clang::QualType SharedsTy, clang::CodeGen::Address Shareds, const clang::Expr * IfCond, const clang::CodeGen::OMPTaskDataTy &amp; Data)'/>
<doc f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='1194'>/// Emit task region for the taskloop directive. The taskloop region is
  /// emitted in several steps:
  /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32
  /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,
  /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the
  /// function:
  /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {
  ///   TaskFunction(gtid, tt-&gt;part_id, tt-&gt;shareds);
  ///   return 0;
  /// }
  /// 2. Copy a list of shared variables to field shareds of the resulting
  /// structure kmp_task_t returned by the previous call (if any).
  /// 3. Copy a pointer to destructions function to field destructions of the
  /// resulting structure kmp_task_t.
  /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t
  /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int
  /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task
  /// is a resulting structure from
  /// previous items.
  /// \param D Current task directive.
  /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32
  /// /*part_id*/, captured_struct */*__context*/);
  /// \param SharedsTy A type which contains references the shared variables.
  /// \param Shareds Context with the list of shared variables from the \p
  /// TaskFunction.
  /// \param IfCond Not a nullptr if &apos;if&apos; clause was specified, nullptr
  /// otherwise.
  /// \param Data Additional data for task generation like tiednsee, final
  /// state, list of privates etc.</doc>
<def f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='5354' ll='5433' type='void clang::CodeGen::CGOpenMPRuntime::emitTaskLoopCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, const clang::OMPLoopDirective &amp; D, llvm::Function * TaskFunction, clang::QualType SharedsTy, clang::CodeGen::Address Shareds, const clang::Expr * IfCond, const clang::CodeGen::OMPTaskDataTy &amp; Data)'/>
<ovr f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='10630' c='_ZN5clang7CodeGen19CGOpenMPSIMDRuntime16emitTaskLoopCallERNS0_15CodeGenFunctionENS_14SourceLocationERKNS_16OMPLoopDirectiveEPN4llvm8FunctionENS_8QualT12668856'/>
<use f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='4998' u='c' c='_ZN5clang7CodeGen15CodeGenFunction29EmitOMPTaskLoopBasedDirectiveERKNS_16OMPLoopDirectiveE'/>
