<dec f='llvm/clang/include/clang/Lex/ModuleMap.h' l='304' type='clang::Module * clang::ModuleMap::resolveModuleId(const ModuleId &amp; Id, clang::Module * Mod, bool Complain) const'/>
<doc f='llvm/clang/include/clang/Lex/ModuleMap.h' l='293'>/// Resolve the given module id to an actual module.
  ///
  /// \param Id The module-id to resolve.
  ///
  /// \param Mod The module in which we&apos;re resolving the module-id.
  ///
  /// \param Complain Whether this routine should complain about unresolvable
  /// module-ids.
  ///
  /// \returns The resolved module, or null if the module-id could not be
  /// resolved.</doc>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='118' u='c' c='_ZNK5clang9ModuleMap13resolveExportEPNS_6ModuleERKNS1_20UnresolvedExportDeclEb'/>
<def f='llvm/clang/lib/Lex/ModuleMap.cpp' l='125' ll='153' type='clang::Module * clang::ModuleMap::resolveModuleId(const ModuleId &amp; Id, clang::Module * Mod, bool Complain) const'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1275' u='c' c='_ZN5clang9ModuleMap11resolveUsesEPNS_6ModuleEb'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1288' u='c' c='_ZN5clang9ModuleMap16resolveConflictsEPNS_6ModuleEb'/>
