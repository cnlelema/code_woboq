<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='2208' type='static bool llvm::ShuffleVectorInst::isTransposeMask(ArrayRef&lt;int&gt; Mask)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2213' u='c' c='_ZN4llvm17ShuffleVectorInst15isTransposeMaskEPKNS_8ConstantE'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='2176'>/// Return true if this shuffle mask is a transpose mask.
  /// Transpose vector masks transpose a 2xn matrix. They read corresponding
  /// even- or odd-numbered vector elements from two n-dimensional source
  /// vectors and write each result into consecutive elements of an
  /// n-dimensional destination vector. Two shuffles are necessary to complete
  /// the transpose, one for the even elements and another for the odd elements.
  /// This description closely follows how the TRN1 and TRN2 AArch64
  /// instructions operate.
  ///
  /// For example, a simple 2x2 matrix can be transposed with:
  ///
  ///   ; Original matrix
  ///   m0 = &lt; a, b &gt;
  ///   m1 = &lt; c, d &gt;
  ///
  ///   ; Transposed matrix
  ///   t0 = &lt; a, c &gt; = shufflevector m0, m1, &lt; 0, 2 &gt;
  ///   t1 = &lt; b, d &gt; = shufflevector m0, m1, &lt; 1, 3 &gt;
  ///
  /// For matrices having greater than n columns, the resulting nx2 transposed
  /// matrix is stored in two result vectors such that one vector contains
  /// interleaved elements from all the even-numbered rows and the other vector
  /// contains interleaved elements from all the odd-numbered rows. For example,
  /// a 2x4 matrix can be transposed with:
  ///
  ///   ; Original matrix
  ///   m0 = &lt; a, b, c, d &gt;
  ///   m1 = &lt; e, f, g, h &gt;
  ///
  ///   ; Transposed matrix
  ///   t0 = &lt; a, e, c, g &gt; = shufflevector m0, m1 &lt; 0, 4, 2, 6 &gt;
  ///   t1 = &lt; b, f, d, h &gt; = shufflevector m0, m1 &lt; 1, 5, 3, 7 &gt;</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='1984' ll='2016' type='static bool llvm::ShuffleVectorInst::isTransposeMask(ArrayRef&lt;int&gt; Mask)'/>
