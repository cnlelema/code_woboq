<dec f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='320' type='int llvm::FunctionComparator::cmpTypes(llvm::Type * TyL, llvm::Type * TyR) const'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='280'>/// cmpType - compares two types,
  /// defines total ordering among the types set.
  ///
  /// Return values:
  /// 0 if types are equal,
  /// -1 if Left is less than Right,
  /// +1 if Left is greater than Right.
  ///
  /// Description:
  /// Comparison is broken onto stages. Like in lexicographical comparison
  /// stage coming first has higher priority.
  /// On each explanation stage keep in mind total ordering properties.
  ///
  /// 0. Before comparison we coerce pointer types of 0 address space to
  /// integer.
  /// We also don&apos;t bother with same type at left and right, so
  /// just return 0 in this case.
  ///
  /// 1. If types are of different kind (different type IDs).
  ///    Return result of type IDs comparison, treating them as numbers.
  /// 2. If types are integers, check that they have the same width. If they
  /// are vectors, check that they have the same count and subtype.
  /// 3. Types have the same ID, so check whether they are one of:
  /// * Void
  /// * Float
  /// * Double
  /// * X86_FP80
  /// * FP128
  /// * PPC_FP128
  /// * Label
  /// * Metadata
  /// We can treat these types as equal whenever their IDs are same.
  /// 4. If Left and Right are pointers, return result of address space
  /// comparison (numbers comparison). We can treat pointer types of same
  /// address space as equal.
  /// 5. If types are complex.
  /// Then both Left and Right are to be expanded and their element types will
  /// be checked with the same way. If we get Res != 0 on some stage, return it.
  /// Otherwise return 0.
  /// 6. For all other cases put llvm_unreachable.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='195' u='c' c='_ZNK4llvm18FunctionComparator12cmpConstantsEPKNS_8ConstantES3_'/>
<def f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='393' ll='475' type='int llvm::FunctionComparator::cmpTypes(llvm::Type * TyL, llvm::Type * TyR) const'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='441' u='c' c='_ZNK4llvm18FunctionComparator8cmpTypesEPNS_4TypeES2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='456' u='c' c='_ZNK4llvm18FunctionComparator8cmpTypesEPNS_4TypeES2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='460' u='c' c='_ZNK4llvm18FunctionComparator8cmpTypesEPNS_4TypeES2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='472' u='c' c='_ZNK4llvm18FunctionComparator8cmpTypesEPNS_4TypeES2_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='507' u='c' c='_ZNK4llvm18FunctionComparator13cmpOperationsEPKNS_11InstructionES3_Rb'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='518' u='c' c='_ZNK4llvm18FunctionComparator13cmpOperationsEPKNS_11InstructionES3_Rb'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='524' u='c' c='_ZNK4llvm18FunctionComparator13cmpOperationsEPKNS_11InstructionES3_Rb'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='665' u='c' c='_ZNK4llvm18FunctionComparator7cmpGEPsEPKNS_11GEPOperatorES3_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='686' u='c' c='_ZNK4llvm18FunctionComparator12cmpInlineAsmEPKNS_9InlineAsmES3_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='767' u='c' c='_ZNK4llvm18FunctionComparator14cmpBasicBlocksEPKNS_10BasicBlockES3_'/>
<use f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='810' u='c' c='_ZNK4llvm18FunctionComparator16compareSignatureEv'/>
<doc f='llvm/llvm/lib/Transforms/Utils/FunctionComparator.cpp' l='390'>/// cmpType - compares two types,
/// defines total ordering among the types set.
/// See method declaration comments for more details.</doc>
<use f='llvm/llvm/unittests/Transforms/Utils/FunctionComparatorTest.cpp' l='94' u='c' c='_ZN14TestComparator12testCmpTypesEPN4llvm4TypeES2_'/>
