<dec f='llvm/clang/lib/CodeGen/CodeGenModule.h' l='1152' type='void clang::CodeGen::CodeGenModule::AddDefaultFnAttrs(llvm::Function &amp; F)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenModule.h' l='1135'>/// Adds attributes to F according to our CodeGenOptions and LangOptions, as
  /// though we had emitted it ourselves.  We remove any attributes on F that
  /// conflict with the attributes we add here.
  ///
  /// This is useful for adding attrs to bitcode modules that you want to link
  /// with but don&apos;t control, such as CUDA&apos;s libdevice.  When linking with such
  /// a bitcode library, you might want to set e.g. its functions&apos;
  /// &quot;unsafe-fp-math&quot; attribute to match the attr of the functions you&apos;re
  /// codegen&apos;ing.  Otherwise, LLVM will interpret the bitcode module&apos;s lack of
  /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM
  /// will propagate unsafe-fp-math=false up to every transitive caller of a
  /// function in the bitcode library!
  ///
  /// With the exception of fast-math attrs, this will only make the attributes
  /// on the function more conservative.  But it&apos;s unsafe to call this on a
  /// function which relies on particular fast-math attributes for correctness.
  /// It&apos;s up to you to ensure that this is safe.</doc>
<def f='llvm/clang/lib/CodeGen/CGCall.cpp' l='1872' ll='1877' type='void clang::CodeGen::CodeGenModule::AddDefaultFnAttrs(llvm::Function &amp; F)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='205' u='c' c='_ZN5clang15BackendConsumer13LinkInModulesEv'/>
