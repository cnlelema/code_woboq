<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1407' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::BasicBlock * InsertAtEnd)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='1467' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='1478' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EENS5_INS_17OperandBundleDefTIS4_EEEERKNS_5TwineEPNS_10BasicBlockE'/>
<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='1679' ll='1688' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::BasicBlock * InsertAtEnd)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1405'>/// Construct a CallInst given a range of arguments.
  /// Construct a CallInst from a range of arguments</doc>
