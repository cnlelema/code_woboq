<dec f='llvm/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h' l='35' type='std::unique_ptr&lt;DiagnosticConsumer&gt; clang::serialized_diags::create(llvm::StringRef OutputFile, clang::DiagnosticOptions * Diags, bool MergeChildRecords = false)'/>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='248' u='c' c='_ZL26SetupSerializedDiagnosticsPN5clang17DiagnosticOptionsERNS_17DiagnosticsEngineEN4llvm9StringRefE'/>
<doc f='llvm/clang/include/clang/Frontend/SerializedDiagnosticPrinter.h' l='27'>/// Returns a DiagnosticConsumer that serializes diagnostics to
///  a bitcode file.
///
/// The created DiagnosticConsumer is designed for quick and lightweight
/// transfer of diagnostics to the enclosing build system (e.g., an IDE).
/// This allows wrapper tools for Clang to get diagnostics from Clang
/// (via libclang) without needing to parse Clang&apos;s command line output.
///</doc>
<def f='llvm/clang/lib/Frontend/SerializedDiagnosticPrinter.cpp' l='295' ll='298' type='std::unique_ptr&lt;DiagnosticConsumer&gt; clang::serialized_diags::create(llvm::StringRef OutputFile, clang::DiagnosticOptions * Diags, bool MergeChildRecords = false)'/>
<use f='llvm/clang/tools/driver/driver.cpp' l='441' u='c' c='main'/>
