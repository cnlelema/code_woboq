<dec f='llvm/llvm/lib/Target/X86/X86ISelLowering.h' l='1282' type='unsigned int llvm::X86TargetLowering::GetAlignedArgumentStackSize(unsigned int StackSize, llvm::SelectionDAG &amp; DAG) const'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3297' u='c' c='_ZNK4llvm17X86TargetLowering20LowerFormalArgumentsENS_7SDValueEjbRKNS_15SmallVectorImplINS_3ISD8InputArgEEERKNS_5SDLocERNS_12SelectionDAGERNS2_IS1_EE'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='3654' u='c' c='_ZNK4llvm17X86TargetLowering9LowerCallERNS_14TargetLowering16CallLoweringInfoERNS_15SmallVectorImplINS_7SDValueEEE'/>
<def f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='4129' ll='4147' type='unsigned int llvm::X86TargetLowering::GetAlignedArgumentStackSize(unsigned int StackSize, llvm::SelectionDAG &amp; DAG) const'/>
<doc f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='4096'>//===----------------------------------------------------------------------===//
//                Fast Calling Convention (tail call) implementation
//===----------------------------------------------------------------------===//

//  Like std call, callee cleans arguments, convention except that ECX is
//  reserved for storing the tail called function address. Only 2 registers are
//  free for argument passing (inreg). Tail call optimization is performed
//  provided:
//                * tailcallopt is enabled
//                * caller/callee are fastcc
//  On X86_64 architecture with GOT-style position independent code only local
//  (within module) calls are supported at the moment.
//  To keep the stack aligned according to platform abi the function
//  GetAlignedArgumentStackSize ensures that argument delta is always multiples
//  of stack alignment. (Dynamic linkers need this - darwin&apos;s dyld for example)
//  If a tail called function callee has more arguments than the caller the
//  caller needs to make sure that there is room to move the RETADDR to. This is
//  achieved by reserving an area the size of the argument delta right after the
//  original RETADDR, but before the saved framepointer or the spilled registers
//  e.g. caller(arg1, arg2) calls callee(arg1, arg2,arg3,arg4)
//  stack layout:
//    arg1
//    arg2
//    RETADDR
//    [ new RETADDR
//      move area ]
//    (possible EBP)
//    ESI
//    EDI
//    local1 ..

/// Make the stack size align e.g 16n + 12 aligned for a 16-byte align
/// requirement.</doc>
