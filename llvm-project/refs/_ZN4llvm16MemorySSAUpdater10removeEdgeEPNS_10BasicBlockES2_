<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='104' type='void llvm::MemorySSAUpdater::removeEdge(llvm::BasicBlock * From, llvm::BasicBlock * To)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='102'>/// Update the MemoryPhi in `To` following an edge deletion between `From` and
  /// `To`. If `To` becomes unreachable, a call to removeBlocks should be made.</doc>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='458' ll='464' type='void llvm::MemorySSAUpdater::removeEdge(llvm::BasicBlock * From, llvm::BasicBlock * To)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='719' u='c' c='_ZN4llvm16MemorySSAUpdater12applyUpdatesENS_8ArrayRefINS_3cfg6UpdateIPNS_10BasicBlockEEEEERNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp' l='496' u='c' c='_ZN12_GLOBAL__N_129ConstantTerminatorFoldingImpl15foldTerminatorsEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='510' u='c' c='_ZL21unswitchTrivialBranchRN4llvm4LoopERNS_10BranchInstERNS_13DominatorTreeERNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='2075' u='c' c='_ZL28unswitchNontrivialInvariantsRN4llvm4LoopERNS_11InstructionENS_8ArrayRefIPNS_5ValueEEERNS_15SmallVectorImplIPNS_10BasicBlockEEERNS_13DominatorTree1049984'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='489' u='c' c='_ZN12_GLOBAL__N_110LoopRotate10rotateLoopEPN4llvm4LoopEb'/>
