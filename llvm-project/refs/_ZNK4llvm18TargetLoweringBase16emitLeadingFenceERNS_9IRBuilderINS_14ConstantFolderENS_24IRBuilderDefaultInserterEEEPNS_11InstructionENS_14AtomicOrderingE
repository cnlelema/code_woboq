<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='1762' ll='1768' type='llvm::Instruction * llvm::TargetLoweringBase::emitLeadingFence(IRBuilder&lt;&gt; &amp; Builder, llvm::Instruction * Inst, llvm::AtomicOrdering Ord) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='1729'>/// Inserts in the IR a target-specific intrinsic specifying a fence.
  /// It is called by AtomicExpandPass before expanding an
  ///   AtomicRMW/AtomicCmpXchg/AtomicStore/AtomicLoad
  ///   if shouldInsertFencesForAtomic returns true.
  ///
  /// Inst is the original atomic instruction, prior to other expansions that
  /// may be performed.
  ///
  /// This function should either return a nullptr, or a pointer to an IR-level
  ///   Instruction*. Even complex fence sequences can be represented by a
  ///   single Instruction* through an intrinsic to be lowered later.
  /// Backends should override this method to produce target-specific intrinsic
  ///   for their fences.
  /// FIXME: Please note that the default implementation here in terms of
  ///   IR-level fences exists for historical/compatibility reasons and is
  ///   *unsound* ! Fences cannot, in general, be used to restore sequential
  ///   consistency. For example, consider the following example:
  /// atomic&lt;int&gt; x = y = 0;
  /// int r1, r2, r3, r4;
  /// Thread 0:
  ///   x.store(1);
  /// Thread 1:
  ///   y.store(1);
  /// Thread 2:
  ///   r1 = x.load();
  ///   r2 = y.load();
  /// Thread 3:
  ///   r3 = y.load();
  ///   r4 = x.load();
  ///  r1 = r3 = 1 and r2 = r4 = 0 is impossible as long as the accesses are all
  ///  seq_cst. But if they are lowered to monotonic accesses, no amount of
  ///  IR-level fences can prevent it.
  /// @{</doc>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='349' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand21bracketInstWithFencesEPN4llvm11InstructionENS1_14AtomicOrderingE'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1188' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand19expandAtomicCmpXchgEPN4llvm17AtomicCmpXchgInstE'/>
<use f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='1203' u='c' c='_ZN12_GLOBAL__N_112AtomicExpand19expandAtomicCmpXchgEPN4llvm17AtomicCmpXchgInstE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='14693' c='_ZNK4llvm17ARMTargetLowering16emitLeadingFenceERNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEEPNS_11InstructionENS_14AtomicOrderingE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='10008' c='_ZNK4llvm17PPCTargetLowering16emitLeadingFenceERNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEEPNS_11InstructionENS_14AtomicOrderingE'/>
