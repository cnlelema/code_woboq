<dec f='llvm/llvm/include/llvm/Transforms/Scalar/SROA.h' l='126' type='llvm::AllocaInst * llvm::SROA::rewritePartition(llvm::AllocaInst &amp; AI, sroa::AllocaSlices &amp; AS, sroa::Partition &amp; P)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='4094' ll='4233' type='llvm::AllocaInst * llvm::SROA::rewritePartition(llvm::AllocaInst &amp; AI, llvm::sroa::AllocaSlices &amp; AS, llvm::sroa::Partition &amp; P)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='4316' u='c' c='_ZN4llvm4SROA11splitAllocaERNS_10AllocaInstERNS_4sroa12AllocaSlicesE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='4084'>/// Rewrite an alloca partition&apos;s users.
///
/// This routine drives both of the rewriting goals of the SROA pass. It tries
/// to rewrite uses of an alloca partition to be conducive for SSA value
/// promotion. If the partition needs a new, more refined alloca, this will
/// build that new alloca, preserving as much type information as possible, and
/// rewrite the uses of the old alloca to point at the new one and have the
/// appropriate new offsets. It also evaluates how successful the rewrite was
/// at enabling promotion and if it was successful queues the alloca to be
/// promoted.</doc>
