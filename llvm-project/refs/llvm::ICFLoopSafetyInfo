<inh f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='47' c='llvm::LoopSafetyInfo'/>
<def f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='123' ll='165'/>
<size>208</size>
<doc f='llvm/llvm/include/llvm/Analysis/MustExecute.h' l='118'>/// This implementation of LoopSafetyInfo use ImplicitControlFlowTracking to
/// give precise answers on &quot;may throw&quot; queries. This implementation uses cache
/// that should be invalidated by calling the methods insertInstructionTo and
/// removeInstruction whenever we modify a basic block&apos;s contents by adding or
/// removing instructions.</doc>
<mbr r='llvm::ICFLoopSafetyInfo::MayThrow' o='320' t='bool'/>
<mbr r='llvm::ICFLoopSafetyInfo::ICF' o='384' t='llvm::ImplicitControlFlowTracking'/>
<mbr r='llvm::ICFLoopSafetyInfo::MW' o='1024' t='llvm::MemoryWriteTracking'/>
<fun r='_ZNK4llvm17ICFLoopSafetyInfo13blockMayThrowEPKNS_10BasicBlockE'/>
<fun r='_ZNK4llvm17ICFLoopSafetyInfo16anyBlockMayThrowEv'/>
<fun r='_ZN4llvm17ICFLoopSafetyInfo21computeLoopSafetyInfoEPKNS_4LoopE'/>
<fun r='_ZNK4llvm17ICFLoopSafetyInfo21isGuaranteedToExecuteERKNS_11InstructionEPKNS_13DominatorTreeEPKNS_4LoopE'/>
<fun r='_ZNK4llvm17ICFLoopSafetyInfo24doesNotWriteMemoryBeforeEPKNS_10BasicBlockEPKNS_4LoopE'/>
<fun r='_ZNK4llvm17ICFLoopSafetyInfo24doesNotWriteMemoryBeforeERKNS_11InstructionEPKNS_4LoopE'/>
<fun r='_ZN4llvm17ICFLoopSafetyInfo19insertInstructionToEPKNS_11InstructionEPKNS_10BasicBlockE'/>
<fun r='_ZN4llvm17ICFLoopSafetyInfo17removeInstructionEPKNS_11InstructionE'/>
<fun r='_ZN4llvm17ICFLoopSafetyInfoC1EPNS_13DominatorTreeE'/>
<fun r='_ZN4llvm17ICFLoopSafetyInfoD1Ev'/>
