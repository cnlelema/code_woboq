<dec f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='734' type='std::unique_ptr&lt;raw_pwrite_stream&gt; clang::CompilerInstance::createOutputFile(llvm::StringRef OutputPath, std::error_code &amp; Error, bool Binary, bool RemoveFileOnSignal, llvm::StringRef BaseInput, llvm::StringRef Extension, bool UseTemporary, bool CreateMissingDirectories, std::string * ResultPathName, std::string * TempPathName)'/>
<doc f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='708'>/// Create a new output file, optionally deriving the output path name.
  ///
  /// If \p OutputPath is empty, then createOutputFile will derive an output
  /// path location as \p BaseInput, with any suffix removed, and \p Extension
  /// appended. If \p OutputPath is not stdout and \p UseTemporary
  /// is true, createOutputFile will create a new temporary file that must be
  /// renamed to \p OutputPath in the end.
  ///
  /// \param OutputPath - If given, the path to the output file.
  /// \param Error [out] - On failure, the error.
  /// \param BaseInput - If \p OutputPath is empty, the input path name to use
  /// for deriving the output path.
  /// \param Extension - The extension to use for derived output names.
  /// \param Binary - The mode to open the file in.
  /// \param RemoveFileOnSignal - Whether the file should be registered with
  /// llvm::sys::RemoveFileOnSignal. Note that this is not safe for
  /// multithreaded use, as the underlying signal mechanism is not reentrant
  /// \param UseTemporary - Create a new temporary file that must be renamed to
  /// OutputPath in the end.
  /// \param CreateMissingDirectories - When \p UseTemporary is true, create
  /// missing directories in the output path.
  /// \param ResultPathName [out] - If given, the result path name will be
  /// stored here on success.
  /// \param TempPathName [out] - If given, the temporary file path name
  /// will be stored here on success.</doc>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='683' u='c' c='_ZN5clang16CompilerInstance16createOutputFileEN4llvm9StringRefEbbS2_S2_bb'/>
<def f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='700' ll='803' type='std::unique_ptr&lt;llvm::raw_pwrite_stream&gt; clang::CompilerInstance::createOutputFile(llvm::StringRef OutputPath, std::error_code &amp; Error, bool Binary, bool RemoveFileOnSignal, llvm::StringRef InFile, llvm::StringRef Extension, bool UseTemporary, bool CreateMissingDirectories, std::string * ResultPathName, std::string * TempPathName)'/>
