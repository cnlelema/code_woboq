<dec f='llvm/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h' l='131' type='void llvm::DeadArgumentEliminationPass::MarkValue(const llvm::DeadArgumentEliminationPass::RetOrArg &amp; RA, llvm::DeadArgumentEliminationPass::Liveness L, const UseVector &amp; MaybeLiveUses)'/>
<use f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='619' u='c' c='_ZN4llvm27DeadArgumentEliminationPass14SurveyFunctionERKNS_8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='651' u='c' c='_ZN4llvm27DeadArgumentEliminationPass14SurveyFunctionERKNS_8FunctionE'/>
<def f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='661' ll='674' type='void llvm::DeadArgumentEliminationPass::MarkValue(const llvm::DeadArgumentEliminationPass::RetOrArg &amp; RA, llvm::DeadArgumentEliminationPass::Liveness L, const UseVector &amp; MaybeLiveUses)'/>
<doc f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='657'>/// MarkValue - This function marks the liveness of RA depending on L. If L is
/// MaybeLive, it also takes all uses in MaybeLiveUses and records them in Uses,
/// such that RA will be marked live if any use in MaybeLiveUses gets marked
/// live later on.</doc>
