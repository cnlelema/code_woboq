<dec f='llvm/clang/include/clang/Basic/Diagnostic.h' l='297' type='clang::DiagnosticMapping &amp; clang::DiagnosticsEngine::DiagState::getOrAddMapping(diag::kind Diag)'/>
<use f='llvm/clang/lib/Basic/Diagnostic.cpp' l='354' u='c' c='_ZN5clang17DiagnosticsEngine11setSeverityEjNS_4diag8SeverityENS_14SourceLocationE'/>
<use f='llvm/clang/lib/Basic/Diagnostic.cpp' l='417' u='c' c='_ZN5clang17DiagnosticsEngine32setDiagnosticGroupWarningAsErrorEN4llvm9StringRefEb'/>
<use f='llvm/clang/lib/Basic/Diagnostic.cpp' l='448' u='c' c='_ZN5clang17DiagnosticsEngine30setDiagnosticGroupErrorAsFatalEN4llvm9StringRefEb'/>
<def f='llvm/clang/lib/Basic/DiagnosticIDs.cpp' l='212' ll='222' type='clang::DiagnosticMapping &amp; clang::DiagnosticsEngine::DiagState::getOrAddMapping(diag::kind Diag)'/>
<use f='llvm/clang/lib/Basic/DiagnosticIDs.cpp' l='431' u='c' c='_ZNK5clang13DiagnosticIDs21getDiagnosticSeverityEjNS_14SourceLocationERKNS_17DiagnosticsEngineE'/>
<doc f='llvm/clang/lib/Basic/DiagnosticIDs.cpp' l='209'>// Unfortunately, the split between DiagnosticIDs and Diagnostic is not
// particularly clean, but for now we just implement this method here so we can
// access GetDefaultDiagMapping.</doc>
<use f='llvm/clang/lib/Serialization/ASTReader.cpp' l='5796' u='c' c='_ZN5clang9ASTReader28ReadPragmaDiagnosticMappingsERNS_17DiagnosticsEngineE'/>
