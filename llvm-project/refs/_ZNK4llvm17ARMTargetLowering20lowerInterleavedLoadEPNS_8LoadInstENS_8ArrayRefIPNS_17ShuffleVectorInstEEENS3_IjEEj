<dec f='llvm/llvm/lib/Target/ARM/ARMISelLowering.h' l='534' type='bool llvm::ARMTargetLowering::lowerInterleavedLoad(llvm::LoadInst * LI, ArrayRef&lt;llvm::ShuffleVectorInst *&gt; Shuffles, ArrayRef&lt;unsigned int&gt; Indices, unsigned int Factor) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2448' c='_ZNK4llvm18TargetLoweringBase20lowerInterleavedLoadEPNS_8LoadInstENS_8ArrayRefIPNS_17ShuffleVectorInstEEENS3_IjEEj'/>
<def f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='14964' ll='15070' type='bool llvm::ARMTargetLowering::lowerInterleavedLoad(llvm::LoadInst * LI, ArrayRef&lt;llvm::ShuffleVectorInst *&gt; Shuffles, ArrayRef&lt;unsigned int&gt; Indices, unsigned int Factor) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='14953'>/// Lower an interleaved load into a vldN intrinsic.
///
/// E.g. Lower an interleaved load (Factor = 2):
///        %wide.vec = load &lt;8 x i32&gt;, &lt;8 x i32&gt;* %ptr, align 4
///        %v0 = shuffle %wide.vec, undef, &lt;0, 2, 4, 6&gt;  ; Extract even elements
///        %v1 = shuffle %wide.vec, undef, &lt;1, 3, 5, 7&gt;  ; Extract odd elements
///
///      Into:
///        %vld2 = { &lt;4 x i32&gt;, &lt;4 x i32&gt; } call llvm.arm.neon.vld2(%ptr, 4)
///        %vec0 = extractelement { &lt;4 x i32&gt;, &lt;4 x i32&gt; } %vld2, i32 0
///        %vec1 = extractelement { &lt;4 x i32&gt;, &lt;4 x i32&gt; } %vld2, i32 1</doc>
