<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2679' type='void clang::Parser::ParseFunctionDeclarator(clang::Declarator &amp; D, clang::ParsedAttributes &amp; attrs, clang::BalancedDelimiterTracker &amp; Tracker, bool IsAmbiguous, bool RequiresArg = false)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5975' u='c' c='_ZN5clang6Parser21ParseDirectDeclaratorERNS_10DeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6155' u='c' c='_ZN5clang6Parser20ParseParenDeclaratorERNS_10DeclaratorE'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6178' ll='6382' type='void clang::Parser::ParseFunctionDeclarator(clang::Declarator &amp; D, clang::ParsedAttributes &amp; FirstArgAttrs, clang::BalancedDelimiterTracker &amp; Tracker, bool IsAmbiguous, bool RequiresArg = false)'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6159'>/// ParseFunctionDeclarator - We are after the identifier and have parsed the
/// declarator D up to a paren, which indicates that we are parsing function
/// arguments.
///
/// If FirstArgAttrs is non-null, then the caller parsed those arguments
/// immediately after the open paren - they should be considered to be the
/// first argument of a parameter.
///
/// If RequiresArg is true, then the first argument of the function is required
/// to be present and required to not be an identifier list.
///
/// For C++, after the parameter-list, it also parses the cv-qualifier-seq[opt],
/// (C++11) ref-qualifier[opt], exception-specification[opt],
/// (C++11) attribute-specifier-seq[opt], and (C++11) trailing-return-type[opt].
///
/// [C++11] exception-specification:
///           dynamic-exception-specification
///           noexcept-specification
///</doc>
