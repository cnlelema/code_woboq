<dec f='llvm/clang/include/clang/Tooling/Inclusions/IncludeStyle.h' l='98' type='std::vector&lt;IncludeCategory&gt;'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='1943' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<use f='llvm/clang/include/clang/Format/Format.h' l='1943' u='r' c='_ZNK5clang6format11FormatStyleeqERKS1_'/>
<offset>64</offset>
<doc f='llvm/clang/include/clang/Tooling/Inclusions/IncludeStyle.h' l='66'>/// Regular expressions denoting the different ``#include`` categories
  /// used for ordering ``#includes``.
  ///
  /// `POSIX extended
  /// &lt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html&gt;`_
  /// regular expressions are supported.
  ///
  /// These regular expressions are matched against the filename of an include
  /// (including the &lt;&gt; or &quot;&quot;) in order. The value belonging to the first
  /// matching regular expression is assigned and ``#includes`` are sorted first
  /// according to increasing category number and then alphabetically within
  /// each category.
  ///
  /// If none of the regular expressions match, INT_MAX is assigned as
  /// category. The main header for a source file automatically gets category 0.
  /// so that it is generally kept at the beginning of the ``#includes``
  /// (https://llvm.org/docs/CodingStandards.html#include-style). However, you
  /// can also assign negative priorities if you have certain headers that
  /// always need to be first.
  ///
  /// To configure this in the .clang-format file, use:
  /// \code{.yaml}
  ///   IncludeCategories:
  ///     - Regex:           &apos;^&quot;(llvm|llvm-c|clang|clang-c)/&apos;
  ///       Priority:        2
  ///     - Regex:           &apos;^(&lt;|&quot;(gtest|gmock|isl|json)/)&apos;
  ///       Priority:        3
  ///     - Regex:           &apos;&lt;[[:alnum:].]+&gt;&apos;
  ///       Priority:        4
  ///     - Regex:           &apos;.*&apos;
  ///       Priority:        1
  /// \endcode</doc>
<use f='llvm/clang/lib/Format/Format.cpp' l='442' u='a' c='_ZN4llvm4yaml13MappingTraitsIN5clang6format11FormatStyleEE7mappingERNS0_2IOERS4_'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='707' u='w' c='_ZN5clang6format12getLLVMStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='790' u='w' c='_ZN5clang6format14getGoogleStyleENS0_11FormatStyle12LanguageKindE'/>
<use f='llvm/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp' l='181' c='_ZN5clang7tooling22IncludeCategoryManagerC1ERKNS0_12IncludeStyleEN4llvm9StringRefE'/>
<use f='llvm/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp' l='194' u='m' c='_ZNK5clang7tooling22IncludeCategoryManager18getIncludePriorityEN4llvm9StringRefEb'/>
<use f='llvm/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp' l='230' c='_ZN5clang7tooling14HeaderIncludesC1EN4llvm9StringRefES3_RKNS0_12IncludeStyleE'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='11817' u='m' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='11825' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/FormatTest.cpp' l='11825' u='r' c='_ZN5clang6format12_GLOBAL__N_135FormatTest_ParsesConfiguration_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/SortIncludesTest.cpp' l='451' u='w' c='_ZN5clang6format12_GLOBAL__N_140SortIncludesTest_NegativePriorities_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Format/SortIncludesTest.cpp' l='471' u='w' c='_ZN5clang6format12_GLOBAL__N_163SortIncludesTest_PriorityGroupsAreSeparatedWhenRegroupping_Test8TestBodyEv'/>
