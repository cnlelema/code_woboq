<dec f='llvm/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.h' l='72' type='bool llvm::HexagonHazardRecognizer::ShouldPreferAnother(llvm::SUnit * )'/>
<inh f='llvm/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h' l='95' c='_ZN4llvm24ScheduleHazardRecognizer19ShouldPreferAnotherEPNS_5SUnitE'/>
<def f='llvm/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.cpp' l='100' ll='106' type='bool llvm::HexagonHazardRecognizer::ShouldPreferAnother(llvm::SUnit * SU)'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.cpp' l='90'>/// Handle the cases when we prefer one instruction over another. Case 1 - we
/// prefer not to generate multiple loads in the packet to avoid a potential
/// bank conflict. Case 2 - if a packet contains a dot cur instruction, then we
/// prefer the instruction that can use the dot cur result. However, if the use
/// is not scheduled in the same packet, then prefer other instructions in the
/// subsequent packet. Case 3 - we prefer a vector store that can be converted
/// to a .new store. The packetizer will not generate the .new store if the
/// store doesn&apos;t have resources to fit in the packet (but the .new store may
/// have resources). We attempt to schedule the store as soon as possible to
/// help packetize the two instructions together.</doc>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonHazardRecognizer.h' l='69'>/// This callback may be invoked if getHazardType returns NoHazard. If, even
  /// though there is no hazard, it would be better to schedule another
  /// available instruction, this callback should return true.</doc>
