<dec f='llvm/llvm/include/llvm/LTO/LTO.h' l='48' type='void llvm::thinLTOResolvePrevailingInIndex(llvm::ModuleSummaryIndex &amp; Index, function_ref&lt;bool (GlobalValue::GUID, const llvm::GlobalValueSummary *)&gt; isPrevailing, function_ref&lt;void (llvm::StringRef, GlobalValue::GUID, GlobalValue::LinkageTypes)&gt; recordNewLinkage, const DenseSet&lt;GlobalValue::GUID&gt; &amp; GUIDPreservedSymbols)'/>
<doc f='llvm/llvm/include/llvm/LTO/LTO.h' l='42'>/// Resolve linkage for prevailing symbols in the \p Index. Linkage changes
/// recorded in the index and the ThinLTO backends must apply the changes to
/// the module via thinLTOResolvePrevailingInModule.
///
/// This is done for correctness (if value exported, ensure we always
/// emit a copy), and compile-time optimization (allow drop of duplicates).</doc>
<def f='llvm/llvm/lib/LTO/LTO.cpp' l='352' ll='372' type='void llvm::thinLTOResolvePrevailingInIndex(llvm::ModuleSummaryIndex &amp; Index, function_ref&lt;bool (GlobalValue::GUID, const llvm::GlobalValueSummary *)&gt; isPrevailing, function_ref&lt;void (llvm::StringRef, GlobalValue::GUID, GlobalValue::LinkageTypes)&gt; recordNewLinkage, const DenseSet&lt;GlobalValue::GUID&gt; &amp; GUIDPreservedSymbols)'/>
<use f='llvm/llvm/lib/LTO/LTO.cpp' l='1319' u='c' c='_ZN4llvm3lto3LTO10runThinLTOESt8functionIFSt10unique_ptrINS0_18NativeObjectStreamESt14default_deleteIS4_EEjEES2_IFS9_jNS_9StringRefEEERKNS_8DenseSetIm13847797'/>
<doc f='llvm/llvm/lib/LTO/LTO.cpp' l='346'>/// Resolve linkage for prevailing symbols in the \p Index.
//
// We&apos;d like to drop these functions if they are no longer referenced in the
// current module. However there is a chance that another module is still
// referencing them because of the import. We make sure we always emit at least
// one copy.</doc>
<use f='llvm/llvm/lib/LTO/ThinLTOCodeGenerator.cpp' l='480' u='c' c='_ZN12_GLOBAL__N_1L24resolvePrevailingInIndexERN4llvm18ModuleSummaryIndexERNS0_9StringMapISt3mapImNS0_11GlobalValue12LinkageTypesESt4lessImESaISt4pairI4301434'/>
