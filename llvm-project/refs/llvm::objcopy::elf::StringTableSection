<inh f='llvm/llvm/tools/llvm-objcopy/ELF/Object.h' l='382' c='llvm::objcopy::elf::SectionBase'/>
<def f='llvm/llvm/tools/llvm-objcopy/ELF/Object.h' l='563' ll='584'/>
<size>224</size>
<doc f='llvm/llvm/tools/llvm-objcopy/ELF/Object.h' l='555'>// There are two types of string tables that can exist, dynamic and not dynamic.
// In the dynamic case the string table is allocated. Changing a dynamic string
// table would mean altering virtual addresses and thus the memory image. So
// dynamic string tables should not have an interface to modify them or
// reconstruct them. This type lets us reconstruct a string table. To avoid
// this class being used for dynamic string tables (which has happened) the
// classof method checks that the particular instance is not allocated. This
// then agrees with the makeSection method used to construct most sections.</doc>
<mbr r='llvm::objcopy::elf::StringTableSection::StrTabBuilder' o='1344' t='llvm::StringTableBuilder'/>
<fun r='_ZN4llvm7objcopy3elf18StringTableSectionC1Ev'/>
<fun r='_ZN4llvm7objcopy3elf18StringTableSection9addStringENS_9StringRefE'/>
<fun r='_ZNK4llvm7objcopy3elf18StringTableSection9findIndexENS_9StringRefE'/>
<fun r='_ZN4llvm7objcopy3elf18StringTableSection16prepareForLayoutEv'/>
<fun r='_ZNK4llvm7objcopy3elf18StringTableSection6acceptERNS1_14SectionVisitorE'/>
<fun r='_ZN4llvm7objcopy3elf18StringTableSection6acceptERNS1_21MutableSectionVisitorE'/>
<fun r='_ZN4llvm7objcopy3elf18StringTableSection7classofEPKNS1_11SectionBaseE'/>
