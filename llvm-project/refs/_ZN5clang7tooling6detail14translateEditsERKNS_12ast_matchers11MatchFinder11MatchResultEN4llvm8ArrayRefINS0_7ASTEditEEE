<dec f='llvm/clang/include/clang/Tooling/Refactoring/Transformer.h' l='250' type='Expected&lt;SmallVector&lt;clang::tooling::detail::Transformation, 1&gt; &gt; clang::tooling::detail::translateEdits(const ast_matchers::MatchFinder::MatchResult &amp; Result, llvm::ArrayRef&lt;ASTEdit&gt; Edits)'/>
<def f='llvm/clang/lib/Tooling/Refactoring/Transformer.cpp' l='70' ll='90' type='Expected&lt;SmallVector&lt;tooling::detail::Transformation, 1&gt; &gt; clang::tooling::detail::translateEdits(const MatchResult &amp; Result, llvm::ArrayRef&lt;ASTEdit&gt; Edits)'/>
<use f='llvm/clang/lib/Tooling/Refactoring/Transformer.cpp' l='220' u='c' c='_ZN5clang7tooling11Transformer3runERKNS_12ast_matchers11MatchFinder11MatchResultE'/>
<doc f='llvm/clang/include/clang/Tooling/Refactoring/Transformer.h' l='238'>/// Attempts to translate `Edits`, which are in terms of AST nodes bound in the
/// match `Result`, into Transformations, which are in terms of the source code
/// text.
///
/// Returns an empty vector if any of the edits apply to portions of the source
/// that are ineligible for rewriting (certain interactions with macros, for
/// example).  Fails if any invariants are violated relating to bound nodes in
/// the match.  However, it does not fail in the case of conflicting edits --
/// conflict handling is left to clients.  We recommend use of the \c
/// AtomicChange or \c Replacements classes for assistance in detecting such
/// conflicts.</doc>
