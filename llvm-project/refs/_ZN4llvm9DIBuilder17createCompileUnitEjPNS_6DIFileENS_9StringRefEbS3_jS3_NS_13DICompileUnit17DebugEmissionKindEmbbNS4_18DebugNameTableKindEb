<dec f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='139' type='llvm::DICompileUnit * llvm::DIBuilder::createCompileUnit(unsigned int Lang, llvm::DIFile * File, llvm::StringRef Producer, bool isOptimized, llvm::StringRef Flags, unsigned int RV, llvm::StringRef SplitName = llvm::StringRef(), DICompileUnit::DebugEmissionKind Kind = DICompileUnit::DebugEmissionKind::FullDebug, uint64_t DWOId = 0, bool SplitDebugInlining = true, bool DebugInfoForProfiling = false, DICompileUnit::DebugNameTableKind NameTableKind = DICompileUnit::DebugNameTableKind::Default, bool RangesBaseAddress = false)'/>
<doc f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='114'>/// A CompileUnit provides an anchor for all debugging
    /// information generated during this instance of compilation.
    /// \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
    /// \param File          File info.
    /// \param Producer      Identify the producer of debugging information
    ///                      and code.  Usually this is a compiler
    ///                      version string.
    /// \param isOptimized   A boolean flag which indicates whether optimization
    ///                      is enabled or not.
    /// \param Flags         This string lists command line options. This
    ///                      string is directly embedded in debug info
    ///                      output which may be used by a tool
    ///                      analyzing generated debugging information.
    /// \param RV            This indicates runtime version for languages like
    ///                      Objective-C.
    /// \param SplitName     The name of the file that we&apos;ll split debug info
    ///                      out into.
    /// \param Kind          The kind of debug information to generate.
    /// \param DWOId         The DWOId if this is a split skeleton compile unit.
    /// \param SplitDebugInlining    Whether to emit inline debug info.
    /// \param DebugInfoForProfiling Whether to emit extra debug info for
    ///                              profile collection.
    /// \param NameTableKind  Whether to emit .debug_gnu_pubnames,
    ///                      .debug_pubnames, or no pubnames at all.</doc>
<use f='llvm/clang/lib/CodeGen/CGDebugInfo.cpp' l='613' u='c' c='_ZN5clang7CodeGen11CGDebugInfo17CreateCompileUnitEv'/>
<use f='llvm/clang/lib/CodeGen/CGDebugInfo.cpp' l='2406' u='c' c='_ZN5clang7CodeGen11CGDebugInfo20getOrCreateModuleRefENS_17ExternalASTSource19ASTSourceDescriptorEb'/>
<def f='llvm/llvm/lib/IR/DIBuilder.cpp' l='137' ll='160' type='llvm::DICompileUnit * llvm::DIBuilder::createCompileUnit(unsigned int Lang, llvm::DIFile * File, llvm::StringRef Producer, bool isOptimized, llvm::StringRef Flags, unsigned int RunTimeVer, llvm::StringRef SplitName = llvm::StringRef(), DICompileUnit::DebugEmissionKind Kind = DICompileUnit::DebugEmissionKind::FullDebug, uint64_t DWOId = 0, bool SplitDebugInlining = true, bool DebugInfoForProfiling = false, DICompileUnit::DebugNameTableKind NameTableKind = DICompileUnit::DebugNameTableKind::Default, bool RangesBaseAddress = false)'/>
<use f='llvm/llvm/lib/IR/DebugInfo.cpp' l='763' u='c' c='LLVMDIBuilderCreateCompileUnit'/>
<use f='llvm/llvm/tools/opt/Debugify.cpp' l='89' u='c' c='_ZN12_GLOBAL__N_121applyDebugifyMetadataERN4llvm6ModuleENS0_14iterator_rangeINS0_14ilist_iteratorINS0_12ilist_detail12node_optionsINS0_8FunctionELb1EL243265'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='503' u='c' c='_ZN12_GLOBAL__N_133IRBuilderTest_createFunction_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='523' u='c' c='_ZN12_GLOBAL__N_128IRBuilderTest_DIBuilder_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='545' u='c' c='_ZN12_GLOBAL__N_145IRBuilderTest_createArtificialSubprogram_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='634' u='c' c='_ZN12_GLOBAL__N_127IRBuilderTest_DebugLoc_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='667' u='c' c='_ZN12_GLOBAL__N_135IRBuilderTest_DIImportedEntity_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/IRBuilderTest.cpp' l='690' u='c' c='_ZN12_GLOBAL__N_133IRBuilderTest_DIBuilderMacro_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/VerifierTest.cpp' l='155' u='c' c='_ZN4llvm12_GLOBAL__N_140VerifierTest_DetectInvalidDebugInfo_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/VerifierTest.cpp' l='170' u='c' c='_ZN4llvm12_GLOBAL__N_140VerifierTest_DetectInvalidDebugInfo_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CloningTest.cpp' l='388' u='c' c='_ZN12_GLOBAL__N_19CloneFunc26CreateOldFunctionBodyAndDIEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CloningTest.cpp' l='441' u='c' c='_ZN12_GLOBAL__N_19CloneFunc26CreateOldFunctionBodyAndDIEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/CloningTest.cpp' l='603' u='c' c='_ZN12_GLOBAL__N_111CloneModule15CreateOldModuleEv'/>
