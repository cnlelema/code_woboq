<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='372' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/IR/Verifier.h' l='136' ll='144'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/IR/Verifier.h' l='126'>/// Create a verifier pass.
///
/// Check a module or function for validity. This is essentially a pass wrapped
/// around the above verifyFunction and verifyModule routines and
/// functionality. When the pass detects a verification error it is always
/// printed to stderr, and by default they are fatal. You can override that by
/// passing \c false to \p FatalErrors.
///
/// Note that this creates a pass suitable for the legacy pass manager. It has
/// nothing to do with \c VerifierPass.</doc>
<mbr r='llvm::VerifierPass::FatalErrors' o='0' t='bool'/>
<fun r='_ZN4llvm12VerifierPassC1Eb'/>
<fun r='_ZN4llvm12VerifierPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<fun r='_ZN4llvm12VerifierPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
