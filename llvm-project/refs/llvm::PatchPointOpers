<def f='llvm/llvm/include/llvm/CodeGen/StackMaps.h' l='76' ll='141'/>
<size>16</size>
<doc f='llvm/llvm/include/llvm/CodeGen/StackMaps.h' l='62'>/// MI-level patchpoint operands.
///
/// MI patchpoint operations take the form:
/// [&lt;def&gt;], &lt;id&gt;, &lt;numBytes&gt;, &lt;target&gt;, &lt;numArgs&gt;, &lt;cc&gt;, ...
///
/// IR patchpoint intrinsics do not have the &lt;cc&gt; operand because calling
/// convention is part of the subclass data.
///
/// SD patchpoint nodes do not have a def operand because it is part of the
/// SDValue.
///
/// Patchpoints following the anyregcc convention are handled specially. For
/// these, the stack map also records the location of the return value and
/// arguments.</doc>
<mbr r='llvm::PatchPointOpers::MI' o='0' t='const llvm::MachineInstr *'/>
<mbr r='llvm::PatchPointOpers::HasDef' o='64' t='bool'/>
<fun r='_ZNK4llvm15PatchPointOpers10getMetaIdxEj'/>
<fun r='_ZNK4llvm15PatchPointOpers11getMetaOperEj'/>
<fun r='_ZN4llvm15PatchPointOpersC1EPKNS_12MachineInstrE'/>
<fun r='_ZNK4llvm15PatchPointOpers8isAnyRegEv'/>
<fun r='_ZNK4llvm15PatchPointOpers6hasDefEv'/>
<fun r='_ZNK4llvm15PatchPointOpers5getIDEv'/>
<fun r='_ZNK4llvm15PatchPointOpers16getNumPatchBytesEv'/>
<fun r='_ZNK4llvm15PatchPointOpers13getCallTargetEv'/>
<fun r='_ZNK4llvm15PatchPointOpers14getCallingConvEv'/>
<fun r='_ZNK4llvm15PatchPointOpers9getArgIdxEv'/>
<fun r='_ZNK4llvm15PatchPointOpers14getNumCallArgsEv'/>
<fun r='_ZNK4llvm15PatchPointOpers9getVarIdxEv'/>
<fun r='_ZNK4llvm15PatchPointOpers19getStackMapStartIdxEv'/>
<fun r='_ZNK4llvm15PatchPointOpers17getNextScratchIdxEj'/>
