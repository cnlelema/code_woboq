<dec f='llvm/clang/lib/CodeGen/CGValue.h' l='480' type='bool'/>
<use f='llvm/clang/lib/CodeGen/CGValue.h' l='541' u='w' c='_ZN5clang7CodeGen12AggValueSlot7forAddrENS0_7AddressENS_10QualifiersENS1_14IsDestructed_tENS1_17NeedsGCBarriers_tENS1_11IsAliased_tENS1_9Overlap_tENS115768295'/>
<use f='llvm/clang/lib/CodeGen/CGValue.h' l='603' u='r' c='_ZNK5clang7CodeGen12AggValueSlot20isPotentiallyAliasedEv'/>
<offset>131</offset>
<doc f='llvm/clang/lib/CodeGen/CGValue.h' l='468'>/// AliasedFlag - This is set to true if the slot might be aliased
  /// and it&apos;s not undefined behavior to access it through such an
  /// alias.  Note that it&apos;s always undefined behavior to access a C++
  /// object that&apos;s under construction through an alias derived from
  /// outside the construction process.
  ///
  /// This flag controls whether calls that produce the aggregate
  /// value may be evaluated directly into the slot, or whether they
  /// must be evaluated into an unaliased temporary and then memcpy&apos;ed
  /// over.  Since it&apos;s invalid in general to memcpy a non-POD C++
  /// object, it&apos;s important that this flag never be set when
  /// evaluating an expression which constructs such an object.</doc>
