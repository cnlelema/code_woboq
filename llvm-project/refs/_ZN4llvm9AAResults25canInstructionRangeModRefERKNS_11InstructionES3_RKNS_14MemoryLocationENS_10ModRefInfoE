<dec f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='681' type='bool llvm::AAResults::canInstructionRangeModRef(const llvm::Instruction &amp; I1, const llvm::Instruction &amp; I2, const llvm::MemoryLocation &amp; Loc, const llvm::ModRefInfo Mode)'/>
<use f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='689' u='c' c='_ZN4llvm9AAResults25canInstructionRangeModRefERKNS_11InstructionES3_PKNS_5ValueENS_12LocationSizeENS_10ModRefInfoE'/>
<doc f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='676'>/// Check if it is possible for the execution of the specified instructions
  /// to mod\ref (according to the mode) the location Loc.
  ///
  /// The instructions to consider are all of the instructions in the range of
  /// [I1,I2] INCLUSIVE. I1 and I2 must be in the same basic block.</doc>
<use f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='702' u='c' c='_ZN4llvm9AAResults19canBasicBlockModifyERKNS_10BasicBlockERKNS_14MemoryLocationE'/>
<def f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='710' ll='724' type='bool llvm::AAResults::canInstructionRangeModRef(const llvm::Instruction &amp; I1, const llvm::Instruction &amp; I2, const llvm::MemoryLocation &amp; Loc, const llvm::ModRefInfo Mode)'/>
<doc f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='705'>/// canInstructionRangeModRef - Return true if it is possible for the
/// execution of the specified instructions to mod\ref (according to the
/// mode) the location Loc. The instructions to consider are all
/// of the instructions in the range of [I1,I2] INCLUSIVE.
/// I1 and I2 must be in the same basic block.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/ArgumentPromotion.cpp' l='723' u='c' c='_ZL23isSafeToPromoteArgumentPN4llvm8ArgumentEbRNS_9AAResultsEj'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp' l='172' u='c' c='_ZN12_GLOBAL__N_121MergedLoadStoreMotion25isStoreSinkBarrierInRangeERKN4llvm11InstructionES4_NS1_14MemoryLocationE'/>
