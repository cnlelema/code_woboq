<dec f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='376' type='bool'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='385' u='w' c='_ZN4llvm11SDNodeFlagsC1Ev'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='450' u='w' c='_ZN4llvm11SDNodeFlags11setFPExceptEb'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='465' u='r' c='_ZNK4llvm11SDNodeFlags11hasFPExceptEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='468' u='r' c='_ZNK4llvm11SDNodeFlags6isFastEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='488' u='w' c='_ZN4llvm11SDNodeFlags13intersectWithES0_'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='488' u='r' c='_ZN4llvm11SDNodeFlags13intersectWithES0_'/>
<offset>12</offset>
<doc f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='371'>// We assume instructions do not raise floating-point exceptions by default,
  // and only those marked explicitly may do so.  We could choose to represent
  // this via a positive &quot;FPExcept&quot; flags like on the MI level, but having a
  // negative &quot;NoFPExcept&quot; flag here (that defaults to true) makes the flag
  // intersection logic more straightforward.</doc>
