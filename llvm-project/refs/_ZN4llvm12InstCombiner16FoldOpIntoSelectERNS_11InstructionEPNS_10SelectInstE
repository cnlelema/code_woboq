<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='815' type='llvm::Instruction * llvm::InstCombiner::FoldOpIntoSelect(llvm::Instruction &amp; Op, llvm::SelectInst * SI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1604' u='c' c='_ZN4llvm12InstCombiner8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1926' u='c' c='_ZN4llvm12InstCombiner9visitFSubERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='811'>/// Given an instruction with a select as one operand and a constant as the
  /// other operand, try to fold the binary operator into the select arguments.
  /// This also works for Cast instructions, which obviously do not have a
  /// second operand.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='284' u='c' c='_ZN4llvm12InstCombiner20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1178' u='c' c='_ZN4llvm12InstCombiner9visitFDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1183' u='c' c='_ZN4llvm12InstCombiner9visitFDivERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1268' u='c' c='_ZN4llvm12InstCombiner20commonIRemTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='34' u='c' c='_ZN4llvm12InstCombiner21commonShiftTransformsERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='819' ll='867' type='llvm::Instruction * llvm::InstCombiner::FoldOpIntoSelect(llvm::Instruction &amp; Op, llvm::SelectInst * SI)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1041' u='c' c='_ZN4llvm12InstCombiner24foldBinOpIntoSelectOrPhiERNS_14BinaryOperatorE'/>
