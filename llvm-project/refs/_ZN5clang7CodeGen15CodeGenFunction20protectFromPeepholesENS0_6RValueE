<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='1122' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22OpaqueValueMappingData4bindERS1_PKNS_15OpaqueValueExprERKNS0_6RValueE'/>
<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2831' type='clang::CodeGen::CodeGenFunction::PeepholeProtection clang::CodeGen::CodeGenFunction::protectFromPeepholes(clang::CodeGen::RValue rvalue)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2822'>/// protectFromPeepholes - Protect a value that we&apos;re intending to
  /// store to the side, but which will probably be used later, from
  /// aggressive peepholing optimizations that might delete it.
  ///
  /// Pass the result to unprotectFromPeepholes to declare that
  /// protection is no longer required.
  ///
  /// There&apos;s no particular reason why this shouldn&apos;t apply to
  /// l-values, it&apos;s just that no existing peepholes work on pointers.</doc>
<def f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='2048' ll='2066' type='CodeGenFunction::PeepholeProtection clang::CodeGen::CodeGenFunction::protectFromPeepholes(clang::CodeGen::RValue rvalue)'/>
