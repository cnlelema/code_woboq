<dec f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='1875' type='llvm::Function * clang::CodeGen::CGOpenMPSIMDRuntime::emitThreadPrivateVarDefinition(const clang::VarDecl * VD, clang::CodeGen::Address VDAddr, clang::SourceLocation Loc, bool PerformInit, clang::CodeGen::CodeGenFunction * CGF = nullptr)'/>
<doc f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='1866'>/// Emit a code for initialization of threadprivate variable. It emits
  /// a call to runtime library which adds initial value to the newly created
  /// threadprivate variable (if it is not constant) and registers destructor
  /// for the variable (if any).
  /// \param VD Threadprivate variable.
  /// \param VDAddr Address of the global variable \a VD.
  /// \param Loc Location of threadprivate declaration.
  /// \param PerformInit true if initialization expression is not constant.</doc>
<inh f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='2607' c='_ZN5clang7CodeGen15CGOpenMPRuntime30emitThreadPrivateVarDefinitionEPKNS_7VarDeclENS0_7AddressENS_14SourceLocationEbPNS0_15CodeGenFunctionE'/>
<def f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='10604' ll='10608' type='llvm::Function * clang::CodeGen::CGOpenMPSIMDRuntime::emitThreadPrivateVarDefinition(const clang::VarDecl * VD, clang::CodeGen::Address VDAddr, clang::SourceLocation Loc, bool PerformInit, clang::CodeGen::CodeGenFunction * CGF = nullptr)'/>
