<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1881' type='bool llvm::ScalarEvolution::matchURem(const llvm::SCEV * Expr, const llvm::SCEV *&amp; LHS, const llvm::SCEV *&amp; RHS)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1879'>/// Try to match the pattern generated by getURemExpr(A, B). If successful,
  /// Assign A and B to LHS and RHS, respectively.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='1848' u='c' c='_ZN4llvm15ScalarEvolution17getZeroExtendExprEPKNS_4SCEVEPNS_4TypeEj'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='12422' ll='12456' type='bool llvm::ScalarEvolution::matchURem(const llvm::SCEV * Expr, const llvm::SCEV *&amp; LHS, const llvm::SCEV *&amp; RHS)'/>
<doc f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='12418'>// Match the mathematical pattern A - (A / B) * B, where A and B can be
// arbitrary expressions.
// It&apos;s not always easy, as A and B can be folded (imagine A is X / 2, and B is
// 4, A / B becomes X / 8).</doc>
