<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3006' type='bool clang::Parser::ParseTemplateIdAfterTemplateName(bool ConsumeLastToken, clang::SourceLocation &amp; LAngleLoc, TemplateArgList &amp; TemplateArgs, clang::SourceLocation &amp; RAngleLoc)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='2746' u='c' c='_ZN5clang6Parser16ParseImplicitIntERNS_8DeclSpecEPNS_12CXXScopeSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextERNS0_25Parse1090808'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1179' u='c' c='_ZN5clang6Parser22ParseBaseTypeSpecifierERNS_14SourceLocationES2_'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1604' u='c' c='_ZN5clang6Parser19ParseClassSpecifierENS_3tok9TokenKindENS_14SourceLocationERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierEbNS0_15DeclS11386427'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2293' u='c' c='_ZN5clang6Parser28ParseUnqualifiedIdTemplateIdERNS_12CXXScopeSpecENS_14SourceLocationEPNS_14IdentifierInfoES3_bNS_9OpaquePtrINS_8QualTypeEEERNS_13UnqualifiedIdEb'/>
<def f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='941' ll='972' type='bool clang::Parser::ParseTemplateIdAfterTemplateName(bool ConsumeLastToken, clang::SourceLocation &amp; LAngleLoc, TemplateArgList &amp; TemplateArgs, clang::SourceLocation &amp; RAngleLoc)'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1026' u='c' c='_ZN5clang6Parser23AnnotateTemplateIdTokenENS_9OpaquePtrINS_12TemplateNameEEENS_16TemplateNameKindERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEb'/>
<doc f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='930'>/// Parses a template-id that after the template name has
/// already been parsed.
///
/// This routine takes care of parsing the enclosed template argument
/// list (&apos;&lt;&apos; template-parameter-list [opt] &apos;&gt;&apos;) and placing the
/// results into a form that can be transferred to semantic analysis.
///
/// \param ConsumeLastToken if true, then we will consume the last
/// token that forms the template-id. Otherwise, we will leave the
/// last token in the stream (e.g., so that it can be replaced with an
/// annotation token).</doc>
