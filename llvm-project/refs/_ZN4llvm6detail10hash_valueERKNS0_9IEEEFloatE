<dec f='llvm/llvm/include/llvm/ADT/APFloat.h' l='385' type='llvm::hash_code llvm::detail::hash_value(const llvm::detail::IEEEFloat &amp; Arg)'/>
<dec f='llvm/llvm/include/llvm/ADT/APFloat.h' l='564' type='llvm::hash_code llvm::detail::hash_value(const llvm::detail::IEEEFloat &amp; Arg)'/>
<doc f='llvm/llvm/include/llvm/ADT/APFloat.h' l='376'>/// Overload to compute a hash code for an APFloat value.
  ///
  /// Note that the use of hash codes for floating point values is in general
  /// frought with peril. Equality is hard to define for these values. For
  /// example, should negative and positive zero hash to different codes? Are
  /// they equal or not? This hash value implementation specifically
  /// emphasizes producing different codes for different inputs in order to
  /// be used in canonicalization and memoization. As such, equality is
  /// bitwiseIsEqual, and 0 != -0.</doc>
<def f='llvm/llvm/lib/Support/APFloat.cpp' l='2775' ll='2788' type='llvm::hash_code llvm::detail::hash_value(const llvm::detail::IEEEFloat &amp; Arg)'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='4436' u='c' c='_ZN4llvm10hash_valueERKNS_7APFloatE'/>
