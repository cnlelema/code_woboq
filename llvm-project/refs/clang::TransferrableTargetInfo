<def f='llvm/clang/include/clang/Basic/TargetInfo.h' l='54' ll='159'/>
<ovr f='llvm/clang/include/clang/Basic/TargetInfo.h' l='163' c='clang::TargetInfo'/>
<size>152</size>
<doc f='llvm/clang/include/clang/Basic/TargetInfo.h' l='51'>/// Fields controlling how types are laid out in memory; these may need to
/// be copied for targets like AMDGPU that base their ABIs on an auxiliary
/// CPU target.</doc>
<mbr r='clang::TransferrableTargetInfo::PointerWidth' o='0' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::PointerAlign' o='16' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::BoolWidth' o='32' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::BoolAlign' o='40' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::IntWidth' o='48' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::IntAlign' o='56' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::HalfWidth' o='64' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::HalfAlign' o='72' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::FloatWidth' o='80' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::FloatAlign' o='88' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::DoubleWidth' o='96' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::DoubleAlign' o='104' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongDoubleWidth' o='112' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongDoubleAlign' o='120' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::Float128Align' o='128' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LargeArrayMinWidth' o='136' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LargeArrayAlign' o='144' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongWidth' o='152' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongAlign' o='160' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongLongWidth' o='168' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongLongAlign' o='176' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::ShortAccumWidth' o='184' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::ShortAccumAlign' o='192' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::AccumWidth' o='200' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::AccumAlign' o='208' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongAccumWidth' o='216' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongAccumAlign' o='224' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::ShortFractWidth' o='232' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::ShortFractAlign' o='240' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::FractWidth' o='248' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::FractAlign' o='256' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongFractWidth' o='264' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongFractAlign' o='272' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::PaddingOnUnsignedFixedPoint' o='280' t='bool'/>
<mbr r='clang::TransferrableTargetInfo::ShortAccumScale' o='288' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::AccumScale' o='296' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::LongAccumScale' o='304' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::SuitableAlign' o='320' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::DefaultAlignForAttributeAligned' o='336' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::MinGlobalAlign' o='352' t='unsigned char'/>
<mbr r='clang::TransferrableTargetInfo::NewAlign' o='368' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::MaxVectorAlign' o='384' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::MaxTLSAlign' o='400' t='unsigned short'/>
<mbr r='clang::TransferrableTargetInfo::HalfFormat' o='448' t='const llvm::fltSemantics *'/>
<mbr r='clang::TransferrableTargetInfo::FloatFormat' o='512' t='const llvm::fltSemantics *'/>
<mbr r='clang::TransferrableTargetInfo::DoubleFormat' o='576' t='const llvm::fltSemantics *'/>
<mbr r='clang::TransferrableTargetInfo::LongDoubleFormat' o='640' t='const llvm::fltSemantics *'/>
<mbr r='clang::TransferrableTargetInfo::Float128Format' o='704' t='const llvm::fltSemantics *'/>
<mbr r='clang::TransferrableTargetInfo::SizeType' o='768' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::IntMaxType' o='800' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::PtrDiffType' o='832' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::IntPtrType' o='864' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::WCharType' o='896' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::WIntType' o='928' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::Char16Type' o='960' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::Char32Type' o='992' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::Int64Type' o='1024' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::SigAtomicType' o='1056' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::ProcessIDType' o='1088' t='clang::TransferrableTargetInfo::IntType'/>
<mbr r='clang::TransferrableTargetInfo::UseSignedCharForObjCBool' o='1120' t='unsigned int'/>
<mbr r='clang::TransferrableTargetInfo::UseBitFieldTypeAlignment' o='1121' t='unsigned int'/>
<mbr r='clang::TransferrableTargetInfo::UseZeroLengthBitfieldAlignment' o='1122' t='unsigned int'/>
<mbr r='clang::TransferrableTargetInfo::UseExplicitBitFieldAlignment' o='1123' t='unsigned int'/>
<mbr r='clang::TransferrableTargetInfo::ZeroLengthBitfieldBoundary' o='1152' t='unsigned int'/>
