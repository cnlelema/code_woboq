<dec f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.h' l='93' type='int llvm::SystemZTTIImpl::getInterleavedMemoryOpCost(unsigned int Opcode, llvm::Type * VecTy, unsigned int Factor, ArrayRef&lt;unsigned int&gt; Indices, unsigned int Alignment, unsigned int AddressSpace, bool UseMaskForCond = false, bool UseMaskForGaps = false)'/>
<def f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp' l='1039' ll='1098' type='int llvm::SystemZTTIImpl::getInterleavedMemoryOpCost(unsigned int Opcode, llvm::Type * VecTy, unsigned int Factor, ArrayRef&lt;unsigned int&gt; Indices, unsigned int Alignment, unsigned int AddressSpace, bool UseMaskForCond = false, bool UseMaskForGaps = false)'/>
<doc f='llvm/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp' l='1034'>// The generic implementation of getInterleavedMemoryOpCost() is based on
// adding costs of the memory operations plus all the extracts and inserts
// needed for using / defining the vector operands. The SystemZ version does
// roughly the same but bases the computations on vector permutations
// instead.</doc>
