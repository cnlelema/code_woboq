<dec f='llvm/llvm/include/llvm/Support/ARMTargetParser.h' l='252' type='llvm::StringRef llvm::ARM::getCanonicalArchName(llvm::StringRef Arch)'/>
<use f='llvm/llvm/lib/Support/AArch64TargetParser.cpp' l='189' u='c' c='_ZN4llvm7AArch649parseArchENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/ARMTargetParser.cpp' l='28' u='c' c='_ZN4llvm3ARM9parseArchENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/ARMTargetParser.cpp' l='39' u='c' c='_ZN4llvm3ARM16parseArchVersionENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/ARMTargetParser.cpp' l='90' u='c' c='_ZN4llvm3ARM16parseArchProfileENS_9StringRefE'/>
<def f='llvm/llvm/lib/Support/ARMTargetParser.cpp' l='275' ll='326' type='llvm::StringRef llvm::ARM::getCanonicalArchName(llvm::StringRef Arch)'/>
<doc f='llvm/llvm/lib/Support/ARMTargetParser.cpp' l='271'>// MArch is expected to be of the form (arm|thumb)?(eb)?(v.+)?(eb)?, but
// (iwmmxt|xscale)(eb)? is also permitted. If the former, return
// &quot;v.+&quot;, if the latter, return unmodified string, minus &apos;eb&apos;.
// If invalid, return empty string.</doc>
<use f='llvm/llvm/lib/Support/Triple.cpp' l='367' u='c' c='_ZL12parseARMArchN4llvm9StringRefE'/>
<use f='llvm/llvm/lib/Support/Triple.cpp' l='593' u='c' c='_ZL12parseSubArchN4llvm9StringRefE'/>
<use f='llvm/llvm/lib/Support/Triple.cpp' l='1638' u='c' c='_ZNK4llvm6Triple16getARMCPUForArchENS_9StringRefE'/>
