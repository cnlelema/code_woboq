<def f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp' l='289' ll='320' type='std::pair&lt;EvalResult, StringRef&gt; llvm::RuntimeDyldCheckerExprEval::evalNextPC(llvm::StringRef Expr, llvm::RuntimeDyldCheckerExprEval::ParseContext PCtx) const'/>
<use f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp' l='414' u='c' c='_ZNK4llvm26RuntimeDyldCheckerExprEval18evalIdentifierExprENS_9StringRefENS0_12ParseContextE'/>
<doc f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp' l='283'>// Evaluate a call to next_pc.
  // Decode the instruction at the given symbol and return the following program
  // counter.
  // Returns an error if the instruction cannot be decoded.
  // On success, returns a pair containing the next PC, plus of the
  // expression remaining to be evaluated.</doc>
