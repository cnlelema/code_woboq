<dec f='llvm/llvm/include/llvm/CodeGen/StackProtector.h' l='96' type='bool llvm::StackProtector::RequiresStackProtector()'/>
<doc f='llvm/llvm/include/llvm/CodeGen/StackProtector.h' l='94'>/// RequiresStackProtector - Check whether or not this function needs a
  /// stack protector based upon the stack protector level.</doc>
<use f='llvm/llvm/lib/CodeGen/StackProtector.cpp' l='95' u='c' c='_ZN4llvm14StackProtector13runOnFunctionERNS_8FunctionE'/>
<def f='llvm/llvm/lib/CodeGen/StackProtector.cpp' l='185' ll='286' type='bool llvm::StackProtector::RequiresStackProtector()'/>
<doc f='llvm/llvm/lib/CodeGen/StackProtector.cpp' l='172'>/// Check whether or not this function needs a stack protector based
/// upon the stack protector level.
///
/// We use two heuristics: a standard (ssp) and strong (sspstrong).
/// The standard heuristic which will add a guard variable to functions that
/// call alloca with a either a variable size or a size &gt;= SSPBufferSize,
/// functions with character buffers larger than SSPBufferSize, and functions
/// with aggregates containing character buffers larger than SSPBufferSize. The
/// strong heuristic will add a guard variables to functions that call alloca
/// regardless of size, functions with any buffer regardless of type and size,
/// functions with aggregates that contain any buffer regardless of type and
/// size, and functions that contain stack-based variables that have had their
/// address taken.</doc>
