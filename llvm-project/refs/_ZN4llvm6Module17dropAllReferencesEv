<dec f='llvm/llvm/include/llvm/IR/Module.h' l='818' type='void llvm::Module::dropAllReferences()'/>
<doc f='llvm/llvm/include/llvm/IR/Module.h' l='812'>/// This function causes all the subinstructions to &quot;let go&quot; of all references
  /// that they are maintaining.  This allows one to &apos;delete&apos; a whole class at
  /// a time, even though there may be circular references... first all
  /// references are dropped, and all use counts go to zero.  Then everything
  /// is delete&apos;d for real.  Note that no operations are valid on an object
  /// that has &quot;dropped all references&quot;, except operator delete.</doc>
<use f='llvm/llvm/lib/IR/Module.cpp' l='82' u='c' c='_ZN4llvm6ModuleD1Ev'/>
<def f='llvm/llvm/lib/IR/Module.cpp' l='439' ll='451' type='void llvm::Module::dropAllReferences()'/>
<doc f='llvm/llvm/lib/IR/Module.cpp' l='432'>// dropAllReferences() - This function causes all the subelements to &quot;let go&quot;
// of all references that they are maintaining.  This allows one to &apos;delete&apos; a
// whole module at a time, even though there may be circular references... first
// all references are dropped, and all use counts go to zero.  Then everything
// is deleted for real.  Note that no operations are valid on an object that
// has &quot;dropped all references&quot;, except operator delete.
//</doc>
