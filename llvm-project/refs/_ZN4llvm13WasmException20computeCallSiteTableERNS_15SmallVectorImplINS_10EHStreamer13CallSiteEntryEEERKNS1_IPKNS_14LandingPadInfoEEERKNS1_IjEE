<dec f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.h' l='33' type='void llvm::WasmException::computeCallSiteTable(SmallVectorImpl&lt;llvm::EHStreamer::CallSiteEntry&gt; &amp; CallSites, const SmallVectorImpl&lt;const llvm::LandingPadInfo *&gt; &amp; LandingPads, const SmallVectorImpl&lt;unsigned int&gt; &amp; FirstActions)'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.h' l='32'>// Compute the call site table for wasm EH.</doc>
<inh f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.h' l='87' c='_ZN4llvm10EHStreamer20computeCallSiteTableERNS_15SmallVectorImplINS0_13CallSiteEntryEEERKNS1_IPKNS_14LandingPadInfoEEERKNS1_IjEE'/>
<def f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.cpp' l='77' ll='96' type='void llvm::WasmException::computeCallSiteTable(SmallVectorImpl&lt;llvm::EHStreamer::CallSiteEntry&gt; &amp; CallSites, const SmallVectorImpl&lt;const llvm::LandingPadInfo *&gt; &amp; LandingPads, const SmallVectorImpl&lt;unsigned int&gt; &amp; FirstActions)'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.cpp' l='69'>// Compute the call-site table for wasm EH. Even though we use the same function
// name to share the common routines, a call site entry in the table corresponds
// to not a call site for possibly-throwing functions but a landing pad. In wasm
// EH the VM is responsible for stack unwinding. After an exception occurs and
// the stack is unwound, the control flow is transferred to wasm &apos;catch&apos;
// instruction by the VM, after which the personality function is called from
// the compiler-generated code. Refer to WasmEHPrepare pass for more
// information.</doc>
