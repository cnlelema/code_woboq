<def f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='26' type='const size_t'/>
<use f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='46' u='r' c='_ZN4llvm11ms_demangle14ArenaAllocatorC1Ev'/>
<use f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='67' u='r' c='_ZN4llvm11ms_demangle14ArenaAllocator20allocUnalignedBufferEm'/>
<use f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='86' u='r' c='_ZN4llvm11ms_demangle14ArenaAllocator10allocArrayEm'/>
<use f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='105' u='r' c='_ZN4llvm11ms_demangle14ArenaAllocator5allocEDpOT0_'/>
<use f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='106' u='r' c='_ZN4llvm11ms_demangle14ArenaAllocator5allocEDpOT0_'/>
<doc f='llvm/llvm/include/llvm/Demangle/MicrosoftDemangle.h' l='21'>// This memory allocator is extremely fast, but it doesn&apos;t call dtors
// for allocated objects. That means you can&apos;t use STL containers
// (such as std::vector) with this allocator. But it pays off --
// the demangler is 3x faster with this allocator compared to one with
// STL containers.</doc>
