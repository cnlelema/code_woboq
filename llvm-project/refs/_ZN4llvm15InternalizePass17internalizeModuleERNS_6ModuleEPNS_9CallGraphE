<dec f='llvm/llvm/include/llvm/Transforms/IPO/Internalize.h' l='63' type='bool llvm::InternalizePass::internalizeModule(llvm::Module &amp; TheModule, llvm::CallGraph * CG = nullptr)'/>
<use f='llvm/llvm/include/llvm/Transforms/IPO/Internalize.h' l='74' u='c' c='_ZN4llvm17internalizeModuleERNS_6ModuleESt8functionIFbRKNS_11GlobalValueEEEPNS_9CallGraphE'/>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Internalize.h' l='58'>/// Run the internalizer on \p TheModule, returns true if any changes was
  /// made.
  ///
  /// If the CallGraph \p CG is supplied, it will be updated when
  /// internalizing a function (by removing any edge from the &quot;external node&quot;)</doc>
<def f='llvm/llvm/lib/Transforms/IPO/Internalize.cpp' l='149' ll='234' type='bool llvm::InternalizePass::internalizeModule(llvm::Module &amp; M, llvm::CallGraph * CG = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/IPO/Internalize.cpp' l='239' u='c' c='_ZN4llvm15InternalizePass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
