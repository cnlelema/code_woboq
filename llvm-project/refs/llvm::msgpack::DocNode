<def f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='38' ll='194'/>
<ovr f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='197' c='llvm::msgpack::MapDocNode'/>
<ovr f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='217' c='llvm::msgpack::ArrayDocNode'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/BinaryFormat/MsgPackDocument.h' l='36'>/// A node in a MsgPack Document. This is a simple copyable and
/// passable-by-value type that does not own any memory.</doc>
<mbr r='llvm::msgpack::DocNode::KindAndDoc' o='0' t='const llvm::msgpack::KindAndDocument *'/>
<fun r='_ZN4llvm7msgpack7DocNodeC1Ev'/>
<fun r='_ZNK4llvm7msgpack7DocNode5isMapEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode7isArrayEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode8isScalarEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode8isStringEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode7isEmptyEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode7getKindEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode11getDocumentEv'/>
<fun r='_ZN4llvm7msgpack7DocNode6getIntEv'/>
<fun r='_ZN4llvm7msgpack7DocNode7getUIntEv'/>
<fun r='_ZN4llvm7msgpack7DocNode7getBoolEv'/>
<fun r='_ZN4llvm7msgpack7DocNode8getFloatEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode6getIntEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode7getUIntEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode7getBoolEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode8getFloatEv'/>
<fun r='_ZNK4llvm7msgpack7DocNode9getStringEv'/>
<fun r='_ZN4llvm7msgpack7DocNode8getArrayEb'/>
<fun r='_ZN4llvm7msgpack7DocNode6getMapEb'/>
<fun r='_ZNK4llvm7msgpack7DocNode8toStringEv'/>
<fun r='_ZN4llvm7msgpack7DocNode10fromStringENS_9StringRefES2_'/>
<fun r='_ZN4llvm7msgpack7DocNodeC1EPKNS0_15KindAndDocumentE'/>
<fun r='_ZN4llvm7msgpack7DocNode14convertToArrayEv'/>
<fun r='_ZN4llvm7msgpack7DocNode12convertToMapEv'/>
<ovr f='llvm/llvm/lib/BinaryFormat/MsgPackDocumentYAML.cpp' l='24' c='(anonymousnamespace)::ScalarDocNode'/>
<fun r='_ZNK4llvm7msgpack7DocNode8toStringEv'/>
<fun r='_ZN4llvm7msgpack7DocNode10fromStringENS_9StringRefES2_'/>
