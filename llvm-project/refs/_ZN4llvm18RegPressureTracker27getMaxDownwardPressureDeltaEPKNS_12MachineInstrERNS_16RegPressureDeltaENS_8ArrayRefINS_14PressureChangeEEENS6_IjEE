<dec f='llvm/llvm/include/llvm/CodeGen/RegisterPressure.h' l='491' type='void llvm::RegPressureTracker::getMaxDownwardPressureDelta(const llvm::MachineInstr * MI, llvm::RegPressureDelta &amp; Delta, ArrayRef&lt;llvm::PressureChange&gt; CriticalPSets, ArrayRef&lt;unsigned int&gt; MaxPressureLimit)'/>
<use f='llvm/llvm/include/llvm/CodeGen/RegisterPressure.h' l='504' u='c' c='_ZN4llvm18RegPressureTracker19getMaxPressureDeltaEPKNS_12MachineInstrERNS_16RegPressureDeltaENS_8ArrayRefINS_14PressureChangeEEENS6_IjEE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/RegisterPressure.h' l='487'>/// Consider the pressure increase caused by traversing this instruction
  /// top-down. Find the pressure set with the most change beyond its pressure
  /// limit based on the tracker&apos;s current pressure, and record the number of
  /// excess register units of that pressure set introduced by this instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='2956' u='c' c='_ZN4llvm16GenericScheduler13initCandidateERNS_20GenericSchedulerBase14SchedCandidateEPNS_5SUnitEbRKNS_18RegPressureTrackerERS6_'/>
<def f='llvm/llvm/lib/CodeGen/RegisterPressure.cpp' l='1325' ll='1345' type='void llvm::RegPressureTracker::getMaxDownwardPressureDelta(const llvm::MachineInstr * MI, llvm::RegPressureDelta &amp; Delta, ArrayRef&lt;llvm::PressureChange&gt; CriticalPSets, ArrayRef&lt;unsigned int&gt; MaxPressureLimit)'/>
<doc f='llvm/llvm/lib/CodeGen/RegisterPressure.cpp' l='1314'>/// Consider the pressure increase caused by traversing this instruction
/// top-down. Find the register class with the most change in its pressure limit
/// based on the tracker&apos;s current pressure, and return the number of excess
/// register units of that pressure set introduced by this instruction.
///
/// This assumes that the current LiveIn set is sufficient.
///
/// This is expensive for an on-the-fly query because it calls
/// bumpDownwardPressure to recompute the pressure sets based on current
/// liveness. We don&apos;t yet have a fast version of downward pressure tracking
/// analogous to getUpwardPressureDelta.</doc>
