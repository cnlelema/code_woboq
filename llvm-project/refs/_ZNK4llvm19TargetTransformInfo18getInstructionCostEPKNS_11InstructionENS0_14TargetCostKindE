<def f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='136' ll='148' type='int llvm::TargetTransformInfo::getInstructionCost(const llvm::Instruction * I, enum TargetCostKind kind) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='129'>/// Query the cost of a specified instruction.
  ///
  /// Clients should use this interface to query the cost of an existing
  /// instruction. The instruction must have a valid parent (basic block).
  ///
  /// Note, this method does not cache the cost calculation and it
  /// can be expensive in some cases.</doc>
<use f='llvm/llvm/lib/Analysis/CostModel.cpp' l='57' u='c' c='_ZNK12_GLOBAL__N_117CostModelAnalysis18getInstructionCostEPKN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/CostModel.cpp' l='102' u='c' c='_ZNK12_GLOBAL__N_117CostModelAnalysis5printERN4llvm11raw_ostreamEPKNS1_6ModuleE'/>
<use f='llvm/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp' l='1162' u='c' c='_ZN12_GLOBAL__N_126InterleavedLoadCombineImpl7combineERNSt7__cxx114listINS_10VectorInfoESaIS3_EEERN4llvm25OptimizationRemarkEmitterE'/>
<use f='llvm/llvm/lib/Transforms/IPO/HotColdSplitting.cpp' l='258' u='c' c='_ZL19getOutliningBenefitN4llvm8ArrayRefIPNS_10BasicBlockEEERNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp' l='214' u='c' c='_ZL16canSplitCallSiteN4llvm8CallSiteERNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3037' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3042' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3049' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
