<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2678' type='void clang::Parser::ParseParenDeclarator(clang::Declarator &amp; D)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5870' u='c' c='_ZN5clang6Parser21ParseDirectDeclaratorERNS_10DeclaratorE'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6062' ll='6157' type='void clang::Parser::ParseParenDeclarator(clang::Declarator &amp; D)'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6049'>/// ParseParenDeclarator - We parsed the declarator D up to a paren.  This is
/// only called before the identifier, so these are most likely just grouping
/// parens for precedence.  If we find that these are actually function
/// parameter parens in an abstract-declarator, we call ParseFunctionDeclarator.
///
///       direct-declarator:
///         &apos;(&apos; declarator &apos;)&apos;
/// [GNU]   &apos;(&apos; attributes declarator &apos;)&apos;
///         direct-declarator &apos;(&apos; parameter-type-list &apos;)&apos;
///         direct-declarator &apos;(&apos; identifier-list[opt] &apos;)&apos;
/// [GNU]   direct-declarator &apos;(&apos; parameter-forward-declarations
///                    parameter-type-list[opt] &apos;)&apos;
///</doc>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='3046' u='c' c='_ZN5clang6Parser27ParseBlockLiteralExpressionEv'/>
