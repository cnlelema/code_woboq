<dec f='llvm/lld/include/lld/Common/Filesystem.h' l='16' type='void lld::unlinkAsync(llvm::StringRef Path)'/>
<def f='llvm/lld/Common/Filesystem.cpp' l='41' ll='79' type='void lld::unlinkAsync(llvm::StringRef Path)'/>
<doc f='llvm/lld/Common/Filesystem.cpp' l='26'>// Removes a given file asynchronously. This is a performance hack,
// so remove this when operating systems are improved.
//
// On Linux (and probably on other Unix-like systems), unlink(2) is a
// noticeably slow system call. As of 2016, unlink takes 250
// milliseconds to remove a 1 GB file on ext4 filesystem on my machine.
//
// To create a new result file, we first remove existing file. So, if
// you repeatedly link a 1 GB program in a regular compile-link-debug
// cycle, every cycle wastes 250 milliseconds only to remove a file.
// Since LLD can link a 1 GB binary in about 5 seconds, that waste
// actually counts.
//
// This function spawns a background thread to remove the file.
// The calling thread returns almost immediately.</doc>
<use f='llvm/lld/ELF/Writer.cpp' l='2728' u='c' c='_ZN12_GLOBAL__N_16Writer8openFileEv'/>
