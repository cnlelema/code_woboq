<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='242' type='llvm::FunctionPass * llvm::createReassociatePass()'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='308' u='c' c='_ZL32addGeneralOptsForMemorySanitizerRKN4llvm18PassManagerBuilderERNS_6legacy15PassManagerBaseEb'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='235'>//===----------------------------------------------------------------------===//
//
// Reassociate - This pass reassociates commutative expressions in an order that
// is designed to promote better constant propagation, GCSE, LICM, PRE...
//
// For example:  4 + (x + 5)  -&gt;  x + (4 + 5)
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='160' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='351' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2446' ll='2448' type='llvm::FunctionPass * llvm::createReassociatePass()'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2445'>// Public interface to the Reassociate pass</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='215' u='c' c='LLVMAddReassociatePass'/>
