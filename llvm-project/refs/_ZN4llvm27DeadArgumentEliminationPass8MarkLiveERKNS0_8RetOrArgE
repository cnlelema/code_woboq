<dec f='llvm/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h' l='133' type='void llvm::DeadArgumentEliminationPass::MarkLive(const llvm::DeadArgumentEliminationPass::RetOrArg &amp; RA)'/>
<use f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='665' u='c' c='_ZN4llvm27DeadArgumentEliminationPass9MarkValueERKNS0_8RetOrArgENS0_8LivenessERKNS_11SmallVectorIS1_Lj5EEE'/>
<def f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='696' ll='706' type='void llvm::DeadArgumentEliminationPass::MarkLive(const llvm::DeadArgumentEliminationPass::RetOrArg &amp; RA)'/>
<use f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='718' u='c' c='_ZN4llvm27DeadArgumentEliminationPass17PropagateLivenessERKNS0_8RetOrArgE'/>
<doc f='llvm/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp' l='693'>/// MarkLive - Mark the given return value or argument as live. Additionally,
/// mark any values that are used by this value (according to Uses) live as
/// well.</doc>
