<dec f='llvm/clang/lib/Format/ContinuationIndenter.h' l='144' type='std::pair&lt;unsigned int, bool&gt; clang::format::ContinuationIndenter::breakProtrudingToken(const clang::format::FormatToken &amp; Current, clang::format::LineState &amp; State, bool AllowBreak, bool DryRun, bool Strict)'/>
<doc f='llvm/clang/lib/Format/ContinuationIndenter.h' l='126'>/// If the current token sticks out over the end of the line, break
  /// it if possible.
  ///
  /// \returns A pair (penalty, exceeded), where penalty is the extra penalty
  /// when tokens are broken or lines exceed the column limit, and exceeded
  /// indicates whether the algorithm purposefully left lines exceeding the
  /// column limit.
  ///
  /// The returned penalty will cover the cost of the additional line breaks
  /// and column limit violation in all lines except for the last one. The
  /// penalty for the column limit violation in the last line (and in single
  /// line tokens) is handled in \c addNextStateToQueue.
  ///
  /// \p Strict indicates whether reflowing is allowed to leave characters
  /// protruding the column limit; if true, lines will be split strictly within
  /// the column limit where possible; if false, words are allowed to protrude
  /// over the column limit as long as the penalty is less than the penalty
  /// of a break.</doc>
<use f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='1681' u='c' c='_ZN5clang6format20ContinuationIndenter15handleEndOfLineERKNS0_11FormatTokenERNS0_9LineStateEbbb'/>
<use f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='1688' u='c' c='_ZN5clang6format20ContinuationIndenter15handleEndOfLineERKNS0_11FormatTokenERNS0_9LineStateEbbb'/>
<use f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='1700' u='c' c='_ZN5clang6format20ContinuationIndenter15handleEndOfLineERKNS0_11FormatTokenERNS0_9LineStateEbbb'/>
<def f='llvm/clang/lib/Format/ContinuationIndenter.cpp' l='1828' ll='2200' type='std::pair&lt;unsigned int, bool&gt; clang::format::ContinuationIndenter::breakProtrudingToken(const clang::format::FormatToken &amp; Current, clang::format::LineState &amp; State, bool AllowBreak, bool DryRun, bool Strict)'/>
