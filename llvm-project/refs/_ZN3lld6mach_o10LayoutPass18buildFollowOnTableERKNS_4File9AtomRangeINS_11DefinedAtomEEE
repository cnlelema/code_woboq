<dec f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.h' l='75' type='void lld::mach_o::LayoutPass::buildFollowOnTable(const File::AtomRange&lt;DefinedAtom&gt; &amp; range)'/>
<def f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.cpp' l='334' ll='396' type='void lld::mach_o::LayoutPass::buildFollowOnTable(const File::AtomRange&lt;DefinedAtom&gt; &amp; range)'/>
<use f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.cpp' l='450' u='c' c='_ZN3lld6mach_o10LayoutPass7performERNS_10SimpleFileE'/>
<doc f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.cpp' l='319'>/// This pass builds the followon tables described by two DenseMaps
/// followOnRoots and followonNexts.
/// The followOnRoots map contains a mapping of a DefinedAtom to its root
/// The followOnNexts map contains a mapping of what DefinedAtom follows the
/// current Atom
/// The algorithm follows a very simple approach
/// a) If the atom is first seen, then make that as the root atom
/// b) The targetAtom which this Atom contains, has the root thats set to the
///    root of the current atom
/// c) If the targetAtom is part of a different tree and the root of the
///    targetAtom is itself, Chain all the atoms that are contained in the tree
///    to the current Tree
/// d) If the targetAtom is part of a different chain and the root of the
///    targetAtom until the targetAtom has all atoms of size 0, then chain the
///    targetAtoms and its tree to the current chain</doc>
<doc f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.h' l='73'>// Build the followOn atoms chain as specified by the kindLayoutAfter
  // reference type</doc>
