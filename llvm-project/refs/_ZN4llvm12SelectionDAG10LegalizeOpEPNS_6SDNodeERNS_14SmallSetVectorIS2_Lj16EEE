<dec f='llvm/llvm/include/llvm/CodeGen/SelectionDAG.h' l='526' type='bool llvm::SelectionDAG::LegalizeOp(llvm::SDNode * N, SmallSetVector&lt;llvm::SDNode *, 16&gt; &amp; UpdatedNodes)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/SelectionDAG.h' l='507'>/// Transforms a SelectionDAG node and any operands to it into a node
  /// that is compatible with the target instruction selector, as indicated by
  /// the TargetLowering object.
  ///
  /// \returns true if \c N is a valid, legal node after calling this.
  ///
  /// This essentially runs a single recursive walk of the \c Legalize process
  /// over the given node (and its operands). This can be used to incrementally
  /// legalize the DAG. All of the nodes which are directly replaced,
  /// potentially including N, are added to the output parameter \c
  /// UpdatedNodes so that the delta to the DAG can be understood by the
  /// caller.
  ///
  /// When this returns false, N has been legalized in a way that make the
  /// pointer passed in no longer valid. It may have even been deleted from the
  /// DAG, and so it shouldn&apos;t be used further. When this returns true, the
  /// N passed in is a legal node, and can be immediately processed as such.
  /// This may still have done some work on the DAG, and will still populate
  /// UpdatedNodes with any new nodes replacing those originally in the DAG.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='1534' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner3RunEN4llvm12CombineLevelE'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp' l='4615' ll='4626' type='bool llvm::SelectionDAG::LegalizeOp(llvm::SDNode * N, SmallSetVector&lt;llvm::SDNode *, 16&gt; &amp; UpdatedNodes)'/>
