<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='137' type='bool llvm::JumpThreadingPass::ProcessBranchOnXOR(llvm::BinaryOperator * BO)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1215' u='c' c='_ZN4llvm17JumpThreadingPass12ProcessBlockEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1780' ll='1882' type='bool llvm::JumpThreadingPass::ProcessBranchOnXOR(llvm::BinaryOperator * BO)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1777'>/// ProcessBranchOnXOR - We have an otherwise unthreadable conditional branch on
/// a xor instruction in the current block.  See if there are any
/// simplifications we can do based on inputs to the xor.</doc>
