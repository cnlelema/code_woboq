<dec f='llvm/llvm/include/llvm/Support/CrashRecoveryContext.h' l='94' type='bool llvm::CrashRecoveryContext::RunSafelyOnThread(function_ref&lt;void ()&gt; , unsigned int RequestedStackSize = 0)'/>
<use f='llvm/llvm/include/llvm/Support/CrashRecoveryContext.h' l='97' u='c' c='_ZN4llvm20CrashRecoveryContext17RunSafelyOnThreadEPFvPvES1_j'/>
<doc f='llvm/llvm/include/llvm/Support/CrashRecoveryContext.h' l='86'>/// Execute the provide callback function (with the given arguments) in
  /// a protected context which is run in another thread (optionally with a
  /// requested stack size).
  ///
  /// See RunSafely() and llvm_execute_on_thread().
  ///
  /// On Darwin, if PRIO_DARWIN_BG is set on the calling thread, it will be
  /// propagated to the new thread as well.</doc>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='1127' u='c' c='_ZL17compileModuleImplRN5clang16CompilerInstanceENS_14SourceLocationEN4llvm9StringRefENS_17FrontendInputFileES4_S4_NS3_12function_refIFvS1_EEES8_'/>
<use f='llvm/clang/lib/Frontend/Rewrite/FrontendActions.cpp' l='255' u='c' c='_ZN5clang21RewriteIncludesAction22RewriteImportsListener15visitModuleFileEN4llvm9StringRefENS_13serialization10ModuleKindE'/>
<use f='llvm/clang/tools/libclang/CIndex.cpp' l='8722' u='c' c='_ZN5clang9RunSafelyERN4llvm20CrashRecoveryContextENS0_12function_refIFvvEEEj'/>
<def f='llvm/llvm/lib/Support/CrashRecoveryContext.cpp' l='403' ll='411' type='bool llvm::CrashRecoveryContext::RunSafelyOnThread(function_ref&lt;void ()&gt; Fn, unsigned int RequestedStackSize = 0)'/>
