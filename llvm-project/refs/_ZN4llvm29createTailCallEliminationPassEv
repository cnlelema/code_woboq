<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='283' type='llvm::FunctionPass * llvm::createTailCallEliminationPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='278'>//===----------------------------------------------------------------------===//
//
// TailCallElimination - This pass eliminates call instructions to the current
// function which occur immediately before return instructions.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='174' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='349' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='901' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Scalar.cpp' l='240' u='c' c='LLVMAddTailCallEliminationPass'/>
<def f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='857' ll='859' type='llvm::FunctionPass * llvm::createTailCallEliminationPass()'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='856'>// Public interface to the TailCallElimination pass</doc>
