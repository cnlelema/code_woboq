<dec f='llvm/clang/lib/CodeGen/CGOpenMPRuntimeNVPTX.h' l='286' type='void clang::CodeGen::CGOpenMPRuntimeNVPTX::emitBarrierCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, clang::OpenMPDirectiveKind Kind, bool EmitChecks = true, bool ForceSimpleCall = false)'/>
<inh f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='918' c='_ZN5clang7CodeGen15CGOpenMPRuntime15emitBarrierCallERNS0_15CodeGenFunctionENS_14SourceLocationENS_19OpenMPDirectiveKindEbb'/>
<def f='llvm/clang/lib/CodeGen/CGOpenMPRuntimeNVPTX.cpp' l='2677' ll='2689' type='void clang::CodeGen::CGOpenMPRuntimeNVPTX::emitBarrierCall(clang::CodeGen::CodeGenFunction &amp; CGF, clang::SourceLocation Loc, clang::OpenMPDirectiveKind Kind, bool  = true, bool  = false)'/>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntimeNVPTX.cpp' l='2741' u='c' c='_ZN5clang7CodeGen20CGOpenMPRuntimeNVPTX18emitCriticalRegionERNS0_15CodeGenFunctionEN4llvm9StringRefERKNS0_15RegionCodeGenTyENS_14SourceLocationEPKNS_4ExprE'/>
<doc f='llvm/clang/lib/CodeGen/CGOpenMPRuntimeNVPTX.h' l='278'>/// Emit an implicit/explicit barrier for OpenMP threads.
  /// \param Kind Directive for which this implicit barrier call must be
  /// generated. Must be OMPD_barrier for explicit barrier generation.
  /// \param EmitChecks true if need to emit checks for cancellation barriers.
  /// \param ForceSimpleCall true simple barrier call must be emitted, false if
  /// runtime class decides which one to emit (simple or with cancellation
  /// checks).
  ///</doc>
