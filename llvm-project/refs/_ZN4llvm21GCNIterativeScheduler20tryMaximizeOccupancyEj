<dec f='llvm/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.h' l='106' type='unsigned int llvm::GCNIterativeScheduler::tryMaximizeOccupancy(unsigned int TargetOcc = std::numeric_limits&lt;unsigned int&gt;::max())'/>
<def f='llvm/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp' l='450' ll='485' type='unsigned int llvm::GCNIterativeScheduler::tryMaximizeOccupancy(unsigned int TargetOcc = std::numeric_limits&lt;unsigned int&gt;::max())'/>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp' l='497' u='c' c='_ZN4llvm21GCNIterativeScheduler26scheduleLegacyMaxOccupancyEb'/>
<use f='llvm/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp' l='585' u='c' c='_ZN4llvm21GCNIterativeScheduler11scheduleILPEb'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp' l='441'>///////////////////////////////////////////////////////////////////////////////
// Legacy MaxOccupancy Strategy

// Tries to increase occupancy applying minreg scheduler for a sequence of
// most demanding regions. Obtained schedules are saved as BestSchedule for a
// region.
// TargetOcc is the best achievable occupancy for a kernel.
// Returns better occupancy on success or current occupancy on fail.
// BestSchedules aren&apos;t deleted on fail.</doc>
