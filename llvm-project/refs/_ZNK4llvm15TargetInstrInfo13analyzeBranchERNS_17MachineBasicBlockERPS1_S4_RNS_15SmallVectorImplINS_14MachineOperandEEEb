<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='574' ll='579' type='bool llvm::TargetInstrInfo::analyzeBranch(llvm::MachineBasicBlock &amp; MBB, llvm::MachineBasicBlock *&amp; TBB, llvm::MachineBasicBlock *&amp; FBB, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, bool AllowModify = false) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='547'>/// Analyze the branching code at the end of MBB, returning
  /// true if it cannot be understood (e.g. it&apos;s a switch dispatch or isn&apos;t
  /// implemented for a target).  Upon success, this returns false and returns
  /// with the following information in various cases:
  ///
  /// 1. If this block ends with no branches (it just falls through to its succ)
  ///    just return false, leaving TBB/FBB null.
  /// 2. If this block ends with only an unconditional branch, it sets TBB to be
  ///    the destination block.
  /// 3. If this block ends with a conditional branch and it falls through to a
  ///    successor block, it sets TBB to be the branch destination block and a
  ///    list of operands that evaluate the condition. These operands can be
  ///    passed to other TargetInstrInfo methods to create new branches.
  /// 4. If this block ends with a conditional branch followed by an
  ///    unconditional branch, it returns the &apos;true&apos; destination in TBB, the
  ///    &apos;false&apos; destination in FBB, and a list of operands that evaluate the
  ///    condition.  These operands can be passed to other TargetInstrInfo
  ///    methods to create new branches.
  ///
  /// Note that removeBranch and insertBranch must be implemented to support
  /// cases where this method returns success.
  ///
  /// If AllowModify is true, then this routine is allowed to modify the basic
  /// block (e.g. delete instructions after the unconditional branch).
  ///
  /// The CFG information in MBB.Predecessors and MBB.Successors must be valid
  /// before calling this function.</doc>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='197' u='c' c='_ZN4llvm12BranchFolder16OptimizeFunctionERNS_15MachineFunctionEPKNS_15TargetInstrInfoEPKNS_18TargetRegisterInfoEPNS_17MachineModuleInfoEPNS_15MachineLoopInfoEb'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='516' u='c' c='_ZL7FixTailPN4llvm17MachineBasicBlockES1_PKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1170' u='c' c='_ZN4llvm12BranchFolder15TailMergeBlocksERNS_15MachineFunctionE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1442' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1587' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1617' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1701' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1747' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1809' u='c' c='_ZN4llvm12BranchFolder13OptimizeBlockEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1964' u='c' c='_ZN4llvm12BranchFolder22HoistCommonCodeInSuccsEPNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/BranchRelaxation.cpp' l='341' u='c' c='_ZN12_GLOBAL__N_116BranchRelaxation22fixupConditionalBranchERN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/EarlyIfConversion.cpp' l='389' u='c' c='_ZN12_GLOBAL__N_19SSAIfConv12canConvertIfEPN4llvm17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/IfConversion.cpp' l='914' u='c' c='_ZN12_GLOBAL__N_111IfConverter15AnalyzeBranchesERNS0_6BBInfoE'/>
<use f='llvm/llvm/lib/CodeGen/MachineBasicBlock.cpp' l='535' u='c' c='_ZN4llvm17MachineBasicBlock16updateTerminatorEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBasicBlock.cpp' l='840' u='c' c='_ZN4llvm17MachineBasicBlock14getFallThroughEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBasicBlock.cpp' l='1129' u='c' c='_ZNK4llvm17MachineBasicBlock20canSplitCriticalEdgeEPKS0_'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2387' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement14buildCFGChainsEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2478' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement14buildCFGChainsEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2507' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement14buildCFGChainsEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2514' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement14buildCFGChainsEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2534' u='c' c='_ZN12_GLOBAL__N_121MachineBlockPlacement16optimizeBranchesEv'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='818' u='c' c='_ZN12_GLOBAL__N_115MachineLICMBase15InitRegPressureEPN4llvm17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='303' u='c' c='_ZN4llvm16MachinePipeliner15canPipelineLoopERNS_11MachineLoopE'/>
<use f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='2175' u='c' c='_ZN4llvm17SwingSchedulerDAG14generateEpilogERNS_10SMScheduleEjPNS_17MachineBasicBlockEPNS_8DenseMapIjjNS_12DenseMapInfoIjEENS_6detail12DenseMapPairIjj8871859'/>
<use f='llvm/llvm/lib/CodeGen/MachineVerifier.cpp' l='674' u='c' c='_ZN12_GLOBAL__N_115MachineVerifier28visitMachineBasicBlockBeforeEPKN4llvm17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='573' u='c' c='_ZN4llvm14TailDuplicator19shouldTailDuplicateEbRNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='689' u='c' c='_ZN4llvm14TailDuplicator24canCompletelyDuplicateBBERNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='716' u='c' c='_ZN4llvm14TailDuplicator17duplicateSimpleBBEPNS_17MachineBasicBlockERNS_15SmallVectorImplIS2_EERKNS_8DenseSetIjNS_12DenseMapInfoIjEEEERNS3_IPNS_12MachineInstrEEE'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='780' u='c' c='_ZN4llvm14TailDuplicator16canTailDuplicateEPNS_17MachineBasicBlockES2_'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='885' u='c' c='_ZN4llvm14TailDuplicator13tailDuplicateEbPNS_17MachineBasicBlockES2_RNS_15SmallVectorImplIS2_EERNS3_IPNS_12MachineInstrEEE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp' l='144' u='c' c='_ZL18getBBFallenThroughPN4llvm17MachineBasicBlockEPKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp' l='350' u='c' c='_ZN12_GLOBAL__N_125AArch64ConditionOptimizer20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp' l='361' u='c' c='_ZN12_GLOBAL__N_125AArch64ConditionOptimizer20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp' l='502' u='c' c='_ZN12_GLOBAL__N_111SSACCmpConv10canConvertEPN4llvm17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp' l='531' u='c' c='_ZN12_GLOBAL__N_111SSACCmpConv10canConvertEPN4llvm17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp' l='189' u='c' c='_ZNK12_GLOBAL__N_127AArch64SpeculationHardening23endsWithCondControlFlowERN4llvm17MachineBasicBlockERPS2_S5_RNS1_9AArch64CC8CondCodeE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp' l='238' u='c' c='_ZN12_GLOBAL__N_119PPCBranchCoalescing17canCoalesceBranchERNS0_23CoalescingCandidateInfoE'/>
