<inh f='llvm/lld/COFF/Chunks.h' l='145' c='lld::coff::NonSectionChunk'/>
<def f='llvm/lld/COFF/Chunks.h' l='467' ll='475'/>
<ovr f='llvm/lld/COFF/Chunks.h' l='477' c='lld::coff::ImportThunkChunkX64'/>
<ovr f='llvm/lld/COFF/Chunks.h' l='484' c='lld::coff::ImportThunkChunkX86'/>
<ovr f='llvm/lld/COFF/Chunks.h' l='492' c='lld::coff::ImportThunkChunkARM'/>
<ovr f='llvm/lld/COFF/Chunks.h' l='500' c='lld::coff::ImportThunkChunkARM64'/>
<size>24</size>
<doc f='llvm/lld/COFF/Chunks.h' l='464'>// Windows-specific.
// A chunk for DLL import jump table entry. In a final output, its
// contents will be a JMP instruction to some __imp_ symbol.</doc>
<fun r='_ZN3lld4coff16ImportThunkChunkC1EPNS0_7DefinedE'/>
<fun r='_ZN3lld4coff16ImportThunkChunk7classofEPKNS0_5ChunkE'/>
<mbr r='lld::coff::ImportThunkChunk::ImpSymbol' o='128' t='lld::coff::Defined *'/>
