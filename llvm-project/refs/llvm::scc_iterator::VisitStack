<dec f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='81' type='std::vector&lt;StackElement&gt;'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='109' u='c' c='_ZNK4llvm12scc_iterator7isAtEndEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='114' c='_ZNK4llvm12scc_iteratoreqERKNS_12scc_iteratorIT_T0_EE'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='147' u='c' c='_ZN4llvm12scc_iterator11DFSVisitOneENT0_7NodeRefE'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='156' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='157' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='157' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='159' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='169' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='170' u='c' c='_ZN4llvm12scc_iterator16DFSVisitChildrenEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='176' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='180' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='181' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='182' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='183' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='186' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='186' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<use f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='187' u='c' c='_ZN4llvm12scc_iterator10GetNextSCCEv'/>
<doc f='llvm/llvm/include/llvm/ADT/SCCIterator.h' l='79'>/// DFS stack, Used to maintain the ordering.  The top contains the current
  /// node, the next child to visit, and the minimum uplink value of all child</doc>
