<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='525' ll='527' type='bool llvm::TargetLoweringBase::convertSetCCLogicToBitwiseLogic(llvm::EVT VT) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='520'>/// Use bitwise logic to make pairs of compares more efficient. For example:
  /// and (seteq A, B), (seteq C, D) --&gt; seteq (or (xor A, B), (xor C, D)), 0
  /// This should be true when it takes more than one instruction to lower
  /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on
  /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='4434' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner17foldLogicOfSetCCsEbN4llvm7SDValueES2_RKNS1_5SDLocE'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMISelLowering.h' l='564' c='_ZNK4llvm17ARMTargetLowering31convertSetCCLogicToBitwiseLogicENS_3EVTE'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='628' c='_ZNK4llvm17PPCTargetLowering31convertSetCCLogicToBitwiseLogicENS_3EVTE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ISelLowering.h' l='875' c='_ZNK4llvm17X86TargetLowering31convertSetCCLogicToBitwiseLogicENS_3EVTE'/>
