<def f='llvm/llvm/include/llvm/MC/MCValue.h' l='39' ll='82'/>
<size>32</size>
<doc f='llvm/llvm/include/llvm/MC/MCValue.h' l='25'>/// This represents an &quot;assembler immediate&quot;.
///
///  In its most general form, this can hold &quot;:Kind:(SymbolA - SymbolB +
///  imm64)&quot;.  Not all targets supports relocations of this general form, but we
///  need to represent this anyway.
///
/// In general both SymbolA and SymbolB will also have a modifier
/// analogous to the top-level Kind. Current targets are not expected
/// to make use of both though. The choice comes down to whether
/// relocation modifiers apply to the closest symbol or the whole
/// expression.
///
/// Note that this class must remain a simple POD value class, because we need
/// it to live in unions etc.</doc>
<mbr r='llvm::MCValue::SymA' o='0' t='const llvm::MCSymbolRefExpr *'/>
<mbr r='llvm::MCValue::SymB' o='64' t='const llvm::MCSymbolRefExpr *'/>
<mbr r='llvm::MCValue::Cst' o='128' t='int64_t'/>
<mbr r='llvm::MCValue::RefKind' o='192' t='uint32_t'/>
<fun r='_ZN4llvm7MCValueC1Ev'/>
<fun r='_ZNK4llvm7MCValue11getConstantEv'/>
<fun r='_ZNK4llvm7MCValue7getSymAEv'/>
<fun r='_ZNK4llvm7MCValue7getSymBEv'/>
<fun r='_ZNK4llvm7MCValue10getRefKindEv'/>
<fun r='_ZNK4llvm7MCValue10isAbsoluteEv'/>
<fun r='_ZNK4llvm7MCValue5printERNS_11raw_ostreamE'/>
<fun r='_ZNK4llvm7MCValue4dumpEv'/>
<fun r='_ZNK4llvm7MCValue16getAccessVariantEv'/>
<fun r='_ZN4llvm7MCValue3getEPKNS_15MCSymbolRefExprES3_lj'/>
<fun r='_ZN4llvm7MCValue3getEl'/>
