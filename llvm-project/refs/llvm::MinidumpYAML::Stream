<def f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='27' ll='53'/>
<ovr f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='59' c='llvm::MinidumpYAML::detail::ListStream'/>
<ovr f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='107' c='llvm::MinidumpYAML::RawContentStream'/>
<ovr f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='121' c='llvm::MinidumpYAML::SystemInfoStream'/>
<ovr f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='145' c='llvm::MinidumpYAML::TextContentStream'/>
<size>16</size>
<doc f='llvm/llvm/include/llvm/ObjectYAML/MinidumpYAML.h' l='20'>/// The base class for all minidump streams. The &quot;Type&quot; of the stream
/// corresponds to the Stream Type field in the minidump file. The &quot;Kind&quot; field
/// specifies how are we going to treat it. For highly specialized streams (e.g.
/// SystemInfo), there is a 1:1 mapping between Types and Kinds, but in general
/// one stream Kind can be used to represent multiple stream Types (e.g. any
/// unrecognised stream Type will be handled via RawContentStream). The mapping
/// from Types to Kinds is fixed and given by the static getKind function.</doc>
<fun r='_ZN4llvm12MinidumpYAML6StreamC1ENS1_10StreamKindENS_8minidump10StreamTypeE'/>
<fun r='_ZN4llvm12MinidumpYAML6StreamD1Ev'/>
<mbr r='llvm::MinidumpYAML::Stream::Kind' o='64' t='const llvm::MinidumpYAML::Stream::StreamKind'/>
<mbr r='llvm::MinidumpYAML::Stream::Type' o='96' t='const minidump::StreamType'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream7getKindENS_8minidump10StreamTypeE'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream6createENS_8minidump10StreamTypeE'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream6createERKNS_8minidump9DirectoryERKNS_6object12MinidumpFileE'/>
<fun r='_ZN4llvm12MinidumpYAML6StreamD1Ev'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream7getKindENS_8minidump10StreamTypeE'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream6createENS_8minidump10StreamTypeE'/>
<fun r='_ZN4llvm12MinidumpYAML6Stream6createERKNS_8minidump9DirectoryERKNS_6object12MinidumpFileE'/>
