<def f='llvm/llvm/include/llvm/IR/Value.h' l='316' ll='320' type='void llvm::Value::assertModuleIsMaterialized() const'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='323' u='c' c='_ZNK4llvm5Value9use_emptyEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='339' u='c' c='_ZN4llvm5Value9use_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='343' u='c' c='_ZNK4llvm5Value9use_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='355' u='c' c='_ZN4llvm5Value4usesEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='359' u='c' c='_ZNK4llvm5Value4usesEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='364' u='c' c='_ZNK4llvm5Value10user_emptyEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='376' u='c' c='_ZN4llvm5Value10user_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='380' u='c' c='_ZNK4llvm5Value10user_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='386' u='c' c='_ZN4llvm5Value9user_backEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='390' u='c' c='_ZNK4llvm5Value9user_backEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='400' u='c' c='_ZN4llvm5Value5usersEv'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='404' u='c' c='_ZNK4llvm5Value5usersEv'/>
<doc f='llvm/llvm/include/llvm/IR/Value.h' l='313'>// This indirection exists so we can keep assertModuleIsMaterializedImpl()
  // around in release builds of Value.cpp to be linked with other code built
  // in debug mode. But this avoids calling it in any of the release built code.</doc>
