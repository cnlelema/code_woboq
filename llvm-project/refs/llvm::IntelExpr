<def f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='62' ll='104'/>
<size>56</size>
<doc f='llvm/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h' l='60'>// Represnt the various parts which makes up an intel expression,
// used for emitting compound intel expressions</doc>
<mbr r='llvm::IntelExpr::NeedBracs' o='0' t='bool'/>
<mbr r='llvm::IntelExpr::Imm' o='64' t='int64_t'/>
<mbr r='llvm::IntelExpr::BaseReg' o='128' t='llvm::StringRef'/>
<mbr r='llvm::IntelExpr::IndexReg' o='256' t='llvm::StringRef'/>
<mbr r='llvm::IntelExpr::Scale' o='384' t='unsigned int'/>
<fun r='_ZN4llvm9IntelExprC1Eb'/>
<fun r='_ZN4llvm9IntelExprC1Elb'/>
<fun r='_ZN4llvm9IntelExprC1ENS_9StringRefEljb'/>
<fun r='_ZN4llvm9IntelExprC1ENS_9StringRefES1_jlb'/>
<fun r='_ZNK4llvm9IntelExpr10hasBaseRegEv'/>
<fun r='_ZNK4llvm9IntelExpr11hasIndexRegEv'/>
<fun r='_ZNK4llvm9IntelExpr7hasRegsEv'/>
<fun r='_ZNK4llvm9IntelExpr7isValidEv'/>
