<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='650' type='bool llvm::DependenceInfo::strongSIVtest(const llvm::SCEV * Coeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurrentLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1146' ll='1251' type='bool llvm::DependenceInfo::strongSIVtest(const llvm::SCEV * Coeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2171' u='c' c='_ZNK4llvm14DependenceInfo7testSIVEPKNS_4SCEVES3_RjRNS_14FullDependenceERNS0_10ConstraintERS3_'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1119'>// strongSIVtest -
// From the paper, Practical Dependence Testing, Section 4.2.1
//
// When we have a pair of subscripts of the form [c1 + a*i] and [c2 + a*i],
// where i is an induction variable, c1 and c2 are loop invariant,
//  and a is a constant, we can solve it exactly using the Strong SIV test.
//
// Can prove independence. Failing that, can compute distance (and direction).
// In the presence of symbolic terms, we can sometimes make progress.
//
// If there&apos;s a dependence,
//
//    c1 + a*i = c2 + a*i&apos;
//
// The dependence distance is
//
//    d = i&apos; - i = (c1 - c2)/a
//
// A dependence only exists if d is an integer and abs(d) &lt;= U, where U is the
// loop&apos;s upper bound. If a dependence exists, the dependence direction is
// defined as
//
//                { &lt; if d &gt; 0
//    direction = { = if d = 0
//                { &gt; if d &lt; 0
//
// Return true if dependence disproved.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='642'>/// strongSIVtest - Tests the strong SIV subscript pair (Src and Dst)
    /// for dependence.
    /// Things of the form [c1 + a*i] and [c2 + a*i],
    /// where i is an induction variable, c1 and c2 are loop invariant,
    /// and a is a constant
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// Sets appropriate direction and distance.</doc>
