<def f='llvm/clang/include/clang/Sema/Ownership.h' l='142' ll='144'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='250' ll='252'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='253' ll='255'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='256' ll='258'/>
<def f='llvm/clang/include/clang/Sema/Ownership.h' l='259' ll='261'/>
<size>1</size>
<doc f='llvm/clang/include/clang/Sema/Ownership.h' l='247'>// We can re-use the low bit of expression, statement, base, and
  // member-initializer pointers for the &quot;invalid&quot; flag of
  // ActionResult.</doc>
<smbr r='clang::IsResultPtrLowBitFree::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::Expr*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::Stmt*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::CXXBaseSpecifier*}::value' t='const bool'/>
<smbr r='clang::IsResultPtrLowBitFree{clang::CXXCtorInitializer*}::value' t='const bool'/>
