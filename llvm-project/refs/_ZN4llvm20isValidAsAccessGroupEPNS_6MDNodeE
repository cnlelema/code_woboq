<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='1184' type='bool llvm::isValidAsAccessGroup(llvm::MDNode * AccGroup)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='1177'>/// Return whether an MDNode might represent an access group.
///
/// Access group metadata nodes have to be distinct and empty. Being
/// always-empty ensures that it never needs to be changed (which -- because
/// MDNodes are designed immutable -- would require creating a new MDNode). Note
/// that this is not a sufficient condition: not every distinct and empty NDNode
/// is representing an access group.</doc>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='507' u='c' c='_ZNK4llvm4Loop19isAnnotatedParallelEv'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='526' u='c' c='_ZNK4llvm4Loop19isAnnotatedParallelEv'/>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='532' u='c' c='_ZNK4llvm4Loop19isAnnotatedParallelEv'/>
<def f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='964' ll='966' type='bool llvm::isValidAsAccessGroup(llvm::MDNode * Node)'/>
<use f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='510' u='c' c='_ZL20addToAccessGroupListRT_PN4llvm6MDNodeE'/>
<use f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='517' u='c' c='_ZL20addToAccessGroupListRT_PN4llvm6MDNodeE'/>
<use f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='568' u='c' c='_ZN4llvm21intersectAccessGroupsEPKNS_11InstructionES2_'/>
<use f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='574' u='c' c='_ZN4llvm21intersectAccessGroupsEPKNS_11InstructionES2_'/>
