<dec f='llvm/llvm/lib/Target/ARM/ARMFrameLowering.h' l='59' type='void llvm::ARMFrameLowering::adjustForSegmentedStacks(llvm::MachineFunction &amp; MF, llvm::MachineBasicBlock &amp; MBB) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetFrameLowering.h' l='177' c='_ZNK4llvm19TargetFrameLowering24adjustForSegmentedStacksERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/Target/ARM/ARMFrameLowering.cpp' l='2138' ll='2518' type='void llvm::ARMFrameLowering::adjustForSegmentedStacks(llvm::MachineFunction &amp; MF, llvm::MachineBasicBlock &amp; PrologueMBB) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMFrameLowering.cpp' l='2114'>// Adjust the function prologue to enable split stacks. This currently only
// supports android and linux.
//
// The ABI of the segmented stack prologue is a little arbitrarily chosen, but
// must be well defined in order to allow for consistent implementations of the
// __morestack helper function. The ABI is also not a normal ABI in that it
// doesn&apos;t follow the normal calling conventions because this allows the
// prologue of each function to be optimized further.
//
// Currently, the ABI looks like (when calling __morestack)
//
//  * r4 holds the minimum stack size requested for this function call
//  * r5 holds the stack size of the arguments to the function
//  * the beginning of the function is 3 instructions after the call to
//    __morestack
//
// Implementations of __morestack should use r4 to allocate a new stack, r5 to
// place the arguments on to the new stack, and the 3-instruction knowledge to
// jump directly to the body of the function when working on the new stack.
//
// An old (and possibly no longer compatible) implementation of __morestack for
// ARM can be found at [1].
//
// [1] - https://github.com/mozilla/rust/blob/86efd9/src/rt/arch/arm/morestack.S</doc>
