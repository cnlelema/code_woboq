<dec f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.h' l='69' type='bool'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.h' l='119' u='r' c='_ZNK4llvm7objcarc8PtrState11IsKnownSafeEv'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.h' l='121' u='w' c='_ZN4llvm7objcarc8PtrState12SetKnownSafeEb'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp' l='1638' u='r' c='_ZN12_GLOBAL__N_110ObjCARCOpt24PairUpRetainsAndReleasesERN4llvm8DenseMapIPKNS1_10BasicBlockENS_7BBStateENS1_12DenseMapInfoIS5_EENS1_6detail12DenseMapP8859475'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp' l='1710' u='r' c='_ZN12_GLOBAL__N_110ObjCARCOpt24PairUpRetainsAndReleasesERN4llvm8DenseMapIPKNS1_10BasicBlockENS_7BBStateENS1_12DenseMapInfoIS5_EENS1_6detail12DenseMapP8859475'/>
<offset>0</offset>
<doc f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.h' l='57'>/// After an objc_retain, the reference count of the referenced
  /// object is known to be positive. Similarly, before an objc_release, the
  /// reference count of the referenced object is known to be positive. If
  /// there are retain-release pairs in code regions where the retain count
  /// is known to be positive, they can be eliminated, regardless of any side
  /// effects between them.
  ///
  /// Also, a retain+release pair nested within another retain+release
  /// pair all on the known same pointer value can be eliminated, regardless
  /// of any intervening side effects.
  ///
  /// KnownSafe is true when either of these conditions is satisfied.</doc>
<use f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.cpp' l='94' u='w' c='_ZN4llvm7objcarc6RRInfo5clearEv'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.cpp' l='108' u='w' c='_ZN4llvm7objcarc6RRInfo5MergeERKS1_'/>
<use f='llvm/llvm/lib/Transforms/ObjCARC/PtrState.cpp' l='108' u='r' c='_ZN4llvm7objcarc6RRInfo5MergeERKS1_'/>
