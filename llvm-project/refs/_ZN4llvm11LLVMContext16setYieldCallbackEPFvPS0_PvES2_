<dec f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='296' type='void llvm::LLVMContext::setYieldCallback(YieldCallbackTy Callback, void * OpaqueHandle)'/>
<doc f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='279'>/// Registers a yield callback with the given context.
  ///
  /// The yield callback function may be called by LLVM to transfer control back
  /// to the client that invoked the LLVM compilation. This can be used to yield
  /// control of the thread, or perform periodic work needed by the client.
  /// There is no guaranteed frequency at which callbacks must occur; in fact,
  /// the client is not guaranteed to ever receive this callback. It is at the
  /// sole discretion of LLVM to do so and only if it can guarantee that
  /// suspending the thread won&apos;t block any forward progress in other LLVM
  /// contexts in the same process.
  ///
  /// At a suspend point, the state of the current LLVM context is intentionally
  /// undefined. No assumptions about it can or should be made. Only LLVM
  /// context API calls that explicitly state that they can be used during a
  /// yield callback are allowed to be used. Any other API calls into the
  /// context are not supported until the yield callback function returns
  /// control to LLVM. Other LLVM contexts are unaffected by this restriction.</doc>
<use f='llvm/llvm/lib/IR/Core.cpp' l='106' u='c' c='LLVMContextSetYieldCallback'/>
<def f='llvm/llvm/lib/IR/LLVMContext.cpp' l='184' ll='188' type='void llvm::LLVMContext::setYieldCallback(YieldCallbackTy Callback, void * OpaqueHandle)'/>
