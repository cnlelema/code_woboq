<inh f='llvm/llvm/include/llvm/ProfileData/SampleProfWriter.h' l='103' c='llvm::sampleprof::SampleProfileWriterBinary'/>
<def f='llvm/llvm/include/llvm/ProfileData/SampleProfWriter.h' l='168' ll='188'/>
<size>144</size>
<doc f='llvm/llvm/include/llvm/ProfileData/SampleProfWriter.h' l='138'>// CompactBinary is a compact format of binary profile which both reduces
// the profile size and the load time needed when compiling. It has two
// major difference with Binary format.
// 1. It represents all the strings in name table using md5 hash.
// 2. It saves a function offset table which maps function name index to
// the offset of its function profile to the start of the binary profile,
// so by using the function offset table, for those function profiles which
// will not be needed when compiling a module, the profile reader does&apos;t
// have to read them and it saves compile time if the profile size is huge.
// The layout of the compact format is shown as follows:
//
//    Part1: Profile header, the same as binary format, containing magic
//           number, version, summary, name table...
//    Part2: Function Offset Table Offset, which saves the position of
//           Part4.
//    Part3: Function profile collection
//             function1 profile start
//                 ....
//             function2 profile start
//                 ....
//             function3 profile start
//                 ....
//                ......
//    Part4: Function Offset Table
//             function1 name index --&gt; function1 profile start
//             function2 name index --&gt; function2 profile start
//             function3 name index --&gt; function3 profile start
//
// We need Part2 because profile reader can use it to find out and read
// function offset table without reading Part3 first.</doc>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary5writeERKNS0_15FunctionSamplesE'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary5writeERKNS_9StringMapINS0_15FunctionSamplesENS_15MallocAllocatorEEE'/>
<mbr r='llvm::sampleprof::SampleProfileWriterCompactBinary::FuncOffsetTable' o='640' t='MapVector&lt;llvm::StringRef, uint64_t&gt;'/>
<mbr r='llvm::sampleprof::SampleProfileWriterCompactBinary::TableOffset' o='1088' t='uint64_t'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary14writeNameTableEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary15writeMagicIdentEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary11writeHeaderERKNS_9StringMapINS0_15FunctionSamplesENS_15MallocAllocatorEEE'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary20writeFuncOffsetTableEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary5writeERKNS_9StringMapINS0_15FunctionSamplesENS_15MallocAllocatorEEE'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary20writeFuncOffsetTableEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary14writeNameTableEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary15writeMagicIdentEv'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary11writeHeaderERKNS_9StringMapINS0_15FunctionSamplesENS_15MallocAllocatorEEE'/>
<fun r='_ZN4llvm10sampleprof32SampleProfileWriterCompactBinary5writeERKNS0_15FunctionSamplesE'/>
