<def f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='194' ll='206' type='llvm::BasicBlock * llvm::SplitCriticalEdge(llvm::BasicBlock * Src, llvm::BasicBlock * Dst, const llvm::CriticalEdgeSplittingOptions &amp; Options = llvm::CriticalEdgeSplittingOptions())'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='191'>/// If an edge from Src to Dst is critical, split the edge and return true,
/// otherwise return false. This method requires that there be an edge between
/// the two blocks. It updates the analyses passed in the options struct</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2365' u='c' c='_ZN4llvm3GVN18splitCriticalEdgesEPNS_10BasicBlockES2_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp' l='5312' u='c' c='_ZNK12_GLOBAL__N_111LSRInstance13RewriteForPHIEPN4llvm7PHINodeERKNS_6LSRUseERKNS_8LSRFixupERKNS_7FormulaERNS1_12SCEVExpanderERNS1_15SmallVectorImplINS13448949'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SpeculateAroundPHIs.cpp' l='571' u='c' c='_ZL13speculatePHIsN4llvm8ArrayRefIPNS_7PHINodeEEERNS_15SmallPtrSetImplIPNS_11InstructionEEERNS_14SmallSetVectorIPNS_10BasicBlockELj16EEERNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='451' u='c' c='_ZN12_GLOBAL__N_110LoopRotate10rotateLoopEPN4llvm4LoopEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp' l='469' u='c' c='_ZN12_GLOBAL__N_110LoopRotate10rotateLoopEPN4llvm4LoopEb'/>
