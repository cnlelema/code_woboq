<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='726' type='iterator_range&lt;iterator&gt; llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='708'>/// Make an existing internal call edge within a single SCC into a ref
    /// edge.
    ///
    /// Since SourceN and TargetN are part of a single SCC, this SCC may be
    /// split up due to breaking a cycle in the call edges that formed it. If
    /// that happens, then this routine will insert new SCCs into the postorder
    /// list *before* the SCC of TargetN (previously the SCC of both). This
    /// preserves postorder as the TargetN can reach all of the other nodes by
    /// definition of previously being in a single SCC formed by the cycle from
    /// SourceN to TargetN.
    ///
    /// The newly added SCCs are added *immediately* and contiguously
    /// prior to the TargetN SCC and return the range covering the new SCCs in
    /// the RefSCC&apos;s postorder sequence. You can directly iterate the returned
    /// range to observe all of the new SCCs in postorder.
    ///
    /// Note that if SourceN and TargetN are in separate SCCs, the simpler
    /// routine `switchTrivialInternalEdgeToRef` should be used instead.</doc>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='517' u='c' c='_ZN4llvm41updateCGAndAnalysisManagerForFunctionPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultE'/>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='602' u='c' c='_ZN4llvm41updateCGAndAnalysisManagerForFunctionPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultE'/>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='699' ll='884' type='iterator_range&lt;LazyCallGraph::RefSCC::iterator&gt; llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1162' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1264' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_InternalEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1568' u='c' c='_ZN12_GLOBAL__N_144LazyCallGraphTest_InternalCallEdgeToRef_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1577' u='c' c='_ZN12_GLOBAL__N_144LazyCallGraphTest_InternalCallEdgeToRef_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1593' u='c' c='_ZN12_GLOBAL__N_144LazyCallGraphTest_InternalCallEdgeToRef_Test8TestBodyEv'/>
