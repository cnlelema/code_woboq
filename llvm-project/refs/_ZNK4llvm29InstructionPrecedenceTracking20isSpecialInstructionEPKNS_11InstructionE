<dec f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='72' type='bool llvm::InstructionPrecedenceTracking::isSpecialInstruction(const llvm::Instruction * Insn) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='67'>/// A predicate that defines whether or not the instruction \p Insn is
  /// considered special and needs to be tracked. Implementing this method in
  /// children classes allows to implement tracking of implicit control flow,
  /// memory writing instructions or any other kinds of instructions we might
  /// be interested in.</doc>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='67' u='c' c='_ZN4llvm29InstructionPrecedenceTracking4fillEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='84' u='c' c='_ZNK4llvm29InstructionPrecedenceTracking8validateEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='104' u='c' c='_ZN4llvm29InstructionPrecedenceTracking19insertInstructionToEPKNS_11InstructionEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='110' u='c' c='_ZN4llvm29InstructionPrecedenceTracking17removeInstructionEPKNS_11InstructionE'/>
<ovr f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='125' c='_ZNK4llvm27ImplicitControlFlowTracking20isSpecialInstructionEPKNS_11InstructionE'/>
<ovr f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='154' c='_ZNK4llvm19MemoryWriteTracking20isSpecialInstructionEPKNS_11InstructionE'/>
