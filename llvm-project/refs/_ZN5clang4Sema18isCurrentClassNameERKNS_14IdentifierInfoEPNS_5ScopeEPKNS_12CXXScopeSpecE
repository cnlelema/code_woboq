<dec f='llvm/clang/include/clang/Sema/Sema.h' l='5952' type='bool clang::Sema::isCurrentClassName(const clang::IdentifierInfo &amp; II, clang::Scope * S, const clang::CXXScopeSpec * SS = nullptr)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='3140' u='c' c='_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='3182' u='c' c='_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='3336' u='c' c='_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='3411' u='c' c='_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2650' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2691' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='859' u='c' c='_ZN5clang4Sema12ClassifyNameEPNS_5ScopeERNS_12CXXScopeSpecERPNS_14IdentifierInfoENS_14SourceLocationERKNS_5TokenEbPNS_27CorrectionCandidateCallbackE'/>
<def f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='2147' ll='2151' type='bool clang::Sema::isCurrentClassName(const clang::IdentifierInfo &amp; II, clang::Scope * S, const clang::CXXScopeSpec * SS = nullptr)'/>
<doc f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='2143'>/// isCurrentClassName - Determine whether the identifier II is the
/// name of the class type currently being defined. In the case of
/// nested classes, this will only return true if II is the name of
/// the innermost class.</doc>
