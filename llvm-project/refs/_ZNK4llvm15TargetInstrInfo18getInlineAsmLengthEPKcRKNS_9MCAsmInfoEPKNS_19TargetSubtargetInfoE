<dec f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1269' type='unsigned int llvm::TargetInstrInfo::getInlineAsmLength(const char * Str, const llvm::MCAsmInfo &amp; MAI, const llvm::TargetSubtargetInfo * STI = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1267'>/// Measure the specified inline asm to determine an approximation of its
  /// length.</doc>
<def f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='88' ll='124' type='unsigned int llvm::TargetInstrInfo::getInlineAsmLength(const char * Str, const llvm::MCAsmInfo &amp; MAI, const llvm::TargetSubtargetInfo * STI = nullptr) const'/>
<doc f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='74'>/// Measure the specified inline asm to determine an approximation of its
/// length.
/// Comments (which run till the next SeparatorString or newline) do not
/// count as an instruction.
/// Any other non-whitespace text is considered an instruction, with
/// multiple instructions separated by SeparatorString or newlines.
/// Variable-length instructions are not handled here; this function
/// may be overloaded in the target code to do that.
/// We implement a special case of the .space directive which takes only a
/// single integer argument in base 10 that is the size in bytes. This is a
/// restricted form of the GAS directive in that we only interpret
/// simple--i.e. not a logical or arithmetic expression--size values without
/// the optional fill value. This is primarily used for creating arbitrary
/// sized inline asm blocks for testing purposes.</doc>
<use f='llvm/llvm/lib/Target/MSP430/MSP430InstrInfo.cpp' l='314' u='c' c='_ZNK4llvm15MSP430InstrInfo18getInstSizeInBytesERKNS_12MachineInstrE'/>
