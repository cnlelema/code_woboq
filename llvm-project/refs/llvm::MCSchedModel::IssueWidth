<dec f='llvm/llvm/include/llvm/MC/MCSchedule.h' l='256' type='unsigned int'/>
<offset>0</offset>
<doc f='llvm/llvm/include/llvm/MC/MCSchedule.h' l='245'>// IssueWidth is the maximum number of instructions that may be scheduled in
  // the same per-cycle group. This is meant to be a hard in-order constraint
  // (a.k.a. &quot;hazard&quot;). In the GenericScheduler strategy, no more than
  // IssueWidth micro-ops can ever be scheduled in a particular cycle.
  //
  // In practice, IssueWidth is useful to model any bottleneck between the
  // decoder (after micro-op expansion) and the out-of-order reservation
  // stations or the decoder bandwidth itself. If the total number of
  // reservation stations is also a bottleneck, or if any other pipeline stage
  // has a bandwidth limitation, then that can be naturally modeled by adding an
  // out-of-order processor resource.</doc>
<use f='llvm/llvm/include/llvm/CodeGen/TargetSchedule.h' l='95' u='r' c='_ZNK4llvm16TargetSchedModel13getIssueWidthEv'/>
<use f='llvm/llvm/lib/CodeGen/ScoreboardHazardRecognizer.cpp' l='74' u='r' c='_ZN4llvm26ScoreboardHazardRecognizerC1EPKNS_18InstrItineraryDataEPKNS_11ScheduleDAGEPKc'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp' l='313' u='r' c='_ZN4llvm21ResourcePriorityQueue16reserveResourcesEPNS_5SUnitE'/>
<use f='llvm/llvm/lib/CodeGen/TargetSchedule.cpp' l='71' u='r' c='_ZN4llvm16TargetSchedModel4initEPKNS_19TargetSubtargetInfoE'/>
<use f='llvm/llvm/lib/CodeGen/TargetSchedule.cpp' l='77' u='r' c='_ZN4llvm16TargetSchedModel4initEPKNS_19TargetSubtargetInfoE'/>
<use f='llvm/llvm/lib/MC/MCSchedule.cpp' l='106' u='r' c='_ZN4llvm12MCSchedModel23getReciprocalThroughputERKNS_15MCSubtargetInfoERKNS_16MCSchedClassDescE'/>
<use f='llvm/llvm/lib/MC/MCSchedule.cpp' l='119' u='r' c='_ZNK4llvm12MCSchedModel23getReciprocalThroughputERKNS_15MCSubtargetInfoERKNS_11MCInstrInfoERKNS_6MCInstE'/>
