<dec f='llvm/llvm/lib/Target/Lanai/LanaiFrameLowering.h' l='41' type='void llvm::LanaiFrameLowering::emitEpilogue(llvm::MachineFunction &amp; MF, llvm::MachineBasicBlock &amp; MBB) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetFrameLowering.h' l='168' c='_ZNK4llvm19TargetFrameLowering12emitEpilogueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/Target/Lanai/LanaiFrameLowering.cpp' l='178' ll='195' type='void llvm::LanaiFrameLowering::emitEpilogue(llvm::MachineFunction &amp; , llvm::MachineBasicBlock &amp; MBB) const'/>
<doc f='llvm/llvm/lib/Target/Lanai/LanaiFrameLowering.cpp' l='148'>// The function epilogue should not depend on the current stack pointer!
// It should use the frame pointer only.  This is mandatory because
// of alloca; we also take advantage of it to omit stack adjustments
// before returning.
//
// Note that when we go to restore the preserved register values we must
// not try to address their slots by using offsets from the stack pointer.
// That&apos;s because the stack pointer may have been moved during the function
// execution due to a call to alloca().  Rather, we must restore all
// preserved registers via offsets from the frame pointer value.
//
// Note also that when the current frame is being &quot;popped&quot; (by adjusting
// the value of the stack pointer) on function exit, we must (for the
// sake of alloca) set the new value of the stack pointer based upon
// the current value of the frame pointer.  We can&apos;t just add what we
// believe to be the (static) frame size to the stack pointer because
// if we did that, and alloca() had been called during this function,
// we would end up returning *without* having fully deallocated all of
// the space grabbed by alloca.  If that happened, and a function
// containing one or more alloca() calls was called over and over again,
// then the stack would grow without limit!
//
// RET is lowered to
//      ld -4[%fp],%pc  # modify %pc (two delay slots)
// as the return address is in the stack frame and mov to pc is allowed.
// emitEpilogue emits
//      mov %fp,%sp     # restore the stack pointer
//      ld -8[%fp],%fp  # restore the caller&apos;s frame pointer
// before RET and the delay slot filler will move RET such that these
// instructions execute in the delay slots of the load to PC.</doc>
<doc f='llvm/llvm/lib/Target/Lanai/LanaiFrameLowering.cpp' l='178'>/*MF*/</doc>
