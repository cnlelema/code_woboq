<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='309' type='ModulePassManager llvm::PassBuilder::buildModuleSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::PassBuilder::ThinLTOPhase Phase, bool DebugLogging = false)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='293'>/// Construct the core LLVM module canonicalization and simplification
  /// pipeline.
  ///
  /// This pipeline focuses on canonicalizing and simplifying the entire module
  /// of IR. Much like the function simplification pipeline above, it is
  /// suitable to run repeatedly over the IR and is not expected to destroy
  /// important information. It does, however, perform inlining and other
  /// heuristic based simplifications that are not strictly reversible.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.
  ///
  /// \p Phase indicates the current ThinLTO phase.</doc>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='610' ll='793' type='ModulePassManager llvm::PassBuilder::buildModuleSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::PassBuilder::ThinLTOPhase Phase, bool DebugLogging = false)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='994' u='c' c='_ZN4llvm11PassBuilder29buildPerModuleDefaultPipelineENS0_17OptimizationLevelEbb'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1023' u='c' c='_ZN4llvm11PassBuilder34buildThinLTOPreLinkDefaultPipelineENS0_17OptimizationLevelEb'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1074' u='c' c='_ZN4llvm11PassBuilder27buildThinLTODefaultPipelineENS0_17OptimizationLevelEbPKNS_18ModuleSummaryIndexE'/>
