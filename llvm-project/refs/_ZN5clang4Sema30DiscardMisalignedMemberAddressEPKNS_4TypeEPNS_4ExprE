<dec f='llvm/clang/include/clang/Sema/Sema.h' l='11212' type='void clang::Sema::DiscardMisalignedMemberAddress(const clang::Type * T, clang::Expr * E)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='11207'>/// This function checks if the expression is in the sef of potentially
  /// misaligned members and it is converted to some pointer type T with lower
  /// or equal alignment requirements. If so it removes it. This is used when
  /// we do not want to diagnose such misaligned access (e.g. in conversions to
  /// void*).</doc>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='297' u='c' c='_ZN5clang4Sema17BuildCXXNamedCastENS_14SourceLocationENS_3tok9TokenKindEPNS_14TypeSourceInfoEPNS_4ExprENS_11SourceRangeES8_'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='327' u='c' c='_ZN5clang4Sema17BuildCXXNamedCastENS_14SourceLocationENS_3tok9TokenKindEPNS_14TypeSourceInfoEPNS_4ExprENS_11SourceRangeES8_'/>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='340' u='c' c='_ZN5clang4Sema17BuildCXXNamedCastENS_14SourceLocationENS_3tok9TokenKindEPNS_14TypeSourceInfoEPNS_4ExprENS_11SourceRangeES8_'/>
<use f='llvm/clang/lib/Sema/SemaChecking.cpp' l='11469' u='c' c='_ZL23CheckImplicitConversionRN5clang4SemaEPNS_4ExprENS_8QualTypeENS_14SourceLocationEPb'/>
<def f='llvm/clang/lib/Sema/SemaChecking.cpp' l='14239' ll='14256' type='void clang::Sema::DiscardMisalignedMemberAddress(const clang::Type * T, clang::Expr * E)'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='6592' u='c' c='_ZN5clang4Sema13ActOnCastExprEPNS_5ScopeENS_14SourceLocationERNS_10DeclaratorERNS_9OpaquePtrINS_8QualTypeEEES3_PNS_4ExprE'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='7923' u='c' c='_ZN5clang22InitializationSequence7PerformERNS_4SemaERKNS_17InitializedEntityERKNS_18InitializationKindEN4llvm15MutableArrayRefIPNS_4ExprEEEPNS_8QualTypeE'/>
