<dec f='llvm/llvm/include/llvm/CodeGen/MachineInstrBundle.h' l='208' type='llvm::MachineOperandIteratorBase::VirtRegInfo llvm::MachineOperandIteratorBase::analyzeVirtReg(unsigned int Reg, SmallVectorImpl&lt;std::pair&lt;MachineInstr *, unsigned int&gt; &gt; * Ops = nullptr)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineInstrBundle.h' l='200'>/// analyzeVirtReg - Analyze how the current instruction or bundle uses a
  /// virtual register.  This function should not be called after operator++(),
  /// it expects a fresh iterator.
  ///
  /// @param Reg The virtual register to analyze.
  /// @param Ops When set, this vector will receive an (MI, OpNum) entry for
  ///            each operand referring to Reg.
  /// @returns A filled-in RegInfo struct.</doc>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='558' u='c' c='_ZN12_GLOBAL__N_113InlineSpiller16reMaterializeForERN4llvm12LiveIntervalERNS1_12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='1006' u='c' c='_ZN12_GLOBAL__N_113InlineSpiller15spillAroundUsesEj'/>
<def f='llvm/llvm/lib/CodeGen/MachineInstrBundle.cpp' l='284' ll='311' type='MachineOperandIteratorBase::VirtRegInfo llvm::MachineOperandIteratorBase::analyzeVirtReg(unsigned int Reg, SmallVectorImpl&lt;std::pair&lt;MachineInstr *, unsigned int&gt; &gt; * Ops = nullptr)'/>
<doc f='llvm/llvm/lib/CodeGen/MachineInstrBundle.cpp' l='280'>//===----------------------------------------------------------------------===//
// MachineOperand iterator
//===----------------------------------------------------------------------===//</doc>
