<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='572' type='bool llvm::DependenceInfo::isKnownNonNegative(const llvm::SCEV * S, const llvm::Value * Ptr) const'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1044' ll='1061' type='bool llvm::DependenceInfo::isKnownNonNegative(const llvm::SCEV * S, const llvm::Value * Ptr) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3329' u='c' c='_ZN4llvm14DependenceInfo14tryDelinearizeEPNS_11InstructionES2_RNS_15SmallVectorImplINS0_9SubscriptEEE'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3335' u='c' c='_ZN4llvm14DependenceInfo14tryDelinearizeEPNS_11InstructionES2_RNS_15SmallVectorImplINS0_9SubscriptEEE'/>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='569'>/// isKnownNonNegative - Compare to see if S is known not to be negative
    /// Uses the fact that S comes from Ptr, which may be an inbound GEP,
    /// Proving there is no wrapping going on.</doc>
