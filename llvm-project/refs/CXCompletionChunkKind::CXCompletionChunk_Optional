<dec f='llvm/clang/include/clang-c/Index.h' l='5145' type='0'/>
<doc f='llvm/clang/include/clang-c/Index.h' l='5112'>/**
   * A code-completion string that describes &quot;optional&quot; text that
   * could be a part of the template (but is not required).
   *
   * The Optional chunk is the only kind of chunk that has a code-completion
   * string for its representation, which is accessible via
   * \c clang_getCompletionChunkCompletionString(). The code-completion string
   * describes an additional part of the template that is completely optional.
   * For example, optional chunks can be used to describe the placeholders for
   * arguments that match up with defaulted function parameters, e.g. given:
   *
   * \code
   * void f(int x, float y = 3.14, double z = 2.71828);
   * \endcode
   *
   * The code-completion string for this function would contain:
   *   - a TypedText chunk for &quot;f&quot;.
   *   - a LeftParen chunk for &quot;(&quot;.
   *   - a Placeholder chunk for &quot;int x&quot;
   *   - an Optional chunk containing the remaining defaulted arguments, e.g.,
   *       - a Comma chunk for &quot;,&quot;
   *       - a Placeholder chunk for &quot;float y&quot;
   *       - an Optional chunk containing the last defaulted argument:
   *           - a Comma chunk for &quot;,&quot;
   *           - a Placeholder chunk for &quot;double z&quot;
   *   - a RightParen chunk for &quot;)&quot;
   *
   * There are many ways to handle Optional chunks. Two simple approaches are:
   *   - Completely ignore optional chunks, in which case the template for the
   *     function &quot;f&quot; would only include the first parameter (&quot;int x&quot;).
   *   - Fully expand all optional chunks, in which case the template for the
   *     function &quot;f&quot; would have all of the parameters.
   */</doc>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2330' c='clang_getCompletionChunkKindSpelling'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2392' u='r' c='print_completion_string'/>
<use f='llvm/clang/tools/libclang/CIndexCodeCompletion.cpp' l='69' u='r' c='clang_getCompletionChunkKind'/>
