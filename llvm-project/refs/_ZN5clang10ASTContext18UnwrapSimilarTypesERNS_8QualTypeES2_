<dec f='llvm/clang/include/clang/AST/ASTContext.h' l='2430' type='bool clang::ASTContext::UnwrapSimilarTypes(clang::QualType &amp; T1, clang::QualType &amp; T2)'/>
<def f='llvm/clang/lib/AST/ASTContext.cpp' l='5282' ll='5316' type='bool clang::ASTContext::UnwrapSimilarTypes(clang::QualType &amp; T1, clang::QualType &amp; T2)'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='5325' u='c' c='_ZN5clang10ASTContext14hasSimilarTypeENS_8QualTypeES1_'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='5352' u='c' c='_ZN5clang10ASTContext17hasCvrSimilarTypeENS_8QualTypeES1_'/>
<doc f='llvm/clang/lib/AST/ASTContext.cpp' l='5270'>/// Attempt to unwrap two types that may be similar (C++ [conv.qual]).
///
/// If T1 and T2 are both pointer types of the same kind, or both array types
/// with the same bound, unwraps layers from T1 and T2 until a pointer type is
/// unwrapped. Top-level qualifiers on T1 and T2 are ignored.
///
/// This function will typically be called in a loop that successively
/// &quot;unwraps&quot; pointer and pointer-to-member types to compare them at each
/// level.
///
/// \return \c true if a pointer type was unwrapped, \c false if we reached a
/// pair of types that can&apos;t be unwrapped further.</doc>
<use f='llvm/clang/lib/Sema/SemaCast.cpp' l='526' u='c' c='_ZL28unwrapCastAwayConstnessLevelRN5clang10ASTContextERNS_8QualTypeES3_'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='3131' u='c' c='_ZN5clang4Sema25IsQualificationConversionENS_8QualTypeES1_bRb'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='4027' u='c' c='_ZL31CompareQualificationConversionsRN5clang4SemaERKNS_26StandardConversionSequenceES4_'/>
