<dec f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='487' type='bool llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction * QueryInst, const llvm::PHITransAddr &amp; Pointer, const llvm::MemoryLocation &amp; Loc, bool isLoad, llvm::BasicBlock * BB, SmallVectorImpl&lt;llvm::NonLocalDepResult&gt; &amp; Result, DenseMap&lt;llvm::BasicBlock *, llvm::Value *&gt; &amp; Visited, bool SkipFirstBlock = false)'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='964' u='c' c='_ZN4llvm23MemoryDependenceResults28getNonLocalPointerDependencyEPNS_11InstructionERNS_15SmallVectorImplINS_17NonLocalDepResultEEE'/>
<def f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='1092' ll='1478' type='bool llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction * QueryInst, const llvm::PHITransAddr &amp; Pointer, const llvm::MemoryLocation &amp; Loc, bool isLoad, llvm::BasicBlock * StartBB, SmallVectorImpl&lt;llvm::NonLocalDepResult&gt; &amp; Result, DenseMap&lt;llvm::BasicBlock *, llvm::Value *&gt; &amp; Visited, bool SkipFirstBlock = false)'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='1143' u='c' c='_ZN4llvm23MemoryDependenceResults27getNonLocalPointerDepFromBBEPNS_11InstructionERKNS_12PHITransAddrERKNS_14MemoryLocationEbPNS_10BasicBlockERNS_15Sma2824746'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='1162' u='c' c='_ZN4llvm23MemoryDependenceResults27getNonLocalPointerDepFromBBEPNS_11InstructionERKNS_12PHITransAddrERKNS_14MemoryLocationEbPNS_10BasicBlockERNS_15Sma2824746'/>
<use f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='1399' u='c' c='_ZN4llvm23MemoryDependenceResults27getNonLocalPointerDepFromBBEPNS_11InstructionERKNS_12PHITransAddrERKNS_14MemoryLocationEbPNS_10BasicBlockERNS_15Sma2824746'/>
<doc f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='1079'>/// Perform a dependency query based on pointer/pointeesize starting at the end
/// of StartBB.
///
/// Add any clobber/def results to the results vector and keep track of which
/// blocks are visited in &apos;Visited&apos;.
///
/// This has special behavior for the first block queries (when SkipFirstBlock
/// is true).  In this special case, it ignores the contents of the specified
/// block and starts returning dependence info for its predecessors.
///
/// This function returns true on success, or false to indicate that it could
/// not compute dependence information for some reason.  This should be treated
/// as a clobber dependence on the first instruction in the predecessor block.</doc>
