<def f='llvm/clang/include/clang/CodeGen/ConstantInitBuilder.h' l='395' ll='398' type='clang::CodeGen::ConstantInitFuture clang::CodeGen::ConstantAggregateBuilderTemplateBase::finishAndCreateFuture()'/>
<doc f='llvm/clang/include/clang/CodeGen/ConstantInitBuilder.h' l='387'>/// Given that this builder was created by beginning an array or struct
  /// directly on a ConstantInitBuilder, finish the array/struct and
  /// return a future which can be used to install the initializer in
  /// a global later.
  ///
  /// This is useful for allowing a finished initializer to passed to
  /// an API which will build the global.  However, the &quot;future&quot; preserves
  /// a dependency on the original builder; it is an error to pass it aside.</doc>
