<use f='llvm/llvm/include/llvm/IR/Function.h' l='637' u='c' c='_ZN4llvm8Function10deleteBodyEv'/>
<dec f='llvm/llvm/include/llvm/IR/Function.h' l='793' type='void llvm::Function::dropAllReferences()'/>
<doc f='llvm/llvm/include/llvm/IR/Function.h' l='781'>/// dropAllReferences() - This method causes all the subinstructions to &quot;let
  /// go&quot; of all references that they are maintaining.  This allows one to
  /// &apos;delete&apos; a whole module at a time, even though there may be circular
  /// references... first all references are dropped, and all use counts go to
  /// zero.  Then everything is deleted for real.  Note that no operations are
  /// valid on an object that has &quot;dropped all references&quot;, except operator
  /// delete.
  ///
  /// Since no other object in the module can have references into the body of a
  /// function, dropping all references deletes the entire body of the function,
  /// including any contained basic blocks.
  ///</doc>
<use f='llvm/llvm/lib/IR/Function.cpp' l='297' u='c' c='_ZN4llvm8FunctionD1Ev'/>
<def f='llvm/llvm/lib/IR/Function.cpp' l='383' ll='403' type='void llvm::Function::dropAllReferences()'/>
<doc f='llvm/llvm/lib/IR/Function.cpp' l='375'>// dropAllReferences() - This function causes all the subinstructions to &quot;let
// go&quot; of all references that they are maintaining.  This allows one to
// &apos;delete&apos; a whole class at a time, even though there may be circular
// references... first all references are dropped, and all use counts go to
// zero.  Then everything is deleted for real.  Note that no operations are
// valid on an object that has &quot;dropped all references&quot;, except operator
// delete.
//</doc>
<use f='llvm/llvm/lib/IR/Module.cpp' l='441' u='c' c='_ZN4llvm6Module17dropAllReferencesEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='1125' u='c' c='_ZN4llvm11InlinerPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
