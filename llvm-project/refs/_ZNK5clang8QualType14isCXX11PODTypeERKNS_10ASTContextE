<dec f='llvm/clang/include/clang/AST/Type.h' l='802' type='bool clang::QualType::isCXX11PODType(const clang::ASTContext &amp; Context) const'/>
<doc f='llvm/clang/include/clang/AST/Type.h' l='798'>/// Return true if this is a POD type according to the more relaxed rules
  /// of the C++11 standard, regardless of the current compilation&apos;s language.
  /// (C++0x [basic.types]p9). Note that, unlike
  /// CXXRecordDecl::isCXX11StandardLayout, this takes DRs into account.</doc>
<use f='llvm/clang/lib/AST/Type.cpp' l='2177' u='c' c='_ZNK5clang8QualType9isPODTypeERKNS_10ASTContextE'/>
<def f='llvm/clang/lib/AST/Type.cpp' l='2517' ll='2564' type='bool clang::QualType::isCXX11PODType(const clang::ASTContext &amp; Context) const'/>
<doc f='llvm/clang/lib/AST/Type.cpp' l='2514'>// This is effectively the intersection of isTrivialType and
// isStandardLayoutType. We implement it directly to avoid redundant
// conversions from a type to a CXXRecordDecl.</doc>
