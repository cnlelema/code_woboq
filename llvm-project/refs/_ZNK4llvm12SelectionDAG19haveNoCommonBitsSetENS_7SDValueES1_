<dec f='llvm/llvm/include/llvm/CodeGen/SelectionDAG.h' l='1593' type='bool llvm::SelectionDAG::haveNoCommonBitsSet(llvm::SDValue A, llvm::SDValue B) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/SelectionDAG.h' l='1591'>/// Return true if A and B have no common bits set. As an example, this can
  /// allow an &apos;add&apos; to be transformed into an &apos;or&apos;.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='2267' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner12visitADDLikeEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='2413' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner8visitADDEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='5725' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner7visitOREPN4llvm6SDNodeE'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='4185' ll='4189' type='bool llvm::SelectionDAG::haveNoCommonBitsSet(llvm::SDValue A, llvm::SDValue B) const'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='4183'>// FIXME: unify with llvm::haveNoCommonBitsSet.
// FIXME: could also handle masked merge pattern (X &amp; ~M) op (Y &amp; M)</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp' l='581' u='c' c='_ZN12_GLOBAL__N_115ARMDAGToDAGISel15SelectAddLikeOrEPN4llvm6SDNodeENS1_7SDValueERS4_'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp' l='1968' u='c' c='_ZN12_GLOBAL__N_115X86DAGToDAGISel23matchAddressRecursivelyEN4llvm7SDValueERNS_18X86ISelAddressModeEj'/>
<use f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='38928' u='c' c='_ZL16detectAVGPatternN4llvm7SDValueENS_3EVTERNS_12SelectionDAGERKNS_12X86SubtargetERKNS_5SDLocE'/>
