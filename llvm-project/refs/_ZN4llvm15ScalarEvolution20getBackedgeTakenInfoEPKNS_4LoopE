<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1497' type='const llvm::ScalarEvolution::BackedgeTakenInfo &amp; llvm::ScalarEvolution::getBackedgeTakenInfo(const llvm::Loop * L)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1494'>/// Return the BackedgeTakenInfo for the given loop, lazily computing new
  /// values if the loop hasn&apos;t been analyzed yet. The returned result is
  /// guaranteed not to be predicated.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6579' u='c' c='_ZN4llvm15ScalarEvolution12getExitCountEPKNS_4LoopEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6589' u='c' c='_ZN4llvm15ScalarEvolution21getBackedgeTakenCountEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6595' u='c' c='_ZN4llvm15ScalarEvolution24getMaxBackedgeTakenCountEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6599' u='c' c='_ZN4llvm15ScalarEvolution29isBackedgeTakenCountMaxOrZeroEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6614' u='c' c='_ZN4llvm15ScalarEvolution30getPredicatedBackedgeTakenInfoEPKNS_4LoopE'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6629' ll='6730' type='const ScalarEvolution::BackedgeTakenInfo &amp; llvm::ScalarEvolution::getBackedgeTakenInfo(const llvm::Loop * L)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9434' u='c' c='_ZN4llvm15ScalarEvolution27isLoopBackedgeGuardedByCondEPKNS_4LoopENS_7CmpInst9PredicateEPKNS_4SCEVES8_'/>
