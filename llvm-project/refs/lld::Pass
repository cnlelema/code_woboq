<def f='llvm/lld/include/lld/Core/Pass.h' l='28' ll='38'/>
<size>8</size>
<doc f='llvm/lld/include/lld/Core/Pass.h' l='18'>/// Once the core linking is done (which resolves references, coalesces atoms
/// and produces a complete Atom graph), the linker runs a series of passes
/// on the Atom graph. The graph is modeled as a File, which means the pass
/// has access to all the atoms and to File level attributes. Each pass does
/// a particular transformation to the Atom graph or to the File attributes.
///
/// This is the abstract base class for all passes.  A Pass does its
/// actual work in it perform() method.  It can iterator over Atoms in the
/// graph using the *begin()/*end() atom iterator of the File.  It can add
/// new Atoms to the graph using the File&apos;s addAtom() method.</doc>
<fun r='_ZN3lld4PassD1Ev'/>
<fun r='_ZN3lld4Pass7performERNS_10SimpleFileE'/>
<fun r='_ZN3lld4PassC1Ev'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/CompactUnwindPass.cpp' l='273' c='lld::mach_o::CompactUnwindPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/GOTPass.cpp' l='91' c='lld::mach_o::GOTPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/LayoutPass.h' l='32' c='lld::mach_o::LayoutPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/ObjCPass.cpp' l='96' c='lld::mach_o::ObjCPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/ShimPass.cpp' l='40' c='lld::mach_o::ShimPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/StubsPass.cpp' l='208' c='lld::mach_o::StubsPass'/>
<ovr f='llvm/lld/lib/ReaderWriter/MachO/TLVPass.cpp' l='65' c='lld::mach_o::TLVPass'/>
