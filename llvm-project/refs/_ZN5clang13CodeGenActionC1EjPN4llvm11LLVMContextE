<dec f='llvm/clang/include/clang/CodeGen/CodeGenAction.h' l='59' type='void clang::CodeGenAction::CodeGenAction(unsigned int _Act, llvm::LLVMContext * _VMContext = nullptr)'/>
<doc f='llvm/clang/include/clang/CodeGen/CodeGenAction.h' l='56'>/// Create a new code generation action.  If the optional \p _VMContext
  /// parameter is supplied, the action uses it without taking ownership,
  /// otherwise it creates a fresh LLVM context and takes ownership.</doc>
<def f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='833' ll='835' type='void clang::CodeGenAction::CodeGenAction(unsigned int _Act, llvm::LLVMContext * _VMContext = nullptr)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1089' u='c' c='_ZN5clang18EmitAssemblyActionC1EPN4llvm11LLVMContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1093' u='c' c='_ZN5clang12EmitBCActionC1EPN4llvm11LLVMContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1097' u='c' c='_ZN5clang14EmitLLVMActionC1EPN4llvm11LLVMContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1101' u='c' c='_ZN5clang18EmitLLVMOnlyActionC1EPN4llvm11LLVMContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1105' u='c' c='_ZN5clang21EmitCodeGenOnlyActionC1EPN4llvm11LLVMContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1109' u='c' c='_ZN5clang13EmitObjActionC1EPN4llvm11LLVMContextE'/>
