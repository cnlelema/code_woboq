<dec f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.h' l='88' type='unsigned int llvm::Mips16InstrInfo::loadImmediate(unsigned int FrameReg, int64_t Imm, llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator II, const llvm::DebugLoc &amp; DL, unsigned int &amp; NewImm) const'/>
<doc f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.h' l='85'>/// Emit a series of instructions to load an immediate.
  // This is to adjust some FrameReg. We return the new register to be used
  // in place of FrameReg and the adjusted immediate field (&amp;NewImm)</doc>
<def f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.cpp' l='325' ll='436' type='unsigned int llvm::Mips16InstrInfo::loadImmediate(unsigned int FrameReg, int64_t Imm, llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator II, const llvm::DebugLoc &amp; DL, unsigned int &amp; NewImm) const'/>
<doc f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.cpp' l='323'>/// This function generates the sequence of instructions needed to get the
/// result of adding register REG and immediate IMM.</doc>
<use f='llvm/llvm/lib/Target/Mips/Mips16RegisterInfo.cpp' l='141' u='c' c='_ZNK4llvm18Mips16RegisterInfo11eliminateFIENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEEjimlPNS_12RegScavengerE'/>
