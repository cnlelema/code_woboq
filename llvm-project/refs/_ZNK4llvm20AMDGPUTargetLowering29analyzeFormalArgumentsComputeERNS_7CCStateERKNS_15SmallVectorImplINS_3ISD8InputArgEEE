<dec f='llvm/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.h' l='140' type='void llvm::AMDGPUTargetLowering::analyzeFormalArgumentsCompute(llvm::CCState &amp; State, const SmallVectorImpl&lt;ISD::InputArg&gt; &amp; Ins) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp' l='949' ll='1058' type='void llvm::AMDGPUTargetLowering::analyzeFormalArgumentsCompute(llvm::CCState &amp; State, const SmallVectorImpl&lt;ISD::InputArg&gt; &amp; Ins) const'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp' l='923'>/// The SelectionDAGBuilder will automatically promote function arguments
/// with illegal types.  However, this does not work for the AMDGPU targets
/// since the function arguments are stored in memory as these illegal types.
/// In order to handle this properly we need to get the original types sizes
/// from the LLVM IR Function and fixup the ISD:InputArg values before
/// passing them to AnalyzeFormalArguments()

/// When the SelectionDAGBuilder computes the Ins, it takes care of splitting
/// input values across multiple registers.  Each item in the Ins array
/// represents a single value that will be stored in registers.  Ins[x].VT is
/// the value type of the value that will be stored in the register, so
/// whatever SDNode we lower the argument to needs to be this type.
///
/// In order to correctly lower the arguments we need to know the size of each
/// argument.  Since Ins[x].VT gives us the size of the register that will
/// hold the value, we need to look at Ins[x].ArgVT to see the &apos;real&apos; type
/// for the orignal function argument so that we can deduce the correct memory
/// type to use for Ins[x].  In most cases the correct memory type will be
/// Ins[x].ArgVT.  However, this will not always be the case.  If, for example,
/// we have a kernel argument of type v8i8, this argument will be split into
/// 8 parts and each part will be represented by its own item in the Ins array.
/// For each part the Ins[x].ArgVT will be the v8i8, which is the full type of
/// the argument before it was split.  From this, we deduce that the memory type
/// for each individual part is i8.  We pass the memory type as LocVT to the
/// calling convention analysis function and the register type (Ins[x].VT) as
/// the ValVT.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp' l='1593' u='c' c='_ZNK4llvm18R600TargetLowering20LowerFormalArgumentsENS_7SDValueEjbRKNS_15SmallVectorImplINS_3ISD8InputArgEEERKNS_5SDLocERNS_12SelectionDAGERNS2_IS1_EE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='2003' u='c' c='_ZNK4llvm16SITargetLowering20LowerFormalArgumentsENS_7SDValueEjbRKNS_15SmallVectorImplINS_3ISD8InputArgEEERKNS_5SDLocERNS_12SelectionDAGERNS2_IS1_EE'/>
