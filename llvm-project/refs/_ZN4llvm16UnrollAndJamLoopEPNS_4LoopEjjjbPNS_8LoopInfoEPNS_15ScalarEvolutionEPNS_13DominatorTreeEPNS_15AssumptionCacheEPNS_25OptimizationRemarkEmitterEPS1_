<dec f='llvm/llvm/include/llvm/Transforms/Utils/UnrollLoop.h' l='103' type='llvm::LoopUnrollResult llvm::UnrollAndJamLoop(llvm::Loop * L, unsigned int Count, unsigned int TripCount, unsigned int TripMultiple, bool UnrollRemainder, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE, llvm::DominatorTree * DT, llvm::AssumptionCache * AC, llvm::OptimizationRemarkEmitter * ORE, llvm::Loop ** EpilogueLoop = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollAndJamPass.cpp' l='388' u='c' c='_ZL21tryToUnrollAndJamLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_147069670'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='173' ll='585' type='llvm::LoopUnrollResult llvm::UnrollAndJamLoop(llvm::Loop * L, unsigned int Count, unsigned int TripCount, unsigned int TripMultiple, bool UnrollRemainder, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE, llvm::DominatorTree * DT, llvm::AssumptionCache * AC, llvm::OptimizationRemarkEmitter * ORE, llvm::Loop ** EpilogueLoop = nullptr)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='139'>/*
  This method performs Unroll and Jam. For a simple loop like:
  for (i = ..)
    Fore(i)
    for (j = ..)
      SubLoop(i, j)
    Aft(i)

  Instead of doing normal inner or outer unrolling, we do:
  for (i = .., i+=2)
    Fore(i)
    Fore(i+1)
    for (j = ..)
      SubLoop(i, j)
      SubLoop(i+1, j)
    Aft(i)
    Aft(i+1)

  So the outer loop is essetially unrolled and then the inner loops are fused
  (&quot;jammed&quot;) together into a single loop. This can increase speed when there
  are loads in SubLoop that are invariant to i, as they become shared between
  the now jammed inner loops.

  We do this by spliting the blocks in the loop into Fore, Subloop and Aft.
  Fore blocks are those before the inner loop, Aft are those after. Normal
  Unroll code is used to copy each of these sets of blocks and the results are
  combined together into the final form above.

  isSafeToUnrollAndJam should be used prior to calling this to make sure the
  unrolling will be valid. Checking profitablility is also advisable.

  If EpilogueLoop is non-null, it receives the epilogue loop (if it was
  necessary to create one and not fully unrolled).
*/</doc>
