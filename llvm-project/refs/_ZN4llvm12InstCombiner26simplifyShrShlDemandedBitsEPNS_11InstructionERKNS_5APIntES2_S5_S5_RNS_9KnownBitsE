<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='788' type='llvm::Value * llvm::InstCombiner::simplifyShrShlDemandedBits(llvm::Instruction * Shr, const llvm::APInt &amp; ShrOp1, llvm::Instruction * Shl, const llvm::APInt &amp; ShlOp1, const llvm::APInt &amp; DemandedMask, llvm::KnownBits &amp; Known)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='786'>/// Helper routine of SimplifyDemandedUseBits. It tries to simplify demanded
  /// bit for &quot;r1 = shr x, c1; r2 = shl r1, c2&quot; instruction sequence.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp' l='471' u='c' c='_ZN4llvm12InstCombiner23SimplifyDemandedUseBitsEPNS_5ValueENS_5APIntERNS_9KnownBitsEjPNS_11InstructionE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp' l='903' ll='965' type='llvm::Value * llvm::InstCombiner::simplifyShrShlDemandedBits(llvm::Instruction * Shr, const llvm::APInt &amp; ShrOp1, llvm::Instruction * Shl, const llvm::APInt &amp; ShlOp1, const llvm::APInt &amp; DemandedMask, llvm::KnownBits &amp; Known)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp' l='886'>/// Helper routine of SimplifyDemandedUseBits. It tries to simplify
/// &quot;E1 = (X lsr C1) &lt;&lt; C2&quot;, where the C1 and C2 are constant, into
/// &quot;E2 = X &lt;&lt; (C2 - C1)&quot; or &quot;E2 = X &gt;&gt; (C1 - C2)&quot;, depending on the sign
/// of &quot;C2-C1&quot;.
///
/// Suppose E1 and E2 are generally different in bits S={bm, bm+1,
/// ..., bn}, without considering the specific value X is holding.
/// This transformation is legal iff one of following conditions is hold:
///  1) All the bit in S are 0, in this case E1 == E2.
///  2) We don&apos;t care those bits in S, per the input DemandedMask.
///  3) Combination of 1) and 2). Some bits in S are 0, and we don&apos;t care the
///     rest bits.
///
/// Currently we only test condition 2).
///
/// As with SimplifyDemandedUseBits, it returns NULL if the simplification was
/// not successful.</doc>
