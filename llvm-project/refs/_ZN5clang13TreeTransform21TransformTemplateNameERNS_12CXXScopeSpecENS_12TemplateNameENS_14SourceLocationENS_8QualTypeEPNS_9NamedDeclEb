<dec f='llvm/clang/lib/Sema/TreeTransform.h' l='530' type='clang::TemplateName clang::TreeTransform::TransformTemplateName(clang::CXXScopeSpec &amp; SS, clang::TemplateName Name, clang::SourceLocation NameLoc, clang::QualType ObjectType = clang::QualType(), clang::NamedDecl * FirstQualifierInScope = nullptr, bool AllowInjectedClassName = false)'/>
<def f='llvm/clang/lib/Sema/TreeTransform.h' l='3803' ll='3892' type='clang::TemplateName clang::TreeTransform::TransformTemplateName(clang::CXXScopeSpec &amp; SS, clang::TemplateName Name, clang::SourceLocation NameLoc, clang::QualType ObjectType = clang::QualType(), clang::NamedDecl * FirstQualifierInScope = nullptr, bool AllowInjectedClassName = false)'/>
<doc f='llvm/clang/lib/Sema/TreeTransform.h' l='509'>/// Transform the given template name.
  ///
  /// \param SS The nested-name-specifier that qualifies the template
  /// name. This nested-name-specifier must already have been transformed.
  ///
  /// \param Name The template name to transform.
  ///
  /// \param NameLoc The source location of the template name.
  ///
  /// \param ObjectType If we&apos;re translating a template name within a member
  /// access expression, this is the type of the object whose member template
  /// is being referenced.
  ///
  /// \param FirstQualifierInScope If the first part of a nested-name-specifier
  /// also refers to a name within the current (lexical) scope, this is the
  /// declaration it refers to.
  ///
  /// By default, transforms the template name by transforming the declarations
  /// and nested-name-specifiers that occur within the template name.
  /// Subclasses may override this function to provide alternate behavior.</doc>
