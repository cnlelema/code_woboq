<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='372' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/Transforms/Scalar/LoopSink.h' l='33' ll='36'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar/LoopSink.h' l='22'>/// A pass that does profile-guided sinking of instructions into loops.
///
/// This is a function pass as it shouldn&apos;t be composed into any kind of
/// unified loop pass pipeline. The goal of it is to sink code into loops that
/// is loop invariant but only required within the loop body when doing so
/// reduces the global expected dynamic frequency with which it executes.
/// A classic example is an extremely cold branch within a loop body.
///
/// We do this as a separate pass so that during normal optimization all
/// invariant operations can be held outside the loop body to simplify
/// fundamental analyses and transforms of the loop.</doc>
<fun r='_ZN4llvm12LoopSinkPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
