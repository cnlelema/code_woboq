<def f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h' l='31' type='llvm::Error llvm::codeview::TypeVisitorCallbacks::visitTypeBegin(CVType &amp; Record)'/>
<ovr f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeDeserializer.h' l='67' c='_ZN4llvm8codeview16TypeDeserializer14visitTypeBeginERNS0_8CVRecordINS0_12TypeLeafKindEEE'/>
<doc f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h' l='24'>/// Paired begin/end actions for all types. Receives all record data,
  /// including the fixed-length record prefix.  visitTypeBegin() should return
  /// the type of the Record, or an error if it cannot be determined.  Exactly
  /// one of the two visitTypeBegin methods will be called, depending on whether
  /// records are being visited sequentially or randomly.  An implementation
  /// should be prepared to handle both (or assert if it can&apos;t handle random
  /// access visitation).</doc>
<ovr f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbackPipeline.h' l='41' c='_ZN4llvm8codeview27TypeVisitorCallbackPipeline14visitTypeBeginERNS0_8CVRecordINS0_12TypeLeafKindEEE'/>
<use f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbackPipeline.h' l='43' u='c' c='_ZN4llvm8codeview27TypeVisitorCallbackPipeline14visitTypeBeginERNS0_8CVRecordINS0_12TypeLeafKindEEE'/>
<use f='llvm/llvm/lib/DebugInfo/CodeView/CVTypeVisitor.cpp' l='131' u='c' c='_ZN12_GLOBAL__N_113CVTypeVisitor15visitTypeRecordERN4llvm8codeview8CVRecordINS2_12TypeLeafKindEEE'/>
<ovr f='llvm/llvm/lib/DebugInfo/CodeView/RecordName.cpp' l='49' c='_ZN12_GLOBAL__N_116TypeNameComputer14visitTypeBeginERN4llvm8codeview8CVRecordINS2_12TypeLeafKindEEE'/>
<ovr f='llvm/llvm/lib/DebugInfo/CodeView/TypeDumpVisitor.cpp' l='169' c='_ZN4llvm8codeview15TypeDumpVisitor14visitTypeBeginERNS0_8CVRecordINS0_12TypeLeafKindEEE'/>
<ovr f='llvm/llvm/lib/DebugInfo/CodeView/TypeRecordMapping.cpp' l='83' c='_ZN4llvm8codeview17TypeRecordMapping14visitTypeBeginERNS0_8CVRecordINS0_12TypeLeafKindEEE'/>
