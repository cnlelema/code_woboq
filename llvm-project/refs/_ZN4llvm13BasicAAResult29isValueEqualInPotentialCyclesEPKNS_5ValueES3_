<dec f='llvm/llvm/include/llvm/Analysis/BasicAliasAnalysis.h' l='193' type='bool llvm::BasicAAResult::isValueEqualInPotentialCycles(const llvm::Value * V1, const llvm::Value * V2)'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1737' u='c' c='_ZN4llvm13BasicAAResult10aliasCheckEPKNS_5ValueENS_12LocationSizeENS_9AAMDNodesES3_S4_S5_RNS_11AAQueryInfoES3_S3_'/>
<def f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1890' ll='1913' type='bool llvm::BasicAAResult::isValueEqualInPotentialCycles(const llvm::Value * V, const llvm::Value * V2)'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1933' u='c' c='_ZN4llvm13BasicAAResult18GetIndexDifferenceERNS_15SmallVectorImplINS0_16VariableGEPIndexEEERKS3_'/>
<use f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1990' u='c' c='_ZN4llvm13BasicAAResult23constantOffsetHeuristicERKNS_15SmallVectorImplINS0_16VariableGEPIndexEEENS_12LocationSizeES6_NS_5APIntEPNS_15AssumptionCacheEPNS_13DominatorTreeE'/>
<doc f='llvm/llvm/lib/Analysis/BasicAliasAnalysis.cpp' l='1883'>/// Check whether two Values can be considered equivalent.
///
/// In addition to pointer equivalence of \p V1 and \p V2 this checks whether
/// they can not be part of a cycle in the value graph by looking at all
/// visited phi nodes an making sure that the phis cannot reach the value. We
/// have to do this because we are looking through phi nodes (That is we say
/// noalias(V, phi(VA, VB)) if noalias(V, VA) and noalias(V, VB).</doc>
