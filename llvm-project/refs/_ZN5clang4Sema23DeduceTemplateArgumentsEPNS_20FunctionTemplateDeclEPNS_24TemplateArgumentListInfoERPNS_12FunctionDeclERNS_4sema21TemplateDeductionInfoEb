<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7281' type='clang::Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::FunctionDecl *&amp; Specialization, sema::TemplateDeductionInfo &amp; Info, bool IsAddressOfFunction = false)'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='11637' u='c' c='_ZN5clang4Sema43ResolveSingleFunctionTemplateSpecializationEPNS_12OverloadExprEbPNS_14DeclAccessPairE'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='3526' u='c' c='_ZL27ResolveOverloadForDeductionRN5clang4SemaEPNS_21TemplateParameterListEPNS_4ExprENS_8QualTypeEb'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4272' ll='4280' type='Sema::TemplateDeductionResult clang::Sema::DeduceTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::FunctionDecl *&amp; Specialization, clang::sema::TemplateDeductionInfo &amp; Info, bool IsAddressOfFunction = false)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4248'>/// Deduce template arguments for a function template when there is
/// nothing to deduce against (C++0x [temp.arg.explicit]p3).
///
/// \param FunctionTemplate the function template for which we are performing
/// template argument deduction.
///
/// \param ExplicitTemplateArgs the explicitly-specified template
/// arguments.
///
/// \param Specialization if template argument deduction was successful,
/// this will be set to the function template specialization produced by
/// template argument deduction.
///
/// \param Info the argument will be updated to provide additional information
/// about template argument deduction.
///
/// \param IsAddressOfFunction If \c true, we are deducing as part of taking
/// the address of a function template in a context where we do not have a
/// target type, per [over.over]. If \c false, we are looking up a function
/// template specialization based on its signature, which only happens when
/// deducing a function parameter type from an argument that is a template-id
/// naming a function template specialization.
///
/// \returns the result of template argument deduction.</doc>
