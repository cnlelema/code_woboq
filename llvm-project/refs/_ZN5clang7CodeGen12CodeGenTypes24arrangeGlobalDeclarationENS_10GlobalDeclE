<dec f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='191' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeGlobalDeclaration(clang::GlobalDecl GD)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='171'>// The arrangement methods are split into three families:
  //   - those meant to drive the signature and prologue/epilogue
  //     of a function declaration or definition,
  //   - those meant for the computation of the LLVM type for an abstract
  //     appearance of a function, and
  //   - those meant for performing the IR-generation of a call.
  // They differ mainly in how they deal with optional (i.e. variadic)
  // arguments, as well as unprototyped functions.
  //
  // Key points:
  // - The CGFunctionInfo for emitting a specific call site must include
  //   entries for the optional arguments.
  // - The function type used at the call site must reflect the formal
  //   signature of the declaration being called, or else the call will
  //   go awry.
  // - For the most part, unprototyped functions are called by casting to
  //   a formal signature inferred from the specific argument types used
  //   at the call-site.  However, some targets (e.g. x86-64) screw with
  //   this for compatibility reasons.</doc>
<def f='llvm/clang/lib/CodeGen/CGCall.cpp' l='521' ll='531' type='const clang::CodeGen::CGFunctionInfo &amp; clang::CodeGen::CodeGenTypes::arrangeGlobalDeclaration(clang::GlobalDecl GD)'/>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='1596' u='c' c='_ZN5clang7CodeGen12CodeGenTypes15GetFunctionTypeENS_10GlobalDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGVTables.cpp' l='502' u='c' c='_ZN5clang7CodeGen14CodeGenVTables14maybeEmitThunkENS_10GlobalDeclERKNS_9ThunkInfoEb'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='1907' u='c' c='_ZN5clang7CodeGen13CodeGenModule21SetFunctionAttributesENS_10GlobalDeclEPN4llvm8FunctionEbb'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='2570' u='c' c='_ZN5clang7CodeGen13CodeGenModule10EmitGlobalENS_10GlobalDeclE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='2899' u='c' c='_ZN5clang7CodeGen13CodeGenModule25emitMultiVersionFunctionsEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='3607' u='c' c='_ZN5clang7CodeGen13CodeGenModule15GetAddrOfGlobalENS_10GlobalDeclENS0_15ForDefinition_tE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='4417' u='c' c='_ZN5clang7CodeGen13CodeGenModule28EmitGlobalFunctionDefinitionENS_10GlobalDeclEPN4llvm11GlobalValueE'/>
