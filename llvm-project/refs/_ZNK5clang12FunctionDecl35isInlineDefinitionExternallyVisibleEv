<dec f='llvm/clang/include/clang/AST/Decl.h' l='2385' type='bool clang::FunctionDecl::isInlineDefinitionExternallyVisible() const'/>
<use f='llvm/clang/lib/AST/ASTContext.cpp' l='9937' u='c' c='_ZL26basicGVALinkageForFunctionRKN5clang10ASTContextEPKNS_12FunctionDeclE'/>
<def f='llvm/clang/lib/AST/Decl.cpp' l='3337' ll='3382' type='bool clang::FunctionDecl::isInlineDefinitionExternallyVisible() const'/>
<doc f='llvm/clang/lib/AST/Decl.cpp' l='3320'>/// For an inline function definition in C, or for a gnu_inline function
/// in C++, determine whether the definition will be externally visible.
///
/// Inline function definitions are always available for inlining optimizations.
/// However, depending on the language dialect, declaration specifiers, and
/// attributes, the definition of an inline function may or may not be
/// &quot;externally&quot; visible to other translation units in the program.
///
/// In C99, inline definitions are not externally visible by default. However,
/// if even one of the global-scope declarations is marked &quot;extern inline&quot;, the
/// inline definition becomes externally visible (C99 6.7.4p6).
///
/// In GNU89 mode, or if the gnu_inline attribute is attached to the function
/// definition, we use the GNU semantics for inline, which are nearly the
/// opposite of C99 semantics. In particular, &quot;inline&quot; by itself will create
/// an externally visible symbol, but &quot;extern inline&quot; will not create an
/// externally visible symbol.</doc>
