<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='111' ll='112' type='void clang::threadSafety::ThreadSafetyHandler::handleUnmatchedUnlock(llvm::StringRef Kind, Name LockName, clang::SourceLocation Loc)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='1002' u='c' c='_ZNK12_GLOBAL__N_123ScopedLockableFactEntry6unlockERNS_7FactSetERNS_11FactManagerERKN5clang12threadSafety14CapabilityExprENS5_14SourceLocationEPNS6_1916055523'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='1331' u='c' c='_ZN12_GLOBAL__N_120ThreadSafetyAnalyzer10removeLockERNS_7FactSetERKN5clang12threadSafety14CapabilityExprENS3_14SourceLocationEbNS4_8LockKindEN4llvm9StringRefE'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='105'>/// Warn about unlock function calls that do not have a prior matching lock
  /// expression.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param LockName -- A StringRef name for the lock expression, to be printed
  /// in the error message.
  /// \param Loc -- The SourceLocation of the Unlock</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1680' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter21handleUnmatchedUnlockEN4llvm9StringRefES4_NS_14SourceLocationE'/>
