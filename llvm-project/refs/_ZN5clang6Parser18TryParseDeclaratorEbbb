<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2351' type='clang::Parser::TPResult clang::Parser::TryParseDeclarator(bool mayBeAbstract, bool mayHaveIdentifier = true, bool mayHaveDirectInit = false)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='2664' u='c' c='_ZN5clang6Parser16ParseImplicitIntERNS_8DeclSpecEPNS_12CXXScopeSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextERNS0_25Parse1090808'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5860' u='c' c='_ZN5clang6Parser21ParseDirectDeclaratorERNS_10DeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='297' u='c' c='_ZN5clang6Parser26TryParseInitDeclaratorListEv'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='482' u='c' c='_ZN5clang6Parser40isCXXConditionDeclarationOrInitStatementEbb'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='573' u='c' c='_ZN5clang6Parser11isCXXTypeIdENS0_25TentativeCXXTypeIdContextERb'/>
<def f='llvm/clang/lib/Parse/ParseTentative.cpp' l='953' ll='1043' type='Parser::TPResult clang::Parser::TryParseDeclarator(bool mayBeAbstract, bool mayHaveIdentifier = true, bool mayHaveDirectInit = false)'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='1001' u='c' c='_ZN5clang6Parser18TryParseDeclaratorEbbb'/>
<use f='llvm/clang/lib/Parse/ParseTentative.cpp' l='1956' u='c' c='_ZN5clang6Parser34TryParseParameterDeclarationClauseEPbb'/>
<doc f='llvm/clang/lib/Parse/ParseTentative.cpp' l='900'>///         declarator:
///           direct-declarator
///           ptr-operator declarator
///
///         direct-declarator:
///           declarator-id
///           direct-declarator &apos;(&apos; parameter-declaration-clause &apos;)&apos;
///                 cv-qualifier-seq[opt] exception-specification[opt]
///           direct-declarator &apos;[&apos; constant-expression[opt] &apos;]&apos;
///           &apos;(&apos; declarator &apos;)&apos;
/// [GNU]     &apos;(&apos; attributes declarator &apos;)&apos;
///
///         abstract-declarator:
///           ptr-operator abstract-declarator[opt]
///           direct-abstract-declarator
///
///         direct-abstract-declarator:
///           direct-abstract-declarator[opt]
///                 &apos;(&apos; parameter-declaration-clause &apos;)&apos; cv-qualifier-seq[opt]
///                 exception-specification[opt]
///           direct-abstract-declarator[opt] &apos;[&apos; constant-expression[opt] &apos;]&apos;
///           &apos;(&apos; abstract-declarator &apos;)&apos;
/// [C++0x]   ...
///
///         ptr-operator:
///           &apos;*&apos; cv-qualifier-seq[opt]
///           &apos;&amp;&apos;
/// [C++0x]   &apos;&amp;&amp;&apos;                                                        [TODO]
///           &apos;::&apos;[opt] nested-name-specifier &apos;*&apos; cv-qualifier-seq[opt]
///
///         cv-qualifier-seq:
///           cv-qualifier cv-qualifier-seq[opt]
///
///         cv-qualifier:
///           &apos;const&apos;
///           &apos;volatile&apos;
///
///         declarator-id:
///           &apos;...&apos;[opt] id-expression
///
///         id-expression:
///           unqualified-id
///           qualified-id                                                [TODO]
///
///         unqualified-id:
///           identifier
///           operator-function-id
///           conversion-function-id
///           literal-operator-id
///           &apos;~&apos; class-name                                              [TODO]
///           &apos;~&apos; decltype-specifier                                      [TODO]
///           template-id                                                 [TODO]
///</doc>
