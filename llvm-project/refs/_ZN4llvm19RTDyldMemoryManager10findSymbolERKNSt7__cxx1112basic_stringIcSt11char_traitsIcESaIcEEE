<inh f='llvm/llvm/include/llvm/ExecutionEngine/JITSymbol.h' l='382' c='_ZN4llvm23LegacyJITSymbolResolver10findSymbolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<def f='llvm/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h' l='100' ll='102' type='llvm::JITSymbol llvm::RTDyldMemoryManager::findSymbol(const std::string &amp; Name)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h' l='89'>/// This method returns a RuntimeDyld::SymbolInfo for the specified function
  /// or variable. It is used to resolve symbols during module linking.
  ///
  /// By default this falls back on the legacy lookup method:
  /// &apos;getSymbolAddress&apos;. The address returned by getSymbolAddress is treated as
  /// a strong, exported symbol, consistent with historical treatment by
  /// RuntimeDyld.
  ///
  /// Clients writing custom RTDyldMemoryManagers are encouraged to override
  /// this method and return a SymbolInfo with the flags set correctly. This is
  /// necessary for RuntimeDyld to correctly handle weak and non-exported symbols.</doc>
<ovr f='llvm/llvm/tools/lli/RemoteJITUtils.h' l='136' c='_ZN4llvm23ForwardingMemoryManager10findSymbolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<ovr f='llvm/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp' l='209' c='_ZN20TrivialMemoryManager10findSymbolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp' l='215' u='c' c='_ZN20TrivialMemoryManager10findSymbolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
