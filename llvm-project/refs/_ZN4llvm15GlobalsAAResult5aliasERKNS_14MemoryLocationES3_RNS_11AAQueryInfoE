<dec f='llvm/llvm/include/llvm/Analysis/GlobalsModRef.h' l='87' type='llvm::AliasResult llvm::GlobalsAAResult::alias(const llvm::MemoryLocation &amp; LocA, const llvm::MemoryLocation &amp; LocB, llvm::AAQueryInfo &amp; AAQI)'/>
<doc f='llvm/llvm/include/llvm/Analysis/GlobalsModRef.h' l='84'>//------------------------------------------------
  // Implement the AliasAnalysis API
  //</doc>
<def f='llvm/llvm/lib/Analysis/GlobalsModRef.cpp' l='808' ll='886' type='llvm::AliasResult llvm::GlobalsAAResult::alias(const llvm::MemoryLocation &amp; LocA, const llvm::MemoryLocation &amp; LocB, llvm::AAQueryInfo &amp; AAQI)'/>
<use f='llvm/llvm/lib/Analysis/GlobalsModRef.cpp' l='906' u='c' c='_ZN4llvm15GlobalsAAResult24getModRefInfoForArgumentEPKNS_8CallBaseEPKNS_11GlobalValueERNS_11AAQueryInfoE'/>
<doc f='llvm/llvm/lib/Analysis/GlobalsModRef.cpp' l='805'>/// alias - If one of the pointers is to a global that we are tracking, and the
/// other is some random pointer, we know there cannot be an alias, because the
/// address of the global isn&apos;t taken.</doc>
