<dec f='llvm/llvm/lib/ExecutionEngine/Interpreter/Interpreter.h' l='195' type='void llvm::Interpreter::SwitchToNewBasicBlock(llvm::BasicBlock * Dest, llvm::ExecutionContext &amp; SF)'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='910' u='c' c='_ZN4llvm11Interpreter30popStackAndReturnValueToCallerEPNS_4TypeENS_12GenericValueE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='944' u='c' c='_ZN4llvm11Interpreter15visitBranchInstERNS_10BranchInstE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='963' u='c' c='_ZN4llvm11Interpreter15visitSwitchInstERNS_10SwitchInstE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='969' u='c' c='_ZN4llvm11Interpreter19visitIndirectBrInstERNS_14IndirectBrInstE'/>
<def f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='983' ll='1009' type='void llvm::Interpreter::SwitchToNewBasicBlock(llvm::BasicBlock * Dest, llvm::ExecutionContext &amp; SF)'/>
<doc f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='973'>// SwitchToNewBasicBlock - This method is used to jump to a new basic block.
// This function handles the actual updating of block and instruction iterators
// as well as execution of all of the PHI nodes in the destination block.
//
// This method does this because all of the PHI nodes must be executed
// atomically, reading their inputs before any of the results are updated.  Not
// doing this can cause problems if the PHI nodes depend on other PHI nodes for
// their inputs.  If the input PHI node is updated before it is read, incorrect
// results can happen.  Thus we use a two phase approach.
//</doc>
<doc f='llvm/llvm/lib/ExecutionEngine/Interpreter/Interpreter.h' l='191'>// SwitchToNewBasicBlock - Start execution in a new basic block and run any
  // PHI nodes in the top of the block.  This is used for intraprocedural
  // control flow.
  //</doc>
