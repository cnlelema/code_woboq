<dec f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1345' type='void clang::Preprocessor::EnableBacktrackAtThisPos()'/>
<doc f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1332'>/// From the point that this method is called, and until
  /// CommitBacktrackedTokens() or Backtrack() is called, the Preprocessor
  /// keeps track of the lexed tokens so that a subsequent Backtrack() call will
  /// make the Preprocessor re-lex the same tokens.
  ///
  /// Nested backtracks are allowed, meaning that EnableBacktrackAtThisPos can
  /// be called multiple times and CommitBacktrackedTokens/Backtrack calls will
  /// be combined with the EnableBacktrackAtThisPos calls in reverse order.
  ///
  /// NOTE: *DO NOT* forget to call either CommitBacktrackedTokens or Backtrack
  /// at some point after EnableBacktrackAtThisPos. If you don&apos;t, caching of
  /// tokens will continue indefinitely.
  ///</doc>
<def f='llvm/clang/lib/Lex/PPCaching.cpp' l='25' ll='29' type='void clang::Preprocessor::EnableBacktrackAtThisPos()'/>
<doc f='llvm/clang/lib/Lex/PPCaching.cpp' l='17'>// EnableBacktrackAtThisPos - From the point that this method is called, and
// until CommitBacktrackedTokens() or Backtrack() is called, the Preprocessor
// keeps track of the lexed tokens so that a subsequent Backtrack() call will
// make the Preprocessor re-lex the same tokens.
//
// Nested backtracks are allowed, meaning that EnableBacktrackAtThisPos can
// be called multiple times and CommitBacktrackedTokens/Backtrack calls will
// be combined with the EnableBacktrackAtThisPos calls in reverse order.</doc>
<use f='llvm/clang/include/clang/Parse/Parser.h' l='891' u='c' c='_ZN5clang6Parser22TentativeParsingActionC1ERS0_'/>
