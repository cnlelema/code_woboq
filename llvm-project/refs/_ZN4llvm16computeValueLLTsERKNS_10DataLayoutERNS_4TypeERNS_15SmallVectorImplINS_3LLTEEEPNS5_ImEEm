<dec f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='91' type='void llvm::computeValueLLTs(const llvm::DataLayout &amp; DL, llvm::Type &amp; Ty, SmallVectorImpl&lt;llvm::LLT&gt; &amp; ValueTys, SmallVectorImpl&lt;uint64_t&gt; * Offsets = nullptr, uint64_t StartingOffset = 0)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/Analysis.h' l='84'>/// computeValueLLTs - Given an LLVM IR type, compute a sequence of
/// LLTs that represent all the individual underlying
/// non-aggregate types that comprise it.
///
/// If Offsets is non-null, it points to a vector to be filled in
/// with the in-memory offsets of each of the individual values.
///</doc>
<def f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='127' ll='155' type='void llvm::computeValueLLTs(const llvm::DataLayout &amp; DL, llvm::Type &amp; Ty, SmallVectorImpl&lt;llvm::LLT&gt; &amp; ValueTys, SmallVectorImpl&lt;uint64_t&gt; * Offsets = nullptr, uint64_t StartingOffset = 0)'/>
<use f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='135' u='c' c='_ZN4llvm16computeValueLLTsERKNS_10DataLayoutERNS_4TypeERNS_15SmallVectorImplINS_3LLTEEEPNS5_ImEEm'/>
<use f='llvm/llvm/lib/CodeGen/Analysis.cpp' l='144' u='c' c='_ZN4llvm16computeValueLLTsERKNS_10DataLayoutERNS_4TypeERNS_15SmallVectorImplINS_3LLTEEEPNS5_ImEEm'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='161' u='c' c='_ZN4llvm12IRTranslator13allocateVRegsERKNS_5ValueE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='184' u='c' c='_ZN4llvm12IRTranslator16getOrCreateVRegsERKNS_5ValueE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1712' u='c' c='_ZN4llvm12IRTranslator12valueIsSplitERKNS_5ValueEPNS_15SmallVectorImplImEE'/>
