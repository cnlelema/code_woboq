<def f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='166' ll='173' type='void llvm::LPMUpdater::markLoopAsDeleted(llvm::Loop &amp; L, llvm::StringRef Name)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='156'>/// Loop passes should use this method to indicate they have deleted a loop
  /// from the nest.
  ///
  /// Note that this loop must either be the current loop or a subloop of the
  /// current loop. This routine must be called prior to removing the loop from
  /// the loop nest.
  ///
  /// If this is called for the current loop, in addition to clearing any
  /// state, this routine will mark that the current loop should be skipped by
  /// the rest of the pass management infrastructure.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDeletion.cpp' l='220' u='c' c='_ZN4llvm16LoopDeletionPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp' l='702' u='c' c='_ZN4llvm19LoopSimplifyCFGPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='1337' u='c' c='_ZN4llvm18LoopFullUnrollPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='2845' u='c' c='_ZN4llvm22SimpleLoopUnswitchPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<use f='llvm/llvm/unittests/IR/PassBuilderCallbacksTest.cpp' l='172' u='c' c='_ZN12_GLOBAL__N_114MockPassHandleIN4llvm4LoopEE14invalidateLoopERS2_RNS1_15AnalysisManagerIS2_JRNS1_27LoopStandardAnalysisResultsEEEES7_RNS1_10LPMUpdaterE'/>
<use f='llvm/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp' l='1387' u='c' c='_ZN12_GLOBAL__N_137LoopPassManagerTest_LoopDeletion_Test8TestBodyEv'/>
