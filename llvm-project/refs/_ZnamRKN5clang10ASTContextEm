<dec f='llvm/clang/include/clang/AST/ASTContextAllocate.h' l='28' type='void * operator new[](size_t Bytes, const clang::ASTContext &amp; C, size_t Alignment = 8)'/>
<def f='llvm/clang/include/clang/AST/ASTContext.h' l='3193' ll='3196' type='void * operator new[](size_t Bytes, const clang::ASTContext &amp; C, size_t Alignment = 8)'/>
<doc f='llvm/clang/include/clang/AST/ASTContext.h' l='3170'>/// This placement form of operator new[] uses the ASTContext&apos;s allocator for
/// obtaining memory.
///
/// We intentionally avoid using a nothrow specification here so that the calls
/// to this operator will not perform a null check on the result -- the
/// underlying allocator never returns null pointers.
///
/// Usage looks like this (assuming there&apos;s an ASTContext &apos;Context&apos; in scope):
/// @code
/// // Default alignment (8)
/// char *data = new (Context) char[10];
/// // Specific alignment
/// char *data = new (Context, 4) char[10];
/// @endcode
/// Memory allocated through this placement new[] operator does not need to be
/// explicitly freed, as ASTContext will free all of this memory when it gets
/// destroyed. Please note that you cannot use delete on the pointer.
///
/// @param Bytes The number of bytes to allocate. Calculated by the compiler.
/// @param C The ASTContext that provides the allocator.
/// @param Alignment The alignment of the allocated memory (if the underlying
///                  allocator supports it).
/// @return The allocated memory. Could be nullptr.</doc>
