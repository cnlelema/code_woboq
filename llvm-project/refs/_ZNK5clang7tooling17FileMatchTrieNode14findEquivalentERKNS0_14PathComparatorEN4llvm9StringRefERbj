<def f='llvm/clang/lib/Tooling/FileMatchTrie.cpp' l='104' ll='138' type='llvm::StringRef clang::tooling::FileMatchTrieNode::findEquivalent(const clang::tooling::PathComparator &amp; Comparator, llvm::StringRef FileName, bool &amp; IsAmbiguous, unsigned int ConsumedLength = 0) const'/>
<use f='llvm/clang/lib/Tooling/FileMatchTrie.cpp' l='118' u='c' c='_ZNK5clang7tooling17FileMatchTrieNode14findEquivalentERKNS0_14PathComparatorEN4llvm9StringRefERbj'/>
<use f='llvm/clang/lib/Tooling/FileMatchTrie.cpp' l='191' u='c' c='_ZNK5clang7tooling13FileMatchTrie14findEquivalentEN4llvm9StringRefERNS2_11raw_ostreamE'/>
<doc f='llvm/clang/lib/Tooling/FileMatchTrie.cpp' l='83'>/// Tries to find the node under this \c FileMatchTrieNode that best
  /// matches &apos;FileName&apos;.
  ///
  /// If multiple paths fit &apos;FileName&apos; equally well, \c IsAmbiguous is set to
  /// \c true and an empty string is returned. If no path fits &apos;FileName&apos;, an
  /// empty string is returned. \c ConsumedLength denotes the number of
  /// \c Filename&apos;s trailing characters already consumed during recursion.
  ///
  /// To find the best matching node for a given path &apos;p&apos;, the
  /// \c findEquivalent() function is called recursively for each path segment
  /// (back to front) of &apos;p&apos; until a node &apos;n&apos; is reached that does not ..
  /// - .. have children. In this case it is checked
  ///   whether the stored path is equivalent to &apos;p&apos;. If yes, the best match is
  ///   found. Otherwise continue with the parent node as if this node did not
  ///   exist.
  /// - .. a child matching the next path segment. In this case, all children of
  ///   &apos;n&apos; are an equally good match for &apos;p&apos;. All children are of &apos;n&apos; are found
  ///   recursively and their equivalence to &apos;p&apos; is determined. If none are
  ///   equivalent, continue with the parent node as if &apos;n&apos; didn&apos;t exist. If one
  ///   is equivalent, the best match is found. Otherwise, report and ambigiuity
  ///   error.</doc>
