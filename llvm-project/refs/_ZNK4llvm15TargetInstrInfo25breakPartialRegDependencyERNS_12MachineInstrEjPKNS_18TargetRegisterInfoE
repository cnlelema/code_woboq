<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1538' ll='1539' type='void llvm::TargetInstrInfo::breakPartialRegDependency(llvm::MachineInstr &amp; MI, unsigned int OpNum, const llvm::TargetRegisterInfo * TRI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1521'>/// Insert a dependency-breaking instruction
  /// before MI to eliminate an unwanted dependency on OpNum.
  ///
  /// If it wasn&apos;t possible to avoid a def in the last N instructions before MI
  /// (see getPartialRegUpdateClearance), this hook will be called to break the
  /// unwanted dependency.
  ///
  /// On x86, an xorps instruction can be used as a dependency breaker:
  ///
  ///   addps %xmm1, %xmm0
  ///   movaps %xmm0, (%rax)
  ///   xorps %xmm0, %xmm0
  ///   cvtsi2ss %rbx, %xmm0
  ///
  /// An &lt;imp-kill&gt; operand should be added to MI if an instruction was
  /// inserted.  This ties the instructions together in the post-ra scheduler.
  ///</doc>
<use f='llvm/llvm/lib/CodeGen/BreakFalseDeps.cpp' l='204' u='c' c='_ZN4llvm14BreakFalseDeps11processDefsEPNS_12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/BreakFalseDeps.cpp' l='227' u='c' c='_ZN4llvm14BreakFalseDeps17processUndefReadsEPNS_17MachineBasicBlockE'/>
