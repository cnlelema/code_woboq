<dec f='llvm/clang/include/clang/Sema/Sema.h' l='10648' type='void clang::Sema::checkAllowedCUDAInitializer(clang::VarDecl * VD)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='10640'>// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In
  // case of error emits appropriate diagnostic and invalidates \p Var.
  //
  // \details CUDA allows only empty constructors as initializers for global
  // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all
  // __shared__ variables whether they are local or not (they all are implicitly
  // static in CUDA). One exception is that CUDA allows constant initializers
  // for __constant__ and __device__ variables.</doc>
<def f='llvm/clang/lib/Sema/SemaCUDA.cpp' l='475' ll='526' type='void clang::Sema::checkAllowedCUDAInitializer(clang::VarDecl * VD)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='12297' u='c' c='_ZN5clang4Sema19FinalizeDeclarationEPNS_4DeclE'/>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp' l='4594' u='c' c='_ZN5clang4Sema30InstantiateVariableInitializerEPNS_7VarDeclES2_RKNS_30MultiLevelTemplateArgumentListE'/>
