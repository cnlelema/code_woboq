<dec f='llvm/llvm/include/llvm/Transforms/IPO/Inliner.h' l='62' type='bool llvm::LegacyInlinerBase::removeDeadFunctions(llvm::CallGraph &amp; CG, bool AlwaysInlineOnly = false)'/>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Inliner.h' l='56'>/// Remove dead functions.
  ///
  /// This also includes a hack in the form of the &apos;AlwaysInlineOnly&apos; flag
  /// which restricts it to deleting functions with an &apos;AlwaysInline&apos;
  /// attribute. This is useful for the InlineAlways pass that only wants to
  /// deal with that subset of the functions.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/AlwaysInliner.cpp' l='113' u='c' c='_ZN12_GLOBAL__N_123AlwaysInlinerLegacyPass14doFinalizationERN4llvm9CallGraphE'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='775' u='c' c='_ZN4llvm17LegacyInlinerBase14doFinalizationERNS_9CallGraphE'/>
<def f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='779' ll='858' type='bool llvm::LegacyInlinerBase::removeDeadFunctions(llvm::CallGraph &amp; CG, bool AlwaysInlineOnly = false)'/>
<doc f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='778'>/// Remove dead functions that are not included in DNR (Do Not Remove) list.</doc>
