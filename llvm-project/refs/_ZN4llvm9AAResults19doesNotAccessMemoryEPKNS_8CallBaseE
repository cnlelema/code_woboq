<def f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='430' ll='432' type='bool llvm::AAResults::doesNotAccessMemory(const llvm::CallBase * Call)'/>
<doc f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='419'>/// Checks if the specified call is known to never read or write memory.
  ///
  /// Note that if the call only reads from known-constant memory, it is also
  /// legal to return true. Also, calls that unwind the stack are legal for
  /// this predicate.
  ///
  /// Many optimizations (such as CSE and LICM) can be performed on such calls
  /// without worrying about aliasing properties, and many calls have this
  /// property (e.g. calls to &apos;sin&apos; and &apos;cos&apos;).
  ///
  /// This property corresponds to the GCC &apos;const&apos; attribute.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='846' u='c' c='_ZL14handleEndBlockRN4llvm10BasicBlockEPNS_9AAResultsEPNS_23MemoryDependenceResultsEPKNS_17TargetLibraryInfoERNS_8DenseMapIPNS_11InstructionESt3mapIll11858614'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='375' u='c' c='_ZN4llvm3GVN10ValueTable15lookupOrAddCallEPNS_8CallInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp' l='369' u='c' c='_ZN12_GLOBAL__N_118LoopVersioningLICM28instructionSafeForVersioningEPN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/NewGVN.cpp' l='1638' u='c' c='_ZNK12_GLOBAL__N_16NewGVN29performSymbolicCallEvaluationEPN4llvm11InstructionE'/>
