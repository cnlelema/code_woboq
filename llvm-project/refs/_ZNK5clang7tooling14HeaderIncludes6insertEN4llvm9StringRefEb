<dec f='llvm/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h' l='74' type='llvm::Optional&lt;tooling::Replacement&gt; clang::tooling::HeaderIncludes::insert(llvm::StringRef Header, bool IsAngled) const'/>
<use f='llvm/clang/lib/Format/Format.cpp' l='2213' u='c' c='_ZN5clang6format12_GLOBAL__N_123fixCppIncludeInsertionsEN4llvm9StringRefERKNS_7tooling12ReplacementsERKNS0_11FormatStyleE'/>
<doc f='llvm/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h' l='55'>/// Inserts an #include directive of \p Header into the code. If \p IsAngled
  /// is true, \p Header will be quoted with &lt;&gt; in the directive; otherwise, it
  /// will be quoted with &quot;&quot;.
  ///
  /// When searching for points to insert new header, this ignores #include&apos;s
  /// after the #include block(s) in the beginning of a file to avoid inserting
  /// headers into code sections where new #include&apos;s should not be added by
  /// default. These code sections include:
  ///   - raw string literals (containing #include).
  ///   - #if blocks.
  ///   - Special #include&apos;s among declarations (e.g. functions).
  ///
  /// Returns a replacement that inserts the new header into a suitable #include
  /// block of the same category. This respects the order of the existing
  /// #includes in the block; if the existing #includes are not already sorted,
  /// this will simply insert the #include in front of the first #include of the
  /// same category in the code that should be sorted after \p IncludeName. If
  /// \p IncludeName already exists (with exactly the same spelling), this
  /// returns None.</doc>
<def f='llvm/clang/lib/Tooling/Inclusions/HeaderIncludes.cpp' l='291' ll='329' type='llvm::Optional&lt;tooling::Replacement&gt; clang::tooling::HeaderIncludes::insert(llvm::StringRef IncludeName, bool IsAngled) const'/>
<use f='llvm/clang/unittests/Tooling/HeaderIncludesTest.cpp' l='26' u='c' c='_ZN5clang7tooling12_GLOBAL__N_118HeaderIncludesTest6insertEN4llvm9StringRefES4_'/>
