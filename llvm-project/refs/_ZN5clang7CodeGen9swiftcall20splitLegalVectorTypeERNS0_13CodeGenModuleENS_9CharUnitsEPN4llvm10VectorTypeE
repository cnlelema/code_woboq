<dec f='llvm/clang/include/clang/CodeGen/SwiftCallingConv.h' l='146' type='std::pair&lt;llvm::Type *, unsigned int&gt; clang::CodeGen::swiftcall::splitLegalVectorType(clang::CodeGen::CodeGenModule &amp; CGM, clang::CharUnits vectorSize, llvm::VectorType * vectorTy)'/>
<doc f='llvm/clang/include/clang/CodeGen/SwiftCallingConv.h' l='144'>/// Minimally split a legal vector type.</doc>
<use f='llvm/clang/lib/CodeGen/SwiftCallingConv.cpp' l='238' u='c' c='_ZN5clang7CodeGen9swiftcall16SwiftAggLowering17addLegalTypedDataEPN4llvm4TypeENS_9CharUnitsES6_'/>
<use f='llvm/clang/lib/CodeGen/SwiftCallingConv.cpp' l='385' u='c' c='_ZN5clang7CodeGen9swiftcall16SwiftAggLowering16splitVectorEntryEj'/>
<def f='llvm/clang/lib/CodeGen/SwiftCallingConv.cpp' l='688' ll='701' type='std::pair&lt;llvm::Type *, unsigned int&gt; clang::CodeGen::swiftcall::splitLegalVectorType(clang::CodeGen::CodeGenModule &amp; CGM, clang::CharUnits vectorSize, llvm::VectorType * vectorTy)'/>
