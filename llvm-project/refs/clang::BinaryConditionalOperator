<inh f='llvm/clang/include/clang/AST/Expr.h' l='3605' c='clang::AbstractConditionalOperator'/>
<def f='llvm/clang/include/clang/AST/Expr.h' l='3720' ll='3801'/>
<size>64</size>
<doc f='llvm/clang/include/clang/AST/Expr.h' l='3715'>/// BinaryConditionalOperator - The GNU extension to the conditional
/// operator which allows the middle operand to be omitted.
///
/// This is a different expression kind on the assumption that almost
/// every client ends up needing to know that these are different.</doc>
<mbr r='clang::BinaryConditionalOperator::SubExprs' o='192' t='clang::Stmt *[4]'/>
<mbr r='clang::BinaryConditionalOperator::OpaqueValue' o='448' t='clang::OpaqueValueExpr *'/>
<fun r='_ZN5clang25BinaryConditionalOperatorC1EPNS_4ExprEPNS_15OpaqueValueExprES2_S2_S2_NS_14SourceLocationES5_NS_8QualTypeENS_13ExprValueKindENS_14ExprObjectKindE'/>
<fun r='_ZN5clang25BinaryConditionalOperatorC1ENS_4Stmt10EmptyShellE'/>
<fun r='_ZNK5clang25BinaryConditionalOperator9getCommonEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator14getOpaqueValueEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator7getCondEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator11getTrueExprEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator12getFalseExprEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator11getBeginLocEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator9getEndLocEv'/>
<fun r='_ZN5clang25BinaryConditionalOperator7classofEPKNS_4StmtE'/>
<fun r='_ZN5clang25BinaryConditionalOperator8childrenEv'/>
<fun r='_ZNK5clang25BinaryConditionalOperator8childrenEv'/>
