<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='1593' type='static llvm::Instruction * llvm::CallInst::CreateMalloc(llvm::BasicBlock * InsertAtEnd, llvm::Type * IntPtrTy, llvm::Type * AllocTy, llvm::Value * AllocSize, llvm::Value * ArraySize = nullptr, llvm::Function * MallocF = nullptr, const llvm::Twine &amp; Name = &quot;&quot;)'/>
<use f='llvm/llvm/lib/IR/Core.cpp' l='3415' u='c' c='LLVMBuildMalloc'/>
<use f='llvm/llvm/lib/IR/Core.cpp' l='3426' u='c' c='LLVMBuildArrayMalloc'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='642' ll='648' type='static llvm::Instruction * llvm::CallInst::CreateMalloc(llvm::BasicBlock * InsertAtEnd, llvm::Type * IntPtrTy, llvm::Type * AllocTy, llvm::Value * AllocSize, llvm::Value * ArraySize = nullptr, llvm::Function * MallocF = nullptr, const llvm::Twine &amp; Name = &quot;&quot;)'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='634'>/// CreateMalloc - Generate the IR for a call to malloc:
/// 1. Compute the malloc call&apos;s argument as the specified type&apos;s size,
///    possibly multiplied by the array size if the array size is not
///    constant 1.
/// 2. Call malloc with that argument.
/// 3. Bitcast the result of the malloc call to the specified type.
/// Note: This function does not add the bitcast to the basic block, that is the
/// responsibility of the caller.</doc>
