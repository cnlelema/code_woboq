<dec f='llvm/clang/include/clang/Sema/Sema.h' l='6586' type='bool clang::Sema::CheckFunctionTemplateSpecialization(clang::FunctionDecl * FD, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::LookupResult &amp; Previous, bool QualifiedFriend = false)'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1069' u='c' c='_ZN5clang4Sema13CheckOverloadEPNS_5ScopeEPNS_12FunctionDeclERKNS_12LookupResultERPNS_9NamedDeclEb'/>
<def f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='8236' ll='8454' type='bool clang::Sema::CheckFunctionTemplateSpecialization(clang::FunctionDecl * FD, clang::TemplateArgumentListInfo * ExplicitTemplateArgs, clang::LookupResult &amp; Previous, bool QualifiedFriend = false)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplate.cpp' l='8214'>/// Perform semantic analysis for the given function template
/// specialization.
///
/// This routine performs all of the semantic analysis required for an
/// explicit function template specialization. On successful completion,
/// the function declaration \p FD will become a function template
/// specialization.
///
/// \param FD the function declaration, which will be updated to become a
/// function template specialization.
///
/// \param ExplicitTemplateArgs the explicitly-provided template arguments,
/// if any. Note that this may be valid info even when 0 arguments are
/// explicitly provided as in, e.g., \c void sort&lt;&gt;(char*, char*);
/// as it anyway contains info on the angle brackets locations.
///
/// \param Previous the set of declarations that may be specialized by
/// this function specialization.
///
/// \param QualifiedFriend whether this is a lookup for a qualified friend
/// declaration with no explicit template argument list that might be
/// befriending a function template specialization.</doc>
