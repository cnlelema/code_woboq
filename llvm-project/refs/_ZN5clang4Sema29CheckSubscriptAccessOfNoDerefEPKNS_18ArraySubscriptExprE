<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1642' type='void clang::Sema::CheckSubscriptAccessOfNoDeref(const clang::ArraySubscriptExpr * E)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='1635'>/// Methods for marking which expressions involve dereferencing a pointer
  /// marked with the &apos;noderef&apos; attribute. Expressions are checked bottom up as
  /// they are parsed, meaning that a noderef pointer may not be accessed. For
  /// example, in `&amp;*p` where `p` is a noderef pointer, we will first parse the
  /// `*p`, but need to check that `address of` is called on it. This requires
  /// keeping a container of all pending expressions and checking if the address
  /// of them are eventually taken.</doc>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='4399' u='c' c='_ZN5clang4Sema23ActOnArraySubscriptExprEPNS_5ScopeEPNS_4ExprENS_14SourceLocationES4_S5_'/>
<def f='llvm/clang/lib/Sema/SemaExpr.cpp' l='4417' ll='4447' type='void clang::Sema::CheckSubscriptAccessOfNoDeref(const clang::ArraySubscriptExpr * E)'/>
