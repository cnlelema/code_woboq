<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='3656' type='void llvm::InvokeInst::InvokeInst(llvm::FunctionType * Ty, llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, int NumOperands, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='3690' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='3704' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EENS7_INS_17OperandBundleDefTIS4_EEEERKNS_5TwineEPNS_11InstructionE'/>
<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='3873' ll='3881' type='void llvm::InvokeInst::InvokeInst(llvm::FunctionType * Ty, llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, int NumOperands, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='3653'>/// Construct an InvokeInst given a range of arguments.
  ///
  /// Construct an InvokeInst from a range of arguments</doc>
