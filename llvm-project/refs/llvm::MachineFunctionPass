<inh f='llvm/llvm/include/llvm/Pass.h' l='284' c='llvm::FunctionPass'/>
<def f='llvm/llvm/include/llvm/CodeGen/MachineFunctionPass.h' l='30' ll='76'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h' l='208' c='llvm::MachineOptimizationRemarkEmitterPass'/>
<size>104</size>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineFunctionPass.h' l='26'>/// MachineFunctionPass - This class adapts the FunctionPass interface to
/// allow convenient creation of passes that operate on the MachineFunction
/// representation. Instead of overriding runOnFunction, subclasses
/// override runOnMachineFunction.</doc>
<fun r='_ZN4llvm19MachineFunctionPass16doInitializationERNS_6ModuleE'/>
<fun r='_ZN4llvm19MachineFunctionPassC1ERc'/>
<fun r='_ZN4llvm19MachineFunctionPass20runOnMachineFunctionERNS_15MachineFunctionE'/>
<fun r='_ZNK4llvm19MachineFunctionPass16getAnalysisUsageERNS_13AnalysisUsageE'/>
<fun r='_ZNK4llvm19MachineFunctionPass21getRequiredPropertiesEv'/>
<fun r='_ZNK4llvm19MachineFunctionPass16getSetPropertiesEv'/>
<fun r='_ZNK4llvm19MachineFunctionPass20getClearedPropertiesEv'/>
<mbr r='llvm::MachineFunctionPass::RequiredProperties' o='256' t='llvm::MachineFunctionProperties'/>
<mbr r='llvm::MachineFunctionPass::SetProperties' o='448' t='llvm::MachineFunctionProperties'/>
<mbr r='llvm::MachineFunctionPass::ClearedProperties' o='640' t='llvm::MachineFunctionProperties'/>
<fun r='_ZNK4llvm19MachineFunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN4llvm19MachineFunctionPass13runOnFunctionERNS_8FunctionE'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineLoopInfo.h' l='83' c='llvm::MachineLoopInfo'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/VirtRegMap.h' l='33' c='llvm::VirtRegMap'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/AsmPrinter.h' l='78' c='llvm::AsmPrinter'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineDominators.h' l='46' c='llvm::MachineDominatorTree'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineBlockFrequencyInfo.h' l='33' c='llvm::MachineBlockFrequencyInfo'/>
<ovr f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='94' c='(anonymousnamespace)::BranchFolderPass'/>
<ovr f='llvm/llvm/lib/CodeGen/BranchRelaxation.cpp' l='45' c='(anonymousnamespace)::BranchRelaxation'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h' l='35' c='llvm::ReachingDefAnalysis'/>
<ovr f='llvm/llvm/lib/CodeGen/BreakFalseDeps.cpp' l='33' c='llvm::BreakFalseDeps'/>
<ovr f='llvm/llvm/lib/CodeGen/CFIInstrInserter.cpp' l='37' c='(anonymousnamespace)::CFIInstrInserter'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/SlotIndexes.h' l='328' c='llvm::SlotIndexes'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/LiveIntervals.h' l='54' c='llvm::LiveIntervals'/>
<ovr f='llvm/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp' l='29' c='(anonymousnamespace)::DeadMachineInstructionElim'/>
<ovr f='llvm/llvm/lib/CodeGen/DetectDeadLanes.cpp' l='57' c='(anonymousnamespace)::DetectDeadLanes'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineTraceMetrics.h' l='87' c='llvm::MachineTraceMetrics'/>
<ovr f='llvm/llvm/lib/CodeGen/EarlyIfConversion.cpp' l='596' c='(anonymousnamespace)::EarlyIfConverter'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/EdgeBundles.h' l='25' c='llvm::EdgeBundles'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/ExecutionDomainFix.h' l='107' c='llvm::ExecutionDomainFix'/>
<ovr f='llvm/llvm/lib/CodeGen/ExpandISelPseudos.cpp' l='27' c='(anonymousnamespace)::ExpandISelPseudos'/>
<ovr f='llvm/llvm/lib/CodeGen/ExpandPostRAPseudos.cpp' l='30' c='(anonymousnamespace)::ExpandPostRA'/>
<ovr f='llvm/llvm/lib/CodeGen/FEntryInserter.cpp' l='26' c='(anonymousnamespace)::FEntryInserter'/>
<ovr f='llvm/llvm/lib/CodeGen/FuncletLayout.cpp' l='22' c='(anonymousnamespace)::FuncletLayout'/>
<ovr f='llvm/llvm/lib/CodeGen/GCRootLowering.cpp' l='57' c='(anonymousnamespace)::GCMachineCodeAnalysis'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h' l='218' c='llvm::GISelCSEAnalysisWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h' l='59' c='llvm::IRTranslator'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h' l='27' c='llvm::InstructionSelect'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Legalizer.h' l='30' c='llvm::Legalizer'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h' l='38' c='llvm::Localizer'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='90' c='llvm::RegBankSelect'/>
<ovr f='llvm/llvm/lib/CodeGen/IfConversion.cpp' l='95' c='(anonymousnamespace)::IfConverter'/>
<ovr f='llvm/llvm/lib/CodeGen/ImplicitNullChecks.cpp' l='80' c='(anonymousnamespace)::ImplicitNullChecks'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/LiveStacks.h' l='30' c='llvm::LiveStacks'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/LazyMachineBlockFrequencyInfo.h' l='37' c='llvm::LazyMachineBlockFrequencyInfoPass'/>
<ovr f='llvm/llvm/lib/CodeGen/LiveDebugValues.cpp' l='83' c='(anonymousnamespace)::LiveDebugValues'/>
<ovr f='llvm/llvm/lib/CodeGen/LiveDebugVariables.h' l='32' c='llvm::LiveDebugVariables'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/LiveVariables.h' l='45' c='llvm::LiveVariables'/>
<ovr f='llvm/llvm/lib/CodeGen/LiveRangeShrink.cpp' l='42' c='(anonymousnamespace)::LiveRangeShrink'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/LiveRegMatrix.h' l='40' c='llvm::LiveRegMatrix'/>
<ovr f='llvm/llvm/lib/CodeGen/LocalStackSlotAllocation.cpp' l='74' c='(anonymousnamespace)::LocalStackSlotPass'/>
<ovr f='llvm/llvm/lib/CodeGen/MIRCanonicalizerPass.cpp' l='55' c='(anonymousnamespace)::MIRCanonicalizer'/>
<ovr f='llvm/llvm/lib/CodeGen/MIRPrintingPass.cpp' l='27' c='(anonymousnamespace)::MIRPrintingPass'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachinePostDominators.h' l='26' c='llvm::MachinePostDominatorTree'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='314' c='(anonymousnamespace)::MachineBlockPlacement'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineBlockPlacement.cpp' l='2912' c='(anonymousnamespace)::MachineBlockPlacementStats'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='63' c='(anonymousnamespace)::MachineCSE'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineCombiner.cpp' l='60' c='(anonymousnamespace)::MachineCombiner'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineCopyPropagation.cpp' l='183' c='(anonymousnamespace)::MachineCopyPropagation'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineDominanceFrontier.h' l='21' c='llvm::MachineDominanceFrontier'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineFunctionPrinterPass.cpp' l='27' c='(anonymousnamespace)::MachineFunctionPrinterPass'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineInstrBundle.cpp' l='23' c='(anonymousnamespace)::UnpackMachineBundles'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineInstrBundle.cpp' l='87' c='(anonymousnamespace)::FinalizeMachineBundles'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='93' c='(anonymousnamespace)::MachineLICMBase'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachinePipeliner.h' l='57' c='llvm::MachinePipeliner'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineRegionInfo.h' l='85' c='llvm::MachineRegionInfoPass'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='151' c='(anonymousnamespace)::MachineSchedulerBase'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='83' c='(anonymousnamespace)::MachineSinking'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineSink.cpp' l='939' c='(anonymousnamespace)::PostRAMachineSinking'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineVerifier.cpp' l='294' c='(anonymousnamespace)::MachineVerifierPass'/>
<ovr f='llvm/llvm/lib/CodeGen/OptimizePHIs.cpp' l='36' c='(anonymousnamespace)::OptimizePHIs'/>
<ovr f='llvm/llvm/lib/CodeGen/PHIElimination.cpp' l='65' c='(anonymousnamespace)::PHIElimination'/>
<ovr f='llvm/llvm/lib/CodeGen/PatchableFunction.cpp' l='25' c='(anonymousnamespace)::PatchableFunction'/>
<ovr f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='153' c='(anonymousnamespace)::PeepholeOptimizer'/>
<ovr f='llvm/llvm/lib/CodeGen/PostRAHazardRecognizer.cpp' l='45' c='(anonymousnamespace)::PostRAHazardRecognizer'/>
<ovr f='llvm/llvm/lib/CodeGen/PostRASchedulerList.cpp' l='79' c='(anonymousnamespace)::PostRAScheduler'/>
<ovr f='llvm/llvm/lib/CodeGen/ProcessImplicitDefs.cpp' l='27' c='(anonymousnamespace)::ProcessImplicitDefs'/>
<ovr f='llvm/llvm/lib/CodeGen/PrologEpilogInserter.cpp' l='83' c='(anonymousnamespace)::PEI'/>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocBasic.cpp' l='60' c='(anonymousnamespace)::RABasic'/>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocFast.cpp' l='63' c='(anonymousnamespace)::RegAllocFast'/>
<ovr f='llvm/llvm/lib/CodeGen/SpillPlacement.h' l='43' c='llvm::SpillPlacement'/>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocGreedy.cpp' l='150' c='(anonymousnamespace)::RAGreedy'/>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocPBQP.cpp' l='116' c='(anonymousnamespace)::RegAllocPBQP'/>
<ovr f='llvm/llvm/lib/CodeGen/RegUsageInfoCollector.cpp' l='40' c='(anonymousnamespace)::RegUsageInfoCollector'/>
<ovr f='llvm/llvm/lib/CodeGen/RegUsageInfoPropagate.cpp' l='44' c='(anonymousnamespace)::RegUsageInfoPropagation'/>
<ovr f='llvm/llvm/lib/CodeGen/RegisterCoalescer.cpp' l='122' c='(anonymousnamespace)::RegisterCoalescer'/>
<ovr f='llvm/llvm/lib/CodeGen/RegisterScavenging.cpp' l='787' c='(anonymousnamespace)::ScavengerTest'/>
<ovr f='llvm/llvm/lib/CodeGen/RenameIndependentSubregs.cpp' l='45' c='(anonymousnamespace)::RenameIndependentSubregs'/>
<ovr f='llvm/llvm/lib/CodeGen/ResetMachineFunctionPass.cpp' l='32' c='(anonymousnamespace)::ResetMachineFunction'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/SelectionDAGISel.h' l='44' c='llvm::SelectionDAGISel'/>
<ovr f='llvm/llvm/lib/CodeGen/ShrinkWrap.cpp' l='109' c='(anonymousnamespace)::ShrinkWrap'/>
<ovr f='llvm/llvm/lib/CodeGen/StackColoring.cpp' l='380' c='(anonymousnamespace)::StackColoring'/>
<ovr f='llvm/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp' l='49' c='(anonymousnamespace)::StackMapLiveness'/>
<ovr f='llvm/llvm/lib/CodeGen/StackSlotColoring.cpp' l='60' c='(anonymousnamespace)::StackSlotColoring'/>
<ovr f='llvm/llvm/lib/CodeGen/TailDuplication.cpp' l='29' c='(anonymousnamespace)::TailDuplicateBase'/>
<ovr f='llvm/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp' l='92' c='(anonymousnamespace)::TwoAddressInstructionPass'/>
<ovr f='llvm/llvm/lib/CodeGen/UnreachableBlockElim.cpp' l='80' c='(anonymousnamespace)::UnreachableMachineBlockElim'/>
<ovr f='llvm/llvm/lib/CodeGen/VirtRegMap.cpp' l='176' c='(anonymousnamespace)::VirtRegRewriter'/>
<ovr f='llvm/llvm/lib/CodeGen/XRayInstrumentation.cpp' l='45' c='(anonymousnamespace)::XRayInstrumentation'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp' l='79' c='(anonymousnamespace)::AArch64A53Fix835769'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp' l='109' c='(anonymousnamespace)::AArch64A57FPLoadBalancing'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp' l='65' c='(anonymousnamespace)::AArch64AdvSIMDScalar'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp' l='32' c='(anonymousnamespace)::AArch64BranchTargets'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp' l='37' c='(anonymousnamespace)::LDTLSCleanup'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp' l='133' c='(anonymousnamespace)::AArch64CollectLOH'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp' l='34' c='(anonymousnamespace)::AArch64CompressJumpTables'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp' l='47' c='(anonymousnamespace)::AArch64CondBrTuning'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp' l='93' c='(anonymousnamespace)::AArch64ConditionOptimizer'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp' l='761' c='(anonymousnamespace)::AArch64ConditionalCompares'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64DeadRegisterDefinitionsPass.cpp' l='35' c='(anonymousnamespace)::AArch64DeadRegisterDefinitions'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp' l='49' c='(anonymousnamespace)::AArch64ExpandPseudo'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp' l='181' c='(anonymousnamespace)::FalkorHWPFFix'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp' l='88' c='(anonymousnamespace)::AArch64LoadStoreOpt'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64PreLegalizerCombiner.cpp' l='60' c='(anonymousnamespace)::AArch64PreLegalizerCombiner'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64RedundantCopyElimination.cpp' l='69' c='(anonymousnamespace)::AArch64RedundantCopyElimination'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp' l='66' c='(anonymousnamespace)::AArch64SIMDInstrOpt'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64SpeculationHardening.cpp' l='124' c='(anonymousnamespace)::AArch64SpeculationHardening'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp' l='30' c='(anonymousnamespace)::AArch64StorePairSuppress'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp' l='1085' c='(anonymousnamespace)::AMDGPUMachineCFGStructurizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDILCFGStructurizer.cpp' l='116' c='(anonymousnamespace)::AMDGPUCFGStructurizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/GCNDPPCombine.cpp' l='65' c='(anonymousnamespace)::GCNDPPCombine'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp' l='40' c='(anonymousnamespace)::GCNNSAReassign'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/GCNRegBankReassign.cpp' l='72' c='(anonymousnamespace)::GCNRegBankReassign'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600ClauseMergePass.cpp' l='44' c='(anonymousnamespace)::R600ClauseMergePass'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600ControlFlowFinalizer.cpp' l='217' c='(anonymousnamespace)::R600ControlFlowFinalizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600EmitClauseMarkers.cpp' l='47' c='(anonymousnamespace)::R600EmitClauseMarkers'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600ExpandSpecialInstrs.cpp' l='39' c='(anonymousnamespace)::R600ExpandSpecialInstrsPass'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600OptimizeVectorRegisters.cpp' l='94' c='(anonymousnamespace)::R600VectorRegMerger'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/R600Packetizer.cpp' l='35' c='(anonymousnamespace)::R600Packetizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIAddIMGInit.cpp' l='35' c='(anonymousnamespace)::SIAddIMGInit'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp' l='110' c='(anonymousnamespace)::SIFixSGPRCopies'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIFixVGPRCopies.cpp' l='26' c='(anonymousnamespace)::SIFixVGPRCopies'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIFixupVectorISel.cpp' l='55' c='(anonymousnamespace)::SIFixupVectorISel'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp' l='83' c='(anonymousnamespace)::SIFoldOperands'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIFormMemoryClauses.cpp' l='39' c='(anonymousnamespace)::SIFormMemoryClauses'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIInsertSkips.cpp' l='50' c='(anonymousnamespace)::SIInsertSkips'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp' l='366' c='(anonymousnamespace)::SIInsertWaitcnts'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SILoadStoreOptimizer.cpp' l='119' c='(anonymousnamespace)::SILoadStoreOptimizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp' l='78' c='(anonymousnamespace)::SILowerControlFlow'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp' l='48' c='(anonymousnamespace)::SILowerI1Copies'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp' l='389' c='(anonymousnamespace)::SIMemoryLegalizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIModeRegister.cpp' l='118' c='(anonymousnamespace)::SIModeRegister'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIOptimizeExecMasking.cpp' l='25' c='(anonymousnamespace)::SIOptimizeExecMasking'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIOptimizeExecMaskingPreRA.cpp' l='35' c='(anonymousnamespace)::SIOptimizeExecMaskingPreRA'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIPeepholeSDWA.cpp' l='67' c='(anonymousnamespace)::SIPeepholeSDWA'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIPreAllocateWWMRegs.cpp' l='35' c='(anonymousnamespace)::SIPreAllocateWWMRegs'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp' l='37' c='(anonymousnamespace)::SIShrinkInstructions'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIWholeQuadMode.cpp' l='146' c='(anonymousnamespace)::SIWholeQuadMode'/>
<ovr f='llvm/llvm/lib/Target/ARM/A15SDOptimizer.cpp' l='48' c='(anonymousnamespace)::A15SDOptimizer'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp' l='99' c='(anonymousnamespace)::ARMConstantIslands'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp' l='39' c='(anonymousnamespace)::ARMExpandPseudo'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp' l='99' c='(anonymousnamespace)::ARMLoadStoreOpt'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp' l='2033' c='(anonymousnamespace)::ARMPreAllocLoadStoreOpt'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMOptimizeBarriersPass.cpp' l='22' c='(anonymousnamespace)::ARMOptimizeBarriersPass'/>
<ovr f='llvm/llvm/lib/Target/ARM/MLxExpansionPass.cpp' l='39' c='(anonymousnamespace)::MLxExpansion'/>
<ovr f='llvm/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp' l='40' c='(anonymousnamespace)::Thumb2ITBlockPass'/>
<ovr f='llvm/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp' l='159' c='(anonymousnamespace)::Thumb2SizeReduce'/>
<ovr f='llvm/llvm/lib/Target/BPF/BPFMIChecking.cpp' l='29' c='(anonymousnamespace)::BPFMIPreEmitChecking'/>
<ovr f='llvm/llvm/lib/Target/BPF/BPFMIPeephole.cpp' l='38' c='(anonymousnamespace)::BPFMIPeephole'/>
<ovr f='llvm/llvm/lib/Target/BPF/BPFMIPeephole.cpp' l='198' c='(anonymousnamespace)::BPFMIPreEmitPeephole'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp' l='182' c='(anonymousnamespace)::HexagonBitSimplify'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp' l='2891' c='(anonymousnamespace)::HexagonLoopRescheduling'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp' l='48' c='(anonymousnamespace)::HexagonBranchRelaxation'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonCFGOptimizer.cpp' l='36' c='(anonymousnamespace)::HexagonCFGOptimizer'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp' l='212' c='(anonymousnamespace)::HexagonConstExtenders'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp' l='1879' c='(anonymousnamespace)::HexagonConstPropagation'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp' l='59' c='(anonymousnamespace)::HexagonCopyToCombine'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp' l='153' c='(anonymousnamespace)::HexagonEarlyIfConversion'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp' l='138' c='(anonymousnamespace)::HexagonExpandCondsets'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp' l='37' c='(anonymousnamespace)::HexagonFixupHwLoops'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp' l='203' c='(anonymousnamespace)::HexagonCallFrameInformation'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp' l='501' c='(anonymousnamespace)::HexagonGenInsert'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonGenMux.cpp' l='66' c='(anonymousnamespace)::HexagonGenMux'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonGenPredicate.cpp' l='79' c='(anonymousnamespace)::HexagonGenPredicate'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp' l='100' c='(anonymousnamespace)::HexagonHardwareLoops'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp' l='75' c='(anonymousnamespace)::HexagonNewValueJump'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp' l='58' c='(anonymousnamespace)::HexagonOptAddrMode'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonPeephole.cpp' l='81' c='(anonymousnamespace)::HexagonPeephole'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonRDFOpt.cpp' l='55' c='(anonymousnamespace)::HexagonRDFOpt'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonSplitConst32AndConst64.cpp' l='38' c='(anonymousnamespace)::HexagonSplitConst32AndConst64'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonSplitDouble.cpp' l='63' c='(anonymousnamespace)::HexagonSplitDoubleRegs'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp' l='63' c='(anonymousnamespace)::HexagonStoreWidening'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonVExtract.cpp' l='39' c='(anonymousnamespace)::HexagonVExtract'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp' l='86' c='(anonymousnamespace)::HexagonPacketizer'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonVectorPrint.cpp' l='52' c='(anonymousnamespace)::HexagonVectorPrint'/>
<ovr f='llvm/llvm/lib/Target/Lanai/LanaiDelaySlotFiller.cpp' l='34' c='(anonymousnamespace)::Filler'/>
<ovr f='llvm/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp' l='56' c='(anonymousnamespace)::LanaiMemAluCombiner'/>
<ovr f='llvm/llvm/lib/Target/MSP430/MSP430BranchSelector.cpp' l='37' c='(anonymousnamespace)::MSP430BSel'/>
<ovr f='llvm/llvm/lib/Target/Mips/Cheri128FailHard.cpp' l='20' c='(anonymousnamespace)::Cher128FailHardPass'/>
<ovr f='llvm/llvm/lib/Target/Mips/CheriAddressingModeFolder.cpp' l='23' c='(anonymousnamespace)::CheriAddressingModeFolder'/>
<ovr f='llvm/llvm/lib/Target/Mips/CheriStackInvalidatePass.cpp' l='22' c='(anonymousnamespace)::CheriInvalidatePass'/>
<ovr f='llvm/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp' l='135' c='(anonymousnamespace)::MicroMipsSizeReduce'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsBranchExpansion.cpp' l='134' c='(anonymousnamespace)::MipsBranchExpansion'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp' l='201' c='(anonymousnamespace)::MipsConstantIslands'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp' l='212' c='(anonymousnamespace)::MipsDelaySlotFiller'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsExpandPseudo.cpp' l='35' c='(anonymousnamespace)::MipsExpandPseudo'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsModuleISelDAGToDAG.cpp' l='23' c='(anonymousnamespace)::MipsModuleDAGToDAGISel'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp' l='78' c='(anonymousnamespace)::MipsOptimizePICCall'/>
<ovr f='llvm/llvm/lib/Target/Mips/MipsPreLegalizerCombiner.cpp' l='54' c='(anonymousnamespace)::MipsPreLegalizerCombiner'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXPeephole.cpp' l='50' c='(anonymousnamespace)::NVPTXPeephole'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXPrologEpilogPass.cpp' l='32' c='(anonymousnamespace)::NVPTXPrologEpilogPass'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXProxyRegErasure.cpp' l='36' c='(anonymousnamespace)::NVPTXProxyRegErasure'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp' l='29' c='(anonymousnamespace)::NVPTXReplaceImageHandles'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp' l='135' c='(anonymousnamespace)::PPCBranchCoalescing'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCBranchSelector.cpp' l='36' c='(anonymousnamespace)::PPCBSel'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCCTRLoops.cpp' l='77' c='(anonymousnamespace)::PPCCTRLoopsVerify'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCEarlyReturn.cpp' l='43' c='(anonymousnamespace)::PPCEarlyReturn'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCExpandISEL.cpp' l='45' c='(anonymousnamespace)::PPCExpandISEL'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp' l='74' c='(anonymousnamespace)::PPCMIPeephole'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp' l='44' c='(anonymousnamespace)::PPCPreEmitPeephole'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCQPXLoadSplat.cpp' l='34' c='(anonymousnamespace)::PPCQPXLoadSplat'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp' l='351' c='(anonymousnamespace)::PPCReduceCRLogicals'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp' l='38' c='(anonymousnamespace)::PPCTLSDynamicCall'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp' l='89' c='(anonymousnamespace)::PPCTOCRegDeps'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCVSXCopy.cpp' l='43' c='(anonymousnamespace)::PPCVSXCopy'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp' l='60' c='(anonymousnamespace)::PPCVSXFMAMutate'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp' l='96' c='(anonymousnamespace)::PPCVSXSwapRemoval'/>
<ovr f='llvm/llvm/lib/Target/Sparc/DelaySlotFiller.cpp' l='39' c='(anonymousnamespace)::Filler'/>
<ovr f='llvm/llvm/lib/Target/Sparc/LeonPasses.h' l='23' c='llvm::LEONMachineFunctionPass'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp' l='63' c='(anonymousnamespace)::SystemZElimCompare'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZExpandPseudo.cpp' l='31' c='(anonymousnamespace)::SystemZExpandPseudo'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZLDCleanup.cpp' l='29' c='(anonymousnamespace)::SystemZLDCleanup'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZLongBranch.cpp' l='133' c='(anonymousnamespace)::SystemZLongBranch'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZPostRewrite.cpp' l='35' c='(anonymousnamespace)::SystemZPostRewrite'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZShortenInst.cpp' l='26' c='(anonymousnamespace)::SystemZShortenInst'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyArgumentMove.cpp' l='43' c='(anonymousnamespace)::WebAssemblyArgumentMove'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyExceptionInfo.h' l='117' c='llvm::WebAssemblyExceptionInfo'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp' l='113' c='(anonymousnamespace)::WebAssemblyCFGSort'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp' l='40' c='(anonymousnamespace)::WebAssemblyCFGStackify'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyCallIndirectFixup.cpp' l='42' c='(anonymousnamespace)::WebAssemblyCallIndirectFixup'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp' l='44' c='(anonymousnamespace)::WebAssemblyExplicitLocals'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp' l='222' c='(anonymousnamespace)::WebAssemblyFixIrreducibleControlFlow'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLateEHPrepare.cpp' l='27' c='(anonymousnamespace)::WebAssemblyLateEHPrepare'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyLowerBrUnless.cpp' l='30' c='(anonymousnamespace)::WebAssemblyLowerBrUnless'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyMemIntrinsicResults.cpp' l='46' c='(anonymousnamespace)::WebAssemblyMemIntrinsicResults'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyOptimizeLiveIntervals.cpp' l='35' c='(anonymousnamespace)::WebAssemblyOptimizeLiveIntervals'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyPeephole.cpp' l='32' c='(anonymousnamespace)::WebAssemblyPeephole'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyPrepareForLiveIntervals.cpp' l='37' c='(anonymousnamespace)::WebAssemblyPrepareForLiveIntervals'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp' l='32' c='(anonymousnamespace)::WebAssemblyRegColoring'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyRegNumbering.cpp' l='34' c='(anonymousnamespace)::WebAssemblyRegNumbering'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp' l='44' c='(anonymousnamespace)::WebAssemblyRegStackify'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyReplacePhysRegs.cpp' l='35' c='(anonymousnamespace)::WebAssemblyReplacePhysRegs'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblySetP2AlignOperands.cpp' l='28' c='(anonymousnamespace)::WebAssemblySetP2AlignOperands'/>
<ovr f='llvm/llvm/lib/Target/X86/X86AvoidStoreForwardingBlocks.cpp' l='68' c='(anonymousnamespace)::X86AvoidSFBPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86CallFrameOptimization.cpp' l='60' c='(anonymousnamespace)::X86CallFrameOptimization'/>
<ovr f='llvm/llvm/lib/Target/X86/X86CmovConversion.cpp' l='102' c='(anonymousnamespace)::X86CmovConverterPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86CondBrFolding.cpp' l='62' c='(anonymousnamespace)::X86CondBrFoldingPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86DiscriminateMemOps.cpp' l='60' c='(anonymousnamespace)::X86DiscriminateMemOps'/>
<ovr f='llvm/llvm/lib/Target/X86/X86DomainReassignment.cpp' l='375' c='(anonymousnamespace)::X86DomainReassignment'/>
<ovr f='llvm/llvm/lib/Target/X86/X86EvexToVex.cpp' l='62' c='(anonymousnamespace)::EvexToVexInstPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ExpandPseudo.cpp' l='32' c='(anonymousnamespace)::X86ExpandPseudo'/>
<ovr f='llvm/llvm/lib/Target/X86/X86FixupBWInsts.cpp' l='74' c='(anonymousnamespace)::FixupBWInstPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86FixupLEAs.cpp' l='35' c='(anonymousnamespace)::FixupLEAPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86FixupSetCC.cpp' l='37' c='(anonymousnamespace)::X86FixupSetCCPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp' l='78' c='(anonymousnamespace)::X86FlagsCopyLoweringPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86FloatingPoint.cpp' l='59' c='(anonymousnamespace)::FPS'/>
<ovr f='llvm/llvm/lib/Target/X86/X86IndirectBranchTracking.cpp' l='37' c='(anonymousnamespace)::X86IndirectBranchTrackingPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InsertPrefetch.cpp' l='41' c='(anonymousnamespace)::X86InsertPrefetch'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='7279' c='(anonymousnamespace)::CGBR'/>
<ovr f='llvm/llvm/lib/Target/X86/X86InstrInfo.cpp' l='7390' c='(anonymousnamespace)::LDTLSCleanup'/>
<ovr f='llvm/llvm/lib/Target/X86/X86OptimizeLEAs.cpp' l='238' c='(anonymousnamespace)::OptimizeLEAPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86PadShortFunction.cpp' l='48' c='(anonymousnamespace)::PadShortFunc'/>
<ovr f='llvm/llvm/lib/Target/X86/X86RetpolineThunks.cpp' l='48' c='(anonymousnamespace)::X86RetpolineThunks'/>
<ovr f='llvm/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp' l='123' c='(anonymousnamespace)::X86SpeculativeLoadHardeningPass'/>
<ovr f='llvm/llvm/lib/Target/X86/X86VZeroUpper.cpp' l='46' c='(anonymousnamespace)::VZeroUpperInserter'/>
<ovr f='llvm/llvm/lib/Target/X86/X86WinAllocaExpander.cpp' l='35' c='(anonymousnamespace)::X86WinAllocaExpander'/>
<ovr f='llvm/llvm/lib/Target/XCore/XCoreFrameToArgsOffsetElim.cpp' l='24' c='(anonymousnamespace)::XCoreFTAOElim'/>
<ovr f='llvm/llvm/unittests/MI/LiveIntervalTest.cpp' l='76' c='(anonymousnamespace)::TestPass'/>
