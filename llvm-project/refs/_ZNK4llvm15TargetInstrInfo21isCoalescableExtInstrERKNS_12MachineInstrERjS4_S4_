<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='215' ll='218' type='bool llvm::TargetInstrInfo::isCoalescableExtInstr(const llvm::MachineInstr &amp; MI, unsigned int &amp; SrcReg, unsigned int &amp; DstReg, unsigned int &amp; SubIdx) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='210'>/// Return true if the instruction is a &quot;coalescable&quot; extension instruction.
  /// That is, it&apos;s like a copy where it&apos;s legal for the source to overlap the
  /// destination. e.g. X86::MOVSX64rr32. If this returns true, then it&apos;s
  /// expected the pre-extension value is available as a subreg of the result
  /// register. This also returns the sub-register index in SubIdx.</doc>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='460' u='c' c='_ZN12_GLOBAL__N_117PeepholeOptimizer16optimizeExtInstrERN4llvm12MachineInstrERNS1_17MachineBasicBlockERNS1_15SmallPtrSetImplIPS2_EE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp' l='516' u='c' c='_ZN4llvm12InstrEmitter14EmitSubregNodeEPNS_6SDNodeERNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EENS_6detail12DenseMapPairIS4_jEEEEbb'/>
