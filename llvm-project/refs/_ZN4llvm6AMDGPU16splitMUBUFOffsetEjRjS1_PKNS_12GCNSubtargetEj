<dec f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h' l='562' type='bool llvm::AMDGPU::splitMUBUFOffset(uint32_t Imm, uint32_t &amp; SOffset, uint32_t &amp; ImmOffset, const llvm::GCNSubtarget * Subtarget, uint32_t Align = 4)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='6572' u='c' c='_ZNK4llvm16SITargetLowering16setBufferOffsetsENS_7SDValueERNS_12SelectionDAGEPS1_j'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='6584' u='c' c='_ZNK4llvm16SITargetLowering16setBufferOffsetsENS_7SDValueERNS_12SelectionDAGEPS1_j'/>
<def f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp' l='1080' ll='1117' type='bool llvm::AMDGPU::splitMUBUFOffset(uint32_t Imm, uint32_t &amp; SOffset, uint32_t &amp; ImmOffset, const llvm::GCNSubtarget * Subtarget, uint32_t Align = 4)'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp' l='1073'>// Given Imm, split it into the values to put into the SOffset and ImmOffset
// fields in an MUBUF instruction. Return false if it is not possible (due to a
// hardware bug needing a workaround).
//
// The required alignment ensures that individual address components remain
// aligned if they are aligned to begin with. It also ensures that additional
// offsets within the given alignment can be added to the resulting ImmOffset.</doc>
