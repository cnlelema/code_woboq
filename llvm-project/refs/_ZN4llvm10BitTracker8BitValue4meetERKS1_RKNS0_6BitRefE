<def f='llvm/llvm/lib/Target/Hexagon/BitTracker.h' l='228' ll='249' type='bool llvm::BitTracker::BitValue::meet(const llvm::BitTracker::BitValue &amp; V, const llvm::BitTracker::BitRef &amp; Self)'/>
<use f='llvm/llvm/lib/Target/Hexagon/BitTracker.cpp' l='208' u='c' c='_ZN4llvm10BitTracker12RegisterCell4meetERKS1_j'/>
<doc f='llvm/llvm/lib/Target/Hexagon/BitTracker.h' l='214'>// The &quot;meet&quot; operation is the &quot;.&quot; operation in a semilattice (L, ., T, B):
  // (1)  x.x = x
  // (2)  x.y = y.x
  // (3)  x.(y.z) = (x.y).z
  // (4)  x.T = x  (i.e. T = &quot;top&quot;)
  // (5)  x.B = B  (i.e. B = &quot;bottom&quot;)
  //
  // This &quot;meet&quot; function will update the value of the &quot;*this&quot; object with
  // the newly calculated one, and return &quot;true&quot; if the value of *this has
  // changed, and &quot;false&quot; otherwise.
  // To prove that it satisfies the conditions (1)-(5), it is sufficient
  // to show that a relation
  //   x &lt;= y  &lt;=&gt;  x.y = x
  // defines a partial order (i.e. that &quot;meet&quot; is same as &quot;infimum&quot;).</doc>
