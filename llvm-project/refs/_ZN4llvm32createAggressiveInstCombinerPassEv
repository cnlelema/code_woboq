<dec f='llvm/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h' l='37' type='llvm::FunctionPass * llvm::createAggressiveInstCombinerPass()'/>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='72' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<doc f='llvm/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h' l='32'>//===----------------------------------------------------------------------===//
//
// AggressiveInstCombiner - Combine expression patterns to form expressions with
// fewer, simple instructions. This pass does not modify the CFG.
//</doc>
<def f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='345' ll='347' type='llvm::FunctionPass * llvm::createAggressiveInstCombinerPass()'/>
<use f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='350' u='c' c='LLVMAddAggressiveInstCombinerPass'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='339' u='c' c='_ZN4llvm18PassManagerBuilder31addFunctionSimplificationPassesERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='866' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
