<dec f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.h' l='42' type='bool llvm::RuntimeDyldELF::resolveAArch64ShortBranch(unsigned int SectionID, relocation_iterator RelI, const llvm::RelocationValueRef &amp; Value)'/>
<def f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp' l='1010' ll='1041' type='bool llvm::RuntimeDyldELF::resolveAArch64ShortBranch(unsigned int SectionID, relocation_iterator RelI, const llvm::RelocationValueRef &amp; Value)'/>
<use f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp' l='1060' u='c' c='_ZN4llvm14RuntimeDyldELF20resolveAArch64BranchEjRKNS_18RelocationValueRefENS_6object16content_iteratorINS4_13RelocationRefEEERSt3mapIS1_mSt4lessIS1_ESaISt4pairIS2_mEEE'/>
<doc f='llvm/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp' l='1001'>// Sometimes we don&apos;t need to create thunk for a branch.
// This typically happens when branch target is located
// in the same object file. In such case target is either
// a weak symbol or symbol in a different executable section.
// This function checks if branch target is located in the
// same object file and if distance between source and target
// fits R_AARCH64_CALL26 relocation. If both conditions are
// met, it emits direct jump to the target and returns true.
// Otherwise false is returned and thunk is created.</doc>
