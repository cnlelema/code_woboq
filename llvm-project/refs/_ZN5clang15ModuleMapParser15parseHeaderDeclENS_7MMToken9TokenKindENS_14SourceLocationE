<dec f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1431' type='void clang::ModuleMapParser::parseHeaderDecl(MMToken::TokenKind , clang::SourceLocation LeadingLoc)'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2030' u='c' c='_ZN5clang15ModuleMapParser15parseModuleDeclEv'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2036' u='c' c='_ZN5clang15ModuleMapParser15parseModuleDeclEv'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2043' u='c' c='_ZN5clang15ModuleMapParser15parseModuleDeclEv'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2047' u='c' c='_ZN5clang15ModuleMapParser15parseModuleDeclEv'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2051' u='c' c='_ZN5clang15ModuleMapParser15parseModuleDeclEv'/>
<def f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2236' ll='2354' type='void clang::ModuleMapParser::parseHeaderDecl(MMToken::TokenKind LeadingToken, clang::SourceLocation LeadingLoc)'/>
<doc f='llvm/clang/lib/Lex/ModuleMap.cpp' l='2227'>/// Parse a header declaration.
///
///   header-declaration:
///     &apos;textual&apos;[opt] &apos;header&apos; string-literal
///     &apos;private&apos; &apos;textual&apos;[opt] &apos;header&apos; string-literal
///     &apos;exclude&apos; &apos;header&apos; string-literal
///     &apos;umbrella&apos; &apos;header&apos; string-literal
///
/// FIXME: Support &apos;private textual header&apos;.</doc>
