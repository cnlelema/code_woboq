<dec f='llvm/llvm/lib/Target/X86/X86FrameLowering.h' l='212' type='unsigned int llvm::X86FrameLowering::getPSPSlotOffsetFromSP(const llvm::MachineFunction &amp; MF) const'/>
<use f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='1328' u='c' c='_ZNK4llvm16X86FrameLowering12emitPrologueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='1422' u='c' c='_ZNK4llvm16X86FrameLowering12emitPrologueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='1545' ll='1553' type='unsigned int llvm::X86FrameLowering::getPSPSlotOffsetFromSP(const llvm::MachineFunction &amp; MF) const'/>
<use f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='1568' u='c' c='_ZNK4llvm16X86FrameLowering24getWinEHFuncletFrameSizeERKNS_15MachineFunctionE'/>
<doc f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='1532'>// CLR funclets use a special &quot;Previous Stack Pointer Symbol&quot; slot on the
// stack. It holds a pointer to the bottom of the root function frame.  The
// establisher frame pointer passed to a nested funclet may point to the
// (mostly empty) frame of its parent funclet, but it will need to find
// the frame of the root function to access locals.  To facilitate this,
// every funclet copies the pointer to the bottom of the root function
// frame into a PSPSym slot in its own (mostly empty) stack frame. Using the
// same offset for the PSPSym in the root function frame that&apos;s used in the
// funclets&apos; frames allows each funclet to dynamically accept any ancestor
// frame as its establisher argument (the runtime doesn&apos;t guarantee the
// immediate parent for some reason lost to history), and also allows the GC,
// which uses the PSPSym for some bookkeeping, to find it in any funclet&apos;s
// frame with only a single offset reported for the entire method.</doc>
