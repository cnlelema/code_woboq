<dec f='llvm/llvm/lib/Target/ARM/ARMISelLowering.h' l='709' type='llvm::SDValue llvm::ARMTargetLowering::BuildSDIVPow2(llvm::SDNode * N, const llvm::APInt &amp; Divisor, llvm::SelectionDAG &amp; DAG, SmallVectorImpl&lt;llvm::SDNode *&gt; &amp; Created) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='3849' c='_ZNK4llvm14TargetLowering13BuildSDIVPow2EPNS_6SDNodeERKNS_5APIntERNS_12SelectionDAGERNS_15SmallVectorImplIS2_EE'/>
<def f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='7805' ll='7842' type='llvm::SDValue llvm::ARMTargetLowering::BuildSDIVPow2(llvm::SDNode * N, const llvm::APInt &amp; Divisor, llvm::SelectionDAG &amp; DAG, SmallVectorImpl&lt;llvm::SDNode *&gt; &amp; Created) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='7801'>// This is a code size optimisation: return the original SDIV node to
// DAGCombiner when we don&apos;t want to expand SDIV into a sequence of
// instructions, and an empty node otherwise which will cause the
// SDIV to be expanded in DAGCombine.</doc>
