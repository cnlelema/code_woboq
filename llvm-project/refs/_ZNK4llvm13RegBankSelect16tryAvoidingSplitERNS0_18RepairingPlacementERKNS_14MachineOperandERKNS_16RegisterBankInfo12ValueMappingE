<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='605' type='void llvm::RegBankSelect::tryAvoidingSplit(RegBankSelect::RepairingPlacement &amp; RepairPt, const llvm::MachineOperand &amp; MO, const RegisterBankInfo::ValueMapping &amp; ValMapping) const'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='323' ll='440' type='void llvm::RegBankSelect::tryAvoidingSplit(RegBankSelect::RepairingPlacement &amp; RepairPt, const llvm::MachineOperand &amp; MO, const RegisterBankInfo::ValueMapping &amp; ValMapping) const'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='500' u='c' c='_ZN4llvm13RegBankSelect14computeMappingERNS_12MachineInstrERKNS_16RegisterBankInfo18InstructionMappingERNS_15SmallVectorImplINS0_18RepairingPlacementE7539924'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='597'>/// When \p RepairPt involves splitting to repair \p MO for the
  /// given \p ValMapping, try to change the way we repair such that
  /// the splitting is not required anymore.
  ///
  /// \pre \p RepairPt.hasSplit()
  /// \pre \p MO == MO.getParent()-&gt;getOperand(\p RepairPt.getOpIdx())
  /// \pre \p ValMapping is the mapping of \p MO for MO.getParent()
  ///      that implied \p RepairPt.</doc>
