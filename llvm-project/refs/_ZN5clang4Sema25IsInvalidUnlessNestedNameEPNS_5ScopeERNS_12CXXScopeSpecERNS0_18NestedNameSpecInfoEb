<dec f='llvm/clang/include/clang/Sema/Sema.h' l='5648' type='bool clang::Sema::IsInvalidUnlessNestedName(clang::Scope * S, clang::CXXScopeSpec &amp; SS, clang::Sema::NestedNameSpecInfo &amp; IdInfo, bool EnteringContext)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='399' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbPbbPPNS_14IdentifierInfoEb'/>
<def f='llvm/clang/lib/Sema/SemaCXXScopeSpec.cpp' l='878' ll='886' type='bool clang::Sema::IsInvalidUnlessNestedName(clang::Scope * S, clang::CXXScopeSpec &amp; SS, clang::Sema::NestedNameSpecInfo &amp; IdInfo, bool EnteringContext)'/>
<doc f='llvm/clang/lib/Sema/SemaCXXScopeSpec.cpp' l='872'>/// IsInvalidUnlessNestedName - This method is used for error recovery
/// purposes to determine whether the specified identifier is only valid as
/// a nested name specifier, for example a namespace name.  It is
/// conservatively correct to always return false from this method.
///
/// The arguments are the same as those passed to ActOnCXXNestedNameSpecifier.</doc>
