<use f='llvm/llvm/utils/unittest/googlemock/src/gmock-matchers.cc' l='229' u='c' c='_ZN7testing8internal22MaxBipartiteMatchState7ComputeEv'/>
<def f='llvm/llvm/utils/unittest/googlemock/src/gmock-matchers.cc' l='259' ll='285' type='bool testing::internal::MaxBipartiteMatchState::TryAugment(size_t ilhs, ::std::vector&lt;char&gt; * seen)'/>
<use f='llvm/llvm/utils/unittest/googlemock/src/gmock-matchers.cc' l='277' u='c' c='_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE'/>
<doc f='llvm/llvm/utils/unittest/googlemock/src/gmock-matchers.cc' l='243'>// Perform a depth-first search from left node ilhs to the sink.  If a
  // path is found, flow is added to the network by linking the left and
  // right vector elements corresponding each segment of the path.
  // Returns true if a path to sink was found, which means that a unit of
  // flow was added to the network. The &apos;seen&apos; vector elements correspond
  // to right nodes and are marked to eliminate cycles from the search.
  //
  // Left nodes will only be explored at most once because they
  // are accessible from at most one right node in the residual flow
  // graph.
  //
  // Note that left_[ilhs] is the only element of left_ that TryAugment will
  // potentially transition from kUnused to another value. Any other
  // left_ element holding kUnused before TryAugment will be holding it
  // when TryAugment returns.
  //</doc>
