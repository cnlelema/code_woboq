<dec f='llvm/clang/include/clang-c/Index.h' l='272' type='CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)'/>
<doc f='llvm/clang/include/clang-c/Index.h' l='232'>/**
 * Provides a shared context for creating translation units.
 *
 * It provides two options:
 *
 * - excludeDeclarationsFromPCH: When non-zero, allows enumeration of &quot;local&quot;
 * declarations (when loading any new translation units). A &quot;local&quot; declaration
 * is one that belongs in the translation unit itself and not in a precompiled
 * header that was used by the translation unit. If zero, all declarations
 * will be enumerated.
 *
 * Here is an example:
 *
 * \code
 *   // excludeDeclsFromPCH = 1, displayDiagnostics=1
 *   Idx = clang_createIndex(1, 1);
 *
 *   // IndexTest.pch was produced with the following command:
 *   // &quot;clang -x c IndexTest.h -emit-ast -o IndexTest.pch&quot;
 *   TU = clang_createTranslationUnit(Idx, &quot;IndexTest.pch&quot;);
 *
 *   // This will load all the symbols from &apos;IndexTest.pch&apos;
 *   clang_visitChildren(clang_getTranslationUnitCursor(TU),
 *                       TranslationUnitVisitor, 0);
 *   clang_disposeTranslationUnit(TU);
 *
 *   // This will load all the symbols from &apos;IndexTest.c&apos;, excluding symbols
 *   // from &apos;IndexTest.pch&apos;.
 *   char *args[] = { &quot;-Xclang&quot;, &quot;-include-pch=IndexTest.pch&quot; };
 *   TU = clang_createTranslationUnitFromSourceFile(Idx, &quot;IndexTest.c&quot;, 2, args,
 *                                                  0, 0);
 *   clang_visitChildren(clang_getTranslationUnitCursor(TU),
 *                       TranslationUnitVisitor, 0);
 *   clang_disposeTranslationUnit(TU);
 * \endcode
 *
 * This process of creating the &apos;pch&apos;, loading it separately, and using it (via
 * -include-pch) allows &apos;excludeDeclsFromPCH&apos; to remove redundant callbacks
 * (which gives the indexer the same performance benefit as the compiler).
 */</doc>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='1885' u='c' c='print_target_info'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='1977' u='c' c='perform_test_load_tu'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2005' u='c' c='perform_test_load_source'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2081' u='c' c='perform_test_reparse_source'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2161' u='c' c='perform_single_file_parse'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2210' u='c' c='perform_file_scan'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2637' u='c' c='perform_code_completion'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='2789' u='c' c='inspect_cursor_at'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='3083' u='c' c='find_file_refs_at'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='3189' u='c' c='find_file_includes_in'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='3893' u='c' c='index_file'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='3937' u='c' c='index_tu'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='3972' u='c' c='index_compile_db'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='4106' u='c' c='perform_token_annotation'/>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='4497' u='c' c='write_pch_file'/>
<def f='llvm/clang/tools/libclang/CIndex.cpp' l='3261' ll='3294' type='CXIndex clang_createIndex(int excludeDeclarationsFromPCH, int displayDiagnostics)'/>
<use f='llvm/clang/unittests/libclang/LibclangTest.cpp' l='372' u='c' c='_ZN17LibclangParseTest5SetUpEv'/>
