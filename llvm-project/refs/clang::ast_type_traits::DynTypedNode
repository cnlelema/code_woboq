<def f='llvm/clang/include/clang/AST/ASTTypeTraits.h' l='230' ll='464'/>
<size>1</size>
<doc f='llvm/clang/include/clang/AST/ASTTypeTraits.h' l='218'>/// A dynamically typed AST node container.
///
/// Stores an AST node in a type safe way. This allows writing code that
/// works with different kinds of AST nodes, despite the fact that they don&apos;t
/// have a common base class.
///
/// Use \c create(Node) to create a \c DynTypedNode from an AST node,
/// and \c get&lt;T&gt;() to retrieve the node as type T if the types match.
///
/// See \c ASTNodeKind for which node base types are currently supported;
/// You can create DynTypedNodes for all nodes in the inheritance hierarchy of
/// the supported base types.</doc>
<fun r='_ZN5clang15ast_type_traits12DynTypedNode6createERKT_'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode3getEv'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode12getUncheckedEv'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode11getNodeKindEv'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode18getMemoizationDataEv'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode5printERN4llvm11raw_ostreamERKNS_14PrintingPolicyE'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode4dumpERN4llvm11raw_ostreamERNS_13SourceManagerE'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNode14getSourceRangeEv'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNodeltERKS1_'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNodeeqERKS1_'/>
<fun r='_ZNK5clang15ast_type_traits12DynTypedNodeneERKS1_'/>
<mbr r='clang::ast_type_traits::DynTypedNode::NodeKind' t='clang::ast_type_traits::ASTNodeKind'/>
<mbr r='clang::ast_type_traits::DynTypedNode::Storage' t='int'/>
