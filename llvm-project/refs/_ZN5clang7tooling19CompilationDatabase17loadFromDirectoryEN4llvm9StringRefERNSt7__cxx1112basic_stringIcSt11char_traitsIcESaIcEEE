<dec f='llvm/clang/include/clang/Tooling/CompilationDatabase.h' l='103' type='static std::unique_ptr&lt;CompilationDatabase&gt; clang::tooling::CompilationDatabase::loadFromDirectory(llvm::StringRef BuildDirectory, std::string &amp; ErrorMessage)'/>
<doc f='llvm/clang/include/clang/Tooling/CompilationDatabase.h' l='90'>/// Loads a compilation database from a build directory.
  ///
  /// Looks at the specified &apos;BuildDirectory&apos; and creates a compilation database
  /// that allows to query compile commands for source files in the
  /// corresponding source tree.
  ///
  /// Returns NULL and sets ErrorMessage if we were not able to build up a
  /// compilation database for the build directory.
  ///
  /// FIXME: Currently only supports JSON compilation databases, which
  /// are named &apos;compile_commands.json&apos; in the given directory. Extend this
  /// for other build types (like ninja build files).</doc>
<def f='llvm/clang/lib/Tooling/CompilationDatabase.cpp' l='63' ll='79' type='static std::unique_ptr&lt;CompilationDatabase&gt; clang::tooling::CompilationDatabase::loadFromDirectory(llvm::StringRef BuildDirectory, std::string &amp; ErrorMessage)'/>
<use f='llvm/clang/lib/Tooling/CompilationDatabase.cpp' l='90' u='c' c='_ZL36findCompilationDatabaseFromDirectoryN4llvm9StringRefERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='llvm/clang/tools/libclang/CXCompilationDatabase.cpp' l='18' u='c' c='clang_CompilationDatabase_fromDirectory'/>
