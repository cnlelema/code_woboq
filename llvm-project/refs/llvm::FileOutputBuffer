<def f='llvm/llvm/include/llvm/Support/FileOutputBuffer.h' l='30' ll='81'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Support/FileOutputBuffer.h' l='23'>/// FileOutputBuffer - This interface provides simple way to create an in-memory
/// buffer which will be written to a file. During the lifetime of these
/// objects, the content or existence of the specified file is undefined. That
/// is, creating an OutputBuffer for a file may immediately remove the file.
/// If the FileOutputBuffer is committed, the target file&apos;s content will become
/// the buffer content at the time of the commit.  If the FileOutputBuffer is
/// not committed, the file will be deleted in the FileOutputBuffer destructor.</doc>
<fun r='_ZN4llvm16FileOutputBuffer6createENS_9StringRefEmj'/>
<fun r='_ZNK4llvm16FileOutputBuffer14getBufferStartEv'/>
<fun r='_ZNK4llvm16FileOutputBuffer12getBufferEndEv'/>
<fun r='_ZNK4llvm16FileOutputBuffer13getBufferSizeEv'/>
<fun r='_ZNK4llvm16FileOutputBuffer7getPathEv'/>
<fun r='_ZN4llvm16FileOutputBuffer6commitEv'/>
<fun r='_ZN4llvm16FileOutputBufferD1Ev'/>
<fun r='_ZN4llvm16FileOutputBuffer7discardEv'/>
<fun r='_ZN4llvm16FileOutputBufferC1ENS_9StringRefE'/>
<mbr r='llvm::FileOutputBuffer::FinalPath' o='64' t='std::string'/>
<ovr f='llvm/llvm/lib/Support/FileOutputBuffer.cpp' l='34' c='(anonymousnamespace)::OnDiskBuffer'/>
<ovr f='llvm/llvm/lib/Support/FileOutputBuffer.cpp' l='76' c='(anonymousnamespace)::InMemoryBuffer'/>
<fun r='_ZN4llvm16FileOutputBuffer6createENS_9StringRefEmj'/>
