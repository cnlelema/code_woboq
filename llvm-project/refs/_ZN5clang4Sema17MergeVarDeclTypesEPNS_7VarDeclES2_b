<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2641' type='void clang::Sema::MergeVarDeclTypes(clang::VarDecl * New, clang::VarDecl * Old, bool MergeTypeWithOld)'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3701' ll='3786' type='void clang::Sema::MergeVarDeclTypes(clang::VarDecl * New, clang::VarDecl * Old, bool MergeTypeWithOld)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3905' u='c' c='_ZN5clang4Sema12MergeVarDeclEPNS_7VarDeclERNS_12LookupResultE'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3911' u='c' c='_ZN5clang4Sema12MergeVarDeclEPNS_7VarDeclERNS_12LookupResultE'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='11157' u='c' c='_ZN5clang4Sema29DeduceVariableDeclarationTypeEPNS_7VarDeclEbPNS_4ExprE'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='3694'>/// MergeVarDeclTypes - We parsed a variable &apos;New&apos; which has the same name and
/// scope as a previous declaration &apos;Old&apos;.  Figure out how to merge their types,
/// emitting diagnostics as appropriate.
///
/// Declarations using the auto type specifier (C++ [decl.spec.auto]) call back
/// to here in AddInitializerToDecl. We can&apos;t check them before the initializer
/// is attached.</doc>
