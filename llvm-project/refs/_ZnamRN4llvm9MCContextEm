<def f='llvm/llvm/include/llvm/MC/MCContext.h' l='731' ll='734' type='void * operator new[](size_t Bytes, llvm::MCContext &amp; C, size_t Alignment = 8)'/>
<doc f='llvm/llvm/include/llvm/MC/MCContext.h' l='712'>/// This placement form of operator new[] uses the MCContext&apos;s allocator for
/// obtaining memory. It is a non-throwing new[], which means that it returns
/// null on error.
/// Usage looks like this (assuming there&apos;s an MCContext &apos;Context&apos; in scope):
/// \code
/// // Default alignment (8)
/// char *data = new (Context) char[10];
/// // Specific alignment
/// char *data = new (Context, 4) char[10];
/// \endcode
/// Please note that you cannot use delete on the pointer; it must be
/// deallocated using an explicit destructor call followed by
/// \c Context.Deallocate(Ptr).
///
/// \param Bytes The number of bytes to allocate. Calculated by the compiler.
/// \param C The MCContext that provides the allocator.
/// \param Alignment The alignment of the allocated memory (if the underlying
///                  allocator supports it).
/// \return The allocated memory. Could be NULL.</doc>
