<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='200' ll='201' type='void clang::threadSafety::ThreadSafetyHandler::handleNegativeNotHeld(llvm::StringRef Kind, Name LockName, Name Neg, clang::SourceLocation Loc)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='1299' u='c' c='_ZN12_GLOBAL__N_120ThreadSafetyAnalyzer7addLockERNS_7FactSetESt10unique_ptrINS_9FactEntryESt14default_deleteIS4_EEN4llvm9StringRefEb'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='193'>/// Warn when acquiring a lock that the negative capability is not held.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param LockName -- The name for the lock expression, to be printed in the
  /// diagnostic.
  /// \param Neg -- The name of the negative capability to be printed in the
  /// diagnostic.
  /// \param Loc -- The location of the protected operation.</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1829' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter21handleNegativeNotHeldEN4llvm9StringRefES4_S4_NS_14SourceLocationE'/>
