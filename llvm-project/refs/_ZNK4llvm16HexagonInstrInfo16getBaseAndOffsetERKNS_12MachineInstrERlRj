<dec f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.h' l='442' type='llvm::MachineOperand * llvm::HexagonInstrInfo::getBaseAndOffset(const llvm::MachineInstr &amp; MI, int64_t &amp; Offset, unsigned int &amp; AccessSize) const'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='2934' u='c' c='_ZNK4llvm16HexagonInstrInfo23getMemOperandWithOffsetERKNS_12MachineInstrERPKNS_14MachineOperandERlPKNS_18TargetRegisterInfoE'/>
<def f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3147' ll='3177' type='llvm::MachineOperand * llvm::HexagonInstrInfo::getBaseAndOffset(const llvm::MachineInstr &amp; MI, int64_t &amp; Offset, unsigned int &amp; AccessSize) const'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3143'>// Returns the base register in a memory access (load/store). The offset is
// returned in Offset and the access size is returned in AccessSize.
// If the base operand has a subregister or the offset field does not contain
// an immediate value, return nullptr.</doc>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp' l='280' u='c' c='_ZN4llvm16HexagonSubtarget20BankConflictMutation5applyEPNS_17ScheduleDAGInstrsE'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp' l='293' u='c' c='_ZN4llvm16HexagonSubtarget20BankConflictMutation5applyEPNS_17ScheduleDAGInstrsE'/>
