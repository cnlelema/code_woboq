<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1833' type='ExprResult clang::Parser::ParseCXXTypeConstructExpression(const clang::DeclSpec &amp; DS)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='1831'>//===--------------------------------------------------------------------===//
  // C++ 5.2.3: Explicit type conversion (functional notation)</doc>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1320' u='c' c='_ZN5clang6Parser19ParseCastExpressionEbbRbNS0_13TypeCastStateEb'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1762' ll='1821' type='ExprResult clang::Parser::ParseCXXTypeConstructExpression(const clang::DeclSpec &amp; DS)'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1749'>/// ParseCXXTypeConstructExpression - Parse construction of a specified type.
/// Can be interpreted either as function-style casting (&quot;int(x)&quot;)
/// or class type construction (&quot;ClassType(x,y,z)&quot;)
/// or creation of a value-initialized type (&quot;int()&quot;).
/// See [C++ 5.2.3].
///
///       postfix-expression: [C++ 5.2p1]
///         simple-type-specifier &apos;(&apos; expression-list[opt] &apos;)&apos;
/// [C++0x] simple-type-specifier braced-init-list
///         typename-specifier &apos;(&apos; expression-list[opt] &apos;)&apos;
/// [C++0x] typename-specifier braced-init-list
///
/// In C++1z onwards, the type specifier can also be a template-name.</doc>
<use f='llvm/clang/lib/Parse/ParseObjc.cpp' l='2939' u='c' c='_ZN5clang6Parser26ParseObjCXXMessageReceiverERbRPv'/>
