<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='657' type='DenseMap&lt;const llvm::SCEV *, const llvm::SCEV *&gt;'/>
<use f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='663' u='c' c='_ZN4llvm18SCEVRewriteVisitor5visitEPKNS_4SCEVE'/>
<use f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='664' u='c' c='_ZN4llvm18SCEVRewriteVisitor5visitEPKNS_4SCEVE'/>
<use f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='667' u='c' c='_ZN4llvm18SCEVRewriteVisitor5visitEPKNS_4SCEVE'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h' l='652'>// Memoize the result of each visit so that we only compute once for
    // the same input SCEV. This is to avoid redundant computations when
    // a SCEV is referenced by multiple SCEVs. Without memoization, this
    // visit algorithm would have exponential time complexity in the worst
    // case, causing the compiler to hang on certain tests.</doc>
