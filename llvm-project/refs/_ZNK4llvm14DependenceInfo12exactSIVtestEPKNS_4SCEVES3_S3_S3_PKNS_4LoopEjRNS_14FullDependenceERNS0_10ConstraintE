<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='686' type='bool llvm::DependenceInfo::exactSIVtest(const llvm::SCEV * SrcCoeff, const llvm::SCEV * DstCoeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurrentLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1493' ll='1657' type='bool llvm::DependenceInfo::exactSIVtest(const llvm::SCEV * SrcCoeff, const llvm::SCEV * DstCoeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2177' u='c' c='_ZNK4llvm14DependenceInfo7testSIVEPKNS_4SCEVES3_RjRNS_14FullDependenceERNS0_10ConstraintERS3_'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1478'>// exactSIVtest -
// When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*i],
// where i is an induction variable, c1 and c2 are loop invariant, and a1
// and a2 are constant, we can solve it exactly using an algorithm developed
// by Banerjee and Wolfe. See Section 2.5.3 in
//
//        Optimizing Supercompilers for Supercomputers
//        Michael Wolfe
//        MIT Press, 1989
//
// It&apos;s slower than the specialized tests (strong SIV, weak-zero SIV, etc),
// so use them if possible. They&apos;re also a bit better with symbolics and,
// in the case of the strong SIV test, can compute Distances.
//
// Return true if dependence disproved.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='677'>/// ExactSIVtest - Tests the SIV subscript pair
    /// (Src and Dst) for dependence.
    /// Things of the form [c1 + a1*i] and [c2 + a2*i],
    /// where i is an induction variable, c1 and c2 are loop invariant,
    /// and a1 and a2 are constant.
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// Sets appropriate direction entry.
    /// Set consistent to false.</doc>
