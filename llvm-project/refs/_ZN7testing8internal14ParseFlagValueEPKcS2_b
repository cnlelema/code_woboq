<def f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='5015' ll='5041' type='const char * testing::internal::ParseFlagValue(const char * str, const char * flag, bool def_optional)'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='5055' u='c' c='_ZN7testing8internal13ParseBoolFlagEPKcS2_Pb'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='5072' u='c' c='_ZN7testing8internal14ParseInt32FlagEPKcS2_Pi'/>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='5089' u='c' c='_ZN7testing8internal15ParseStringFlagEPKcS2_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='5010'>// Parses a string as a command line flag.  The string should have
// the format &quot;--flag=value&quot;.  When def_optional is true, the &quot;=value&quot;
// part can be omitted.
//
// Returns the value of the flag, or NULL if the parsing failed.</doc>
