<dec f='llvm/llvm/include/llvm/CodeGen/LiveRangeEdit.h' l='245' type='void llvm::LiveRangeEdit::eliminateDeadDefs(SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; Dead, ArrayRef&lt;unsigned int&gt; RegsBeingSpilled = None, AliasAnalysis * AA = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='698' u='c' c='_ZN12_GLOBAL__N_113InlineSpiller16reMaterializeAllEv'/>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='1098' u='c' c='_ZN12_GLOBAL__N_113InlineSpiller8spillAllEv'/>
<use f='llvm/llvm/lib/CodeGen/InlineSpiller.cpp' l='1537' u='c' c='_ZN12_GLOBAL__N_116HoistSpillHelper14hoistAllSpillsEv'/>
<doc f='llvm/llvm/include/llvm/CodeGen/LiveRangeEdit.h' l='239'>/// eliminateDeadDefs - Try to delete machine instructions that are now dead
  /// (allDefsAreDead returns true). This may cause live intervals to be trimmed
  /// and further dead efs to be eliminated.
  /// RegsBeingSpilled lists registers currently being spilled by the register
  /// allocator.  These registers should not be split into new intervals
  /// as currently those new intervals are not guaranteed to spill.</doc>
<def f='llvm/llvm/lib/CodeGen/LiveRangeEdit.cpp' l='390' ll='446' type='void llvm::LiveRangeEdit::eliminateDeadDefs(SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; Dead, ArrayRef&lt;unsigned int&gt; RegsBeingSpilled = None, AliasAnalysis * AA = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/RegisterCoalescer.cpp' l='547' u='c' c='_ZN12_GLOBAL__N_117RegisterCoalescer17eliminateDeadDefsEv'/>
<use f='llvm/llvm/lib/CodeGen/SplitKit.cpp' l='1432' u='c' c='_ZN4llvm11SplitEditor18deleteRematVictimsEv'/>
