<def f='llvm/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h' l='167' ll='169' type='bool llvm::TargetSubtargetInfo::isDependencyBreaking(const llvm::MachineInstr * MI, llvm::APInt &amp; Mask) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h' l='160'>/// Returns true if MI is a dependency breaking instruction for the subtarget.
  ///
  /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify
  /// all dependency breaking instructions (i.e. not just zero-idioms).
  /// 
  /// As for `isZeroIdiom`, this method returns a mask of &quot;broken&quot; dependencies.
  /// (See method `isZeroIdiom` for a detailed description of Mask).</doc>
