<dec f='llvm/llvm/include/llvm-c/ExecutionEngine.h' l='108' type='LLVMBool LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef * OutJIT, LLVMModuleRef M, struct LLVMMCJITCompilerOptions * Options, size_t SizeOfOptions, char ** OutError)'/>
<doc f='llvm/llvm/include/llvm-c/ExecutionEngine.h' l='91'>/**
 * Create an MCJIT execution engine for a module, with the given options. It is
 * the responsibility of the caller to ensure that all fields in Options up to
 * the given SizeOfOptions are initialized. It is correct to pass a smaller
 * value of SizeOfOptions that omits some fields. The canonical way of using
 * this is:
 *
 * LLVMMCJITCompilerOptions options;
 * LLVMInitializeMCJITCompilerOptions(&amp;options, sizeof(options));
 * ... fill in those options you care about
 * LLVMCreateMCJITCompilerForModule(&amp;jit, mod, &amp;options, sizeof(options),
 *                                  &amp;error);
 *
 * Note that this is also correct, though possibly suboptimal:
 *
 * LLVMCreateMCJITCompilerForModule(&amp;jit, mod, 0, 0, &amp;error);
 */</doc>
<def f='llvm/llvm/lib/ExecutionEngine/ExecutionEngineBindings.cpp' l='160' ll='214' type='LLVMBool LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef * OutJIT, LLVMModuleRef M, LLVMMCJITCompilerOptions * PassedOptions, size_t SizeOfPassedOptions, char ** OutError)'/>
<use f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITCAPITest.cpp' l='282' u='c' c='_ZN12_GLOBAL__N_113MCJITCAPITest16buildMCJITEngineEv'/>
