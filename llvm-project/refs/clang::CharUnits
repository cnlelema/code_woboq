<def f='llvm/clang/include/clang/AST/CharUnits.h' l='37' ll='204'/>
<size>8</size>
<doc f='llvm/clang/include/clang/AST/CharUnits.h' l='22'>/// CharUnits - This is an opaque type for sizes expressed in character units.
  /// Instances of this type represent a quantity as a multiple of the size
  /// of the standard C type, char, on the target architecture. As an opaque
  /// type, CharUnits protects you from accidentally combining operations on
  /// quantities in bit units and character units.
  ///
  /// In both C and C++, an object of type &apos;char&apos;, &apos;signed char&apos;, or &apos;unsigned
  /// char&apos; occupies exactly one byte, so &apos;character unit&apos; and &apos;byte&apos; refer to
  /// the same quantity of storage. However, we use the term &apos;character unit&apos;
  /// rather than &apos;byte&apos; to avoid an implication that a character unit is
  /// exactly 8 bits.
  ///
  /// For portability, never assume that a target character is 8 bits wide. Use
  /// CharUnit values wherever you calculate sizes, offsets, or alignments
  /// in character units.</doc>
<mbr r='clang::CharUnits::Quantity' o='0' t='QuantityType'/>
<fun r='_ZN5clang9CharUnitsC1El'/>
<fun r='_ZN5clang9CharUnitsC1Ev'/>
<fun r='_ZN5clang9CharUnits4ZeroEv'/>
<fun r='_ZN5clang9CharUnits3OneEv'/>
<fun r='_ZN5clang9CharUnits12fromQuantityEl'/>
<fun r='_ZN5clang9CharUnitspLERKS0_'/>
<fun r='_ZN5clang9CharUnitsppEv'/>
<fun r='_ZN5clang9CharUnitsppEi'/>
<fun r='_ZN5clang9CharUnitsmIERKS0_'/>
<fun r='_ZN5clang9CharUnitsmmEv'/>
<fun r='_ZN5clang9CharUnitsmmEi'/>
<fun r='_ZNK5clang9CharUnitseqERKS0_'/>
<fun r='_ZNK5clang9CharUnitsneERKS0_'/>
<fun r='_ZNK5clang9CharUnitsltERKS0_'/>
<fun r='_ZNK5clang9CharUnitsleERKS0_'/>
<fun r='_ZNK5clang9CharUnitsgtERKS0_'/>
<fun r='_ZNK5clang9CharUnitsgeERKS0_'/>
<fun r='_ZNK5clang9CharUnits6isZeroEv'/>
<fun r='_ZNK5clang9CharUnits5isOneEv'/>
<fun r='_ZNK5clang9CharUnits10isPositiveEv'/>
<fun r='_ZNK5clang9CharUnits10isNegativeEv'/>
<fun r='_ZNK5clang9CharUnits12isPowerOfTwoEv'/>
<fun r='_ZNK5clang9CharUnits12isMultipleOfES0_'/>
<fun r='_ZNK5clang9CharUnitsmlEl'/>
<fun r='_ZN5clang9CharUnitsmLEl'/>
<fun r='_ZNK5clang9CharUnitsdvEl'/>
<fun r='_ZN5clang9CharUnitsdVEl'/>
<fun r='_ZNK5clang9CharUnitsdvERKS0_'/>
<fun r='_ZNK5clang9CharUnitsrmEl'/>
<fun r='_ZNK5clang9CharUnitsrmERKS0_'/>
<fun r='_ZNK5clang9CharUnitsplERKS0_'/>
<fun r='_ZNK5clang9CharUnitsmiERKS0_'/>
<fun r='_ZNK5clang9CharUnitsngEv'/>
<fun r='_ZNK5clang9CharUnits11getQuantityEv'/>
<fun r='_ZNK5clang9CharUnits7alignToERKS0_'/>
<fun r='_ZNK5clang9CharUnits17alignmentAtOffsetES0_'/>
<fun r='_ZNK5clang9CharUnits23alignmentOfArrayElementES0_'/>
