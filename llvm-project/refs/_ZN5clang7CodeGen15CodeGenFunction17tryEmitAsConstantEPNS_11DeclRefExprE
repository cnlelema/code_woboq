<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3586' type='clang::CodeGen::CodeGenFunction::ConstantEmission clang::CodeGen::CodeGenFunction::tryEmitAsConstant(clang::DeclRefExpr * refExpr)'/>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='2296' ll='2357' type='CodeGenFunction::ConstantEmission clang::CodeGen::CodeGenFunction::tryEmitAsConstant(clang::DeclRefExpr * refExpr)'/>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='2374' u='c' c='_ZN5clang7CodeGen15CodeGenFunction17tryEmitAsConstantEPKNS_10MemberExprE'/>
<doc f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='2291'>/// Try to emit a reference to the given value without producing it as
/// an l-value.  This is actually more than an optimization: we can&apos;t
/// produce an l-value for variables that we never actually captured
/// in a block or lambda, which means const int variables or constexpr
/// literals or similar.</doc>
<use f='llvm/clang/lib/CodeGen/CGExprComplex.cpp' l='141' u='c' c='_ZN12_GLOBAL__N_118ComplexExprEmitter16VisitDeclRefExprEPN5clang11DeclRefExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='527' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter16VisitDeclRefExprEPN5clang11DeclRefExprE'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='2759' u='c' c='_ZL28tryEmitARCRetainLoadOfScalarRN5clang7CodeGen15CodeGenFunctionEPKNS_4ExprE'/>
<use f='llvm/clang/lib/CodeGen/CGStmtOpenMP.cpp' l='764' u='c' c='_ZN5clang7CodeGen15CodeGenFunction25EmitOMPFirstprivateClauseERKNS_22OMPExecutableDirectiveERNS1_15OMPPrivateScopeE'/>
