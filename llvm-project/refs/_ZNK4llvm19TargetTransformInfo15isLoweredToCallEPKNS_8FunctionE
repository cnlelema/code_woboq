<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='343' type='bool llvm::TargetTransformInfo::isLoweredToCall(const llvm::Function * F) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='331'>/// Test whether calls to a function lower to actual program function
  /// calls.
  ///
  /// The idea is to test whether the program is likely to require a &apos;call&apos;
  /// instruction or equivalent in order to call the given function.
  ///
  /// FIXME: It&apos;s not clear that this is a good or useful query API. Client&apos;s
  /// should probably move to simpler cost metrics using the above.
  /// Alternatively, we could split the cost interface into distinct code-size
  /// and execution-speed costs. This would allow modelling the core of this
  /// query more accurately as a call is a single small instruction, but
  /// incurs significant execution cost.</doc>
<use f='llvm/llvm/lib/Analysis/CodeMetrics.cpp' l='142' u='c' c='_ZN4llvm11CodeMetrics17analyzeBasicBlockEPKNS_10BasicBlockERKNS_19TargetTransformInfoERKNS_15SmallPtrSetImplIPKNS_5ValueEEE'/>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='1290' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer13visitCallBaseERN4llvm8CallBaseE'/>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='129' ll='131' type='bool llvm::TargetTransformInfo::isLoweredToCall(const llvm::Function * F) const'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/CGProfile.cpp' l='33' u='c' c='_ZN4llvm13CGProfilePass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='534' u='c' c='_ZL21analyzeLoopUnrollCostPKN4llvm4LoopEjRNS_13DominatorTreeERNS_15ScalarEvolutionERKNS_15SmallPtrSetImplIPKNS_5ValueEEERKNS_19TargetTransformInfoEj'/>
<use f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='483' u='c' c='_ZL16findTRECandidatePN4llvm11InstructionEbPKNS_19TargetTransformInfoE'/>
