<dec f='llvm/llvm/include/llvm/CodeGen/LiveVariables.h' l='295' type='void llvm::LiveVariables::addNewBlock(llvm::MachineBasicBlock * BB, llvm::MachineBasicBlock * DomBB, llvm::MachineBasicBlock * SuccBB)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/LiveVariables.h' l='291'>/// addNewBlock - Add a new basic block BB between DomBB and SuccBB. All
  /// variables that are live out of DomBB and live into SuccBB will be marked
  /// as passing live through BB. This method assumes that the machine code is
  /// still in SSA form.</doc>
<def f='llvm/llvm/lib/CodeGen/LiveVariables.cpp' l='764' ll='809' type='void llvm::LiveVariables::addNewBlock(llvm::MachineBasicBlock * BB, llvm::MachineBasicBlock * DomBB, llvm::MachineBasicBlock * SuccBB)'/>
<doc f='llvm/llvm/lib/CodeGen/LiveVariables.cpp' l='761'>/// addNewBlock - Add a new basic block BB as an empty succcessor to DomBB. All
/// variables that are live out of DomBB will be marked as passing live through
/// BB.</doc>
<use f='llvm/llvm/lib/CodeGen/MachineBasicBlock.cpp' l='1010' u='c' c='_ZN4llvm17MachineBasicBlock17SplitCriticalEdgeEPS0_RNS_4PassE'/>
