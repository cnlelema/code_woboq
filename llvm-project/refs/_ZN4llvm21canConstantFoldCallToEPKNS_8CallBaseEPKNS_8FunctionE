<dec f='llvm/llvm/include/llvm/Analysis/ConstantFolding.h' l='146' type='bool llvm::canConstantFoldCallTo(const llvm::CallBase * Call, const llvm::Function * F)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ConstantFolding.h' l='144'>/// canConstantFoldCallTo - Return true if its even possible to fold a call to
/// the specified function.</doc>
<use f='llvm/llvm/lib/Analysis/ConstantFolding.cpp' l='1033' u='c' c='_ZN12_GLOBAL__N_128ConstantFoldInstOperandsImplEPKN4llvm5ValueEjNS0_8ArrayRefIPNS0_8ConstantEEERKNS0_10DataLayoutEPKNS0_17TargetLibraryInfoE'/>
<def f='llvm/llvm/lib/Analysis/ConstantFolding.cpp' l='1381' ll='1527' type='bool llvm::canConstantFoldCallTo(const llvm::CallBase * Call, const llvm::Function * F)'/>
<doc f='llvm/llvm/lib/Analysis/ConstantFolding.cpp' l='1377'>//===----------------------------------------------------------------------===//
//  Constant Folding for Calls
//</doc>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='1215' u='c' c='_ZN12_GLOBAL__N_112CallAnalyzer16simplifyCallSiteEPN4llvm8FunctionERNS1_8CallBaseE'/>
<use f='llvm/llvm/lib/Analysis/InstructionSimplify.cpp' l='5055' u='c' c='_ZL12SimplifyCallPN4llvm8CallBaseEPNS_5ValueET_S4_RKNS_13SimplifyQueryEj'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7674' u='c' c='_ZL15CanConstantFoldPKN4llvm11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SCCP.cpp' l='1270' u='c' c='_ZN12_GLOBAL__N_110SCCPSolver13visitCallSiteEN4llvm8CallSiteE'/>
