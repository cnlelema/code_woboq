<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='841' type='SmallVector&lt;llvm::LazyCallGraph::RefSCC *, 1&gt; llvm::LazyCallGraph::RefSCC::removeInternalRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, ArrayRef&lt;llvm::LazyCallGraph::Node *&gt; TargetNs)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='803'>/// Remove a list of ref edges which are entirely within this RefSCC.
    ///
    /// Both the \a SourceN and all of the \a TargetNs must be within this
    /// RefSCC. Removing these edges may break cycles that form this RefSCC and
    /// thus this operation may change the RefSCC graph significantly. In
    /// particular, this operation will re-form new RefSCCs based on the
    /// remaining connectivity of the graph. The following invariants are
    /// guaranteed to hold after calling this method:
    ///
    /// 1) If a ref-cycle remains after removal, it leaves this RefSCC intact
    ///    and in the graph. No new RefSCCs are built.
    /// 2) Otherwise, this RefSCC will be dead after this call and no longer in
    ///    the graph or the postorder traversal of the call graph. Any iterator
    ///    pointing at this RefSCC will become invalid.
    /// 3) All newly formed RefSCCs will be returned and the order of the
    ///    RefSCCs returned will be a valid postorder traversal of the new
    ///    RefSCCs.
    /// 4) No RefSCC other than this RefSCC has its member set changed (this is
    ///    inherent in the definition of removing such an edge).
    ///
    /// These invariants are very important to ensure that we can build
    /// optimization pipelines on top of the CGSCC pass manager which
    /// intelligently update the RefSCC graph without invalidating other parts
    /// of the RefSCC graph.
    ///
    /// Note that we provide no routine to remove a *call* edge. Instead, you
    /// must first switch it to a ref edge using \c switchInternalEdgeToRef.
    /// This split API is intentional as each of these two steps can invalidate
    /// a different aspect of the graph structure and needs to have the
    /// invalidation handled independently.
    ///
    /// The runtime complexity of this method is, in the worst case, O(V+E)
    /// where V is the number of nodes in this RefSCC and E is the number of
    /// edges leaving the nodes in this RefSCC. Note that E includes both edges
    /// within this RefSCC and edges from this RefSCC to child RefSCCs. Some
    /// effort has been made to minimize the overhead of common cases such as
    /// self-edges and edge removals which result in a spanning tree with no
    /// more cycles.</doc>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='545' u='c' c='_ZN4llvm41updateCGAndAnalysisManagerForFunctionPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultE'/>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1126' ll='1361' type='SmallVector&lt;LazyCallGraph::RefSCC *, 1&gt; llvm::LazyCallGraph::RefSCC::removeInternalRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, ArrayRef&lt;llvm::LazyCallGraph::Node *&gt; TargetNs)'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1168' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1343' u='c' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_InternalEdgeRemoval_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1359' u='c' c='_ZN12_GLOBAL__N_142LazyCallGraphTest_InternalEdgeRemoval_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1424' u='c' c='_ZN12_GLOBAL__N_147LazyCallGraphTest_InternalMultiEdgeRemoval_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1493' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InternalNoOpEdgeRemoval_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1508' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InternalNoOpEdgeRemoval_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1509' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InternalNoOpEdgeRemoval_Test8TestBodyEv'/>
