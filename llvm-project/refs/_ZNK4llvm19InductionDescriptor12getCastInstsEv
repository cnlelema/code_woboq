<def f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='342' ll='344' type='const SmallVectorImpl&lt;llvm::Instruction *&gt; &amp; llvm::InductionDescriptor::getCastInsts() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='339'>/// Returns a reference to the type cast instructions in the induction
  /// update chain, that are redundant when guarded with a runtime
  /// SCEV overflow check.</doc>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='533' u='c' c='_ZN4llvm25LoopVectorizationLegality15addInductionPhiEPNS_7PHINodeERKNS_19InductionDescriptorERNS_15SmallPtrSetImplIPNS_5ValueEEE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1650' u='c' c='_ZN4llvm19InnerLoopVectorizer37recordVectorLoopValueForInductionCastERKNS_19InductionDescriptorEPKNS_11InstructionEPNS_5ValueEjj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6122' u='c' c='_ZN4llvm26LoopVectorizationCostModel21collectValuesToIgnoreEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6304' u='c' c='_ZN4llvm24LoopVectorizationPlanner32collectTriviallyDeadInstructionsERNS_15SmallPtrSetImplIPNS_11InstructionEEE'/>
