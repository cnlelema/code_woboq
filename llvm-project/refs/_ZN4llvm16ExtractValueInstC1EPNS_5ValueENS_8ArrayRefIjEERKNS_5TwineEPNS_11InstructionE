<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='2289' type='void llvm::ExtractValueInst::ExtractValueInst(llvm::Value * Agg, ArrayRef&lt;unsigned int&gt; Idxs, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2311' u='c' c='_ZN4llvm16ExtractValueInst6CreateEPNS_5ValueENS_8ArrayRefIjEERKNS_5TwineEPNS_11InstructionE'/>
<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='2366' ll='2373' type='void llvm::ExtractValueInst::ExtractValueInst(llvm::Value * Agg, ArrayRef&lt;unsigned int&gt; Idxs, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='2285'>/// Constructors - Create a extractvalue instruction with a base aggregate
  /// value and a list of indices.  The first ctor can optionally insert before
  /// an existing instruction, the second appends the new instruction to the
  /// specified BasicBlock.</doc>
