<def f='llvm/llvm/include/llvm/ADT/fallible_iterator.h' l='164' ll='186' type='bool llvm::operator==(const fallible_iterator&lt;Underlying&gt; &amp; LHS, const fallible_iterator&lt;Underlying&gt; &amp; RHS)'/>
<doc f='llvm/llvm/include/llvm/ADT/fallible_iterator.h' l='152'>/// Compare fallible iterators for equality.
  ///
  /// Returns true if both LHS and RHS are end-of-range values, or if both are
  /// non-end-of-range values whose underlying iterator values compare equal.
  ///
  /// If this is a comparison between an end-of-range iterator and a
  /// non-end-of-range iterator, then the Error (referenced by the
  /// non-end-of-range value) is marked as checked: Since all
  /// increment/decrement operations result in an end-of-range value, comparing
  /// false against end-of-range is equivalent to checking that the Error value
  /// is success. This flag management enables early returns from loop bodies
  /// without redundant Error checks.</doc>
<use f='llvm/llvm/lib/Object/Archive.cpp' l='572' u='c' c='_ZN4llvm6object7ArchiveC1ENS_15MemoryBufferRefERNS_5ErrorE'/>
<use f='llvm/llvm/lib/Object/Archive.cpp' l='691' u='c' c='_ZN4llvm6object7ArchiveC1ENS_15MemoryBufferRefERNS_5ErrorE'/>
<use f='llvm/llvm/lib/Object/Archive.cpp' l='745' u='c' c='_ZN4llvm6object7ArchiveC1ENS_15MemoryBufferRefERNS_5ErrorE'/>
