<dec f='llvm/clang/include/clang/AST/Type.h' l='926' type='bool clang::QualType::isMoreQualifiedThan(clang::QualType Other) const'/>
<def f='llvm/clang/include/clang/AST/Type.h' l='6300' ll='6304' type='bool clang::QualType::isMoreQualifiedThan(clang::QualType other) const'/>
<use f='llvm/clang/include/clang/AST/CanonicalType.h' l='168' u='c' c='_ZNK5clang7CanQual19isMoreQualifiedThanENS_7CanQualIT_EE'/>
<doc f='llvm/clang/include/clang/AST/Type.h' l='924'>/// Determine whether this type is more qualified than the other
  /// given type, requiring exact equality for non-CVR qualifiers.</doc>
<doc f='llvm/clang/include/clang/AST/Type.h' l='6295'>/// Determine whether this type is more
/// qualified than the Other type. For example, &quot;const volatile int&quot;
/// is more qualified than &quot;const int&quot;, &quot;volatile int&quot;, and
/// &quot;int&quot;. However, it is not more qualified than &quot;const volatile
/// int&quot;.</doc>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='14938' u='c' c='_ZN5clang4Sema33CheckOverridingFunctionReturnTypeEPKNS_13CXXMethodDeclES3_'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='3922' u='c' c='_ZL34CompareStandardConversionSequencesRN5clang4SemaENS_14SourceLocationERKNS_26StandardConversionSequenceES5_'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='3924' u='c' c='_ZL34CompareStandardConversionSequencesRN5clang4SemaENS_14SourceLocationERKNS_26StandardConversionSequenceES5_'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='4043' u='c' c='_ZL31CompareQualificationConversionsRN5clang4SemaERKNS_26StandardConversionSequenceES4_'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='4051' u='c' c='_ZL31CompareQualificationConversionsRN5clang4SemaERKNS_26StandardConversionSequenceES4_'/>
