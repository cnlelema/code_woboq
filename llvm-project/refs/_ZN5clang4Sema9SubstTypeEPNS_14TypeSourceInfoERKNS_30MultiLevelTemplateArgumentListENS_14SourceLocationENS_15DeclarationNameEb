<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7978' type='clang::TypeSourceInfo * clang::Sema::SubstType(clang::TypeSourceInfo * T, const clang::MultiLevelTemplateArgumentList &amp; TemplateArgs, clang::SourceLocation Loc, clang::DeclarationName Entity, bool AllowDeducedTST = false)'/>
<def f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='1588' ll='1604' type='clang::TypeSourceInfo * clang::Sema::SubstType(clang::TypeSourceInfo * T, const clang::MultiLevelTemplateArgumentList &amp; Args, clang::SourceLocation Loc, clang::DeclarationName Entity, bool AllowDeducedTST = false)'/>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='1921' u='c' c='_ZN5clang4Sema19SubstBaseSpecifiersEPNS_13CXXRecordDeclES2_RKNS_30MultiLevelTemplateArgumentListE'/>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='1948' u='c' c='_ZN5clang4Sema19SubstBaseSpecifiersEPNS_13CXXRecordDeclES2_RKNS_30MultiLevelTemplateArgumentListE'/>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='1953' u='c' c='_ZN5clang4Sema19SubstBaseSpecifiersEPNS_13CXXRecordDeclES2_RKNS_30MultiLevelTemplateArgumentListE'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='1558'>/// Perform substitution on the type T with a given set of template
/// arguments.
///
/// This routine substitutes the given template arguments into the
/// type T and produces the instantiated type.
///
/// \param T the type into which the template arguments will be
/// substituted. If this type is not dependent, it will be returned
/// immediately.
///
/// \param Args the template arguments that will be
/// substituted for the top-level template parameters within T.
///
/// \param Loc the location in the source code where this substitution
/// is being performed. It will typically be the location of the
/// declarator (if we&apos;re instantiating the type of some declaration)
/// or the location of the type in the source code (if, e.g., we&apos;re
/// instantiating the type of a cast expression).
///
/// \param Entity the name of the entity associated with a declaration
/// being instantiated (if any). May be empty to indicate that there
/// is no such entity (if, e.g., this is a type that occurs as part of
/// a cast expression) or that the entity has no name (e.g., an
/// unnamed function parameter).
///
/// \param AllowDeducedTST Whether a DeducedTemplateSpecializationType is
/// acceptable as the top level type of the result.
///
/// \returns If the instantiation succeeds, the instantiated
/// type. Otherwise, produces diagnostics and returns a NULL type.</doc>
<use f='llvm/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp' l='1113' u='c' c='_ZN5clang24TemplateDeclInstantiator13VisitEnumDeclEPNS_8EnumDeclE'/>
