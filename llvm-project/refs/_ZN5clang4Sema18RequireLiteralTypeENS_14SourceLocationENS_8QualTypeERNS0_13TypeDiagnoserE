<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1761' type='bool clang::Sema::RequireLiteralType(clang::SourceLocation Loc, clang::QualType T, clang::Sema::TypeDiagnoser &amp; Diagnoser)'/>
<def f='llvm/clang/lib/Sema/SemaType.cpp' l='8374' ll='8454' type='bool clang::Sema::RequireLiteralType(clang::SourceLocation Loc, clang::QualType T, clang::Sema::TypeDiagnoser &amp; Diagnoser)'/>
<use f='llvm/clang/lib/Sema/SemaType.cpp' l='8458' u='c' c='_ZN5clang4Sema18RequireLiteralTypeENS_14SourceLocationENS_8QualTypeEj'/>
<doc f='llvm/clang/lib/Sema/SemaType.cpp' l='8356'>/// Ensure that the type T is a literal type.
///
/// This routine checks whether the type @p T is a literal type. If @p T is an
/// incomplete type, an attempt is made to complete it. If @p T is a literal
/// type, or @p AllowIncompleteType is true and @p T is an incomplete type,
/// returns false. Otherwise, this routine issues the diagnostic @p PD (giving
/// it the type @p T), along with notes explaining why the type is not a
/// literal type, and returns true.
///
/// @param Loc  The location in the source that the non-literal type
/// diagnostic should refer to.
///
/// @param T  The type that this routine is examining for literalness.
///
/// @param Diagnoser Emits a diagnostic if T is not a literal type.
///
/// @returns @c true if @p T is not a literal type and a diagnostic was emitted,
/// @c false otherwise.</doc>
