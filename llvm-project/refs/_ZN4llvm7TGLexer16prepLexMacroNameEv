<dec f='llvm/llvm/lib/TableGen/TGLexer.h' l='313' type='llvm::StringRef llvm::TGLexer::prepLexMacroName()'/>
<doc f='llvm/llvm/lib/TableGen/TGLexer.h' l='288'>// Lex name of the macro after either #ifdef or #define.  We could have used
  // LexIdentifier(), but it has special handling of &quot;include&quot; word, which
  // could result in awkward diagnostic errors.  Consider:
  // ----
  // #ifdef include
  // class ...
  // ----
  // LexIdentifier() will engage LexInclude(), which will complain about
  // missing file with name &quot;class&quot;.  Instead, prepLexMacroName() will treat
  // &quot;include&quot; as a normal macro name.
  //
  // On entry, CurPtr points to the end of a preprocessing directive word.
  // The method allows for whitespaces between the preprocessing directive
  // and the macro name.  The allowed whitespaces are &apos; &apos; and &apos;\t&apos;.
  //
  // If the first non-whitespace symbol after the preprocessing directive
  // is a valid start symbol for an identifier (i.e. [a-zA-Z_]), then
  // the method updates TokStart to the position of the first non-whitespace
  // symbol, sets CurPtr to the position of the macro name&apos;s last symbol,
  // and returns a string reference to the macro name.  Otherwise,
  // TokStart is set to the first non-whitespace symbol after the preprocessing
  // directive, and the method returns an empty string reference.
  //
  // In all cases, TokStart may be used to point to the word following
  // the preprocessing directive.</doc>
<use f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='681' u='c' c='_ZN4llvm7TGLexer15lexPreprocessorENS_5tgtok7TokKindEb'/>
<use f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='782' u='c' c='_ZN4llvm7TGLexer15lexPreprocessorENS_5tgtok7TokKindEb'/>
<def f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='868' ll='883' type='llvm::StringRef llvm::TGLexer::prepLexMacroName()'/>
