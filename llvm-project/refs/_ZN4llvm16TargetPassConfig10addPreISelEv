<def f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='339' ll='341' type='bool llvm::TargetPassConfig::addPreISel()'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetPassConfig.h' l='330'>/// Methods with trivial inline returns are convenient points in the common
  /// codegen pass pipeline where targets may insert passes. Methods with
  /// out-of-line standard implementations are major CodeGen stages called by
  /// addMachinePasses. Some targets may override major stages when inserting
  /// passes is insufficient, but maintaining overriden stages is more work.
  ///

  /// addPreISelPasses - This method should add any &quot;last minute&quot; LLVM-&gt;LLVM
  /// passes (which are run just before instruction selector).</doc>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='734' u='c' c='_ZN4llvm16TargetPassConfig14addISelPrepareEv'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp' l='452' c='_ZN12_GLOBAL__N_117AArch64PassConfig10addPreISelEv'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp' l='740' c='_ZN12_GLOBAL__N_116AMDGPUPassConfig10addPreISelEv'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMTargetMachine.cpp' l='428' c='_ZN12_GLOBAL__N_113ARMPassConfig10addPreISelEv'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp' l='419' c='_ZN12_GLOBAL__N_113PPCPassConfig10addPreISelEv'/>
<ovr f='llvm/llvm/lib/Target/X86/X86TargetMachine.cpp' l='466' c='_ZN12_GLOBAL__N_113X86PassConfig10addPreISelEv'/>
<ovr f='llvm/llvm/lib/Target/XCore/XCoreTargetMachine.cpp' l='93' c='_ZN12_GLOBAL__N_115XCorePassConfig10addPreISelEv'/>
