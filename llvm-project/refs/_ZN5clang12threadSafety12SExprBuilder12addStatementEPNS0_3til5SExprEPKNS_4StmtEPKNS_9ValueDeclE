<dec f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h' l='471' type='til::SExpr * clang::threadSafety::SExprBuilder::addStatement(til::SExpr * E, const clang::Stmt * S, const clang::ValueDecl * VD = nullptr)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafetyCommon.cpp' l='509' u='c' c='_ZN5clang12threadSafety12SExprBuilder18translateBinAssignENS0_3til16TIL_BinaryOpcodeEPKNS_14BinaryOperatorEPNS1_14CallingContextEb'/>
<def f='llvm/clang/lib/Analysis/ThreadSafetyCommon.cpp' l='636' ll='646' type='til::SExpr * clang::threadSafety::SExprBuilder::addStatement(til::SExpr * E, const clang::Stmt * S, const clang::ValueDecl * VD = nullptr)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafetyCommon.cpp' l='886' u='c' c='_ZN5clang12threadSafety12SExprBuilder15handleStatementEPKNS_4StmtE'/>
<use f='llvm/clang/lib/Analysis/ThreadSafetyCommon.cpp' l='895' u='c' c='_ZN5clang12threadSafety12SExprBuilder20handleDestructorCallEPKNS_7VarDeclEPKNS_17CXXDestructorDeclE'/>
<doc f='llvm/clang/lib/Analysis/ThreadSafetyCommon.cpp' l='632'>// If (E) is non-trivial, then add it to the current basic block, and
// update the statement map so that S refers to E.  Returns a new variable
// that refers to E.
// If E is trivial returns E.</doc>
