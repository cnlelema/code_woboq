<def f='llvm/clang/include/clang/AST/DeclCXX.h' l='192' ll='297'/>
<size>24</size>
<doc f='llvm/clang/include/clang/AST/DeclCXX.h' l='176'>/// Represents a base class of a C++ class.
///
/// Each CXXBaseSpecifier represents a single, direct base class (or
/// struct) of a C++ class (or struct). It specifies the type of that
/// base class, whether it is a virtual or non-virtual base, and what
/// level of access (public, protected, private) is used for the
/// derivation. For example:
///
/// \code
///   class A { };
///   class B { };
///   class C : public virtual A, protected B { };
/// \endcode
///
/// In this code, C will have two CXXBaseSpecifiers, one for &quot;public
/// virtual A&quot; and the other for &quot;protected B&quot;.</doc>
<mbr r='clang::CXXBaseSpecifier::Range' o='0' t='clang::SourceRange'/>
<mbr r='clang::CXXBaseSpecifier::EllipsisLoc' o='64' t='clang::SourceLocation'/>
<mbr r='clang::CXXBaseSpecifier::Virtual' o='96' t='unsigned int'/>
<mbr r='clang::CXXBaseSpecifier::BaseOfClass' o='97' t='unsigned int'/>
<mbr r='clang::CXXBaseSpecifier::Access' o='98' t='unsigned int'/>
<mbr r='clang::CXXBaseSpecifier::InheritConstructors' o='100' t='unsigned int'/>
<mbr r='clang::CXXBaseSpecifier::BaseTypeInfo' o='128' t='clang::TypeSourceInfo *'/>
<fun r='_ZN5clang16CXXBaseSpecifierC1Ev'/>
<fun r='_ZN5clang16CXXBaseSpecifierC1ENS_11SourceRangeEbbNS_15AccessSpecifierEPNS_14TypeSourceInfoENS_14SourceLocationE'/>
<fun r='_ZNK5clang16CXXBaseSpecifier14getSourceRangeEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier11getBeginLocEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier9getEndLocEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier14getBaseTypeLocEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier9isVirtualEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier13isBaseOfClassEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier15isPackExpansionEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier22getInheritConstructorsEv'/>
<fun r='_ZN5clang16CXXBaseSpecifier22setInheritConstructorsEb'/>
<fun r='_ZNK5clang16CXXBaseSpecifier14getEllipsisLocEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier18getAccessSpecifierEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier27getAccessSpecifierAsWrittenEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier7getTypeEv'/>
<fun r='_ZNK5clang16CXXBaseSpecifier17getTypeSourceInfoEv'/>
