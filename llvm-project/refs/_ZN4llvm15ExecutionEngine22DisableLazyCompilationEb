<def f='llvm/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h' l='449' ll='451' type='void llvm::ExecutionEngine::DisableLazyCompilation(bool Disabled = true)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h' l='436'>/// DisableLazyCompilation - When lazy compilation is off (the default), the
  /// JIT will eagerly compile every function reachable from the argument to
  /// getPointerToFunction.  If lazy compilation is turned on, the JIT will only
  /// compile the one function and emit stubs to compile the rest when they&apos;re
  /// first called.  If lazy compilation is turned off again while some lazy
  /// stubs are still around, and one of those stubs is called, the program will
  /// abort.
  ///
  /// In order to safely compile lazily in a threaded program, the user must
  /// ensure that 1) only one thread at a time can call any particular lazy
  /// stub, and 2) any thread modifying LLVM IR must hold the JIT&apos;s lock
  /// (ExecutionEngine::lock) or otherwise ensure that no other thread calls a
  /// lazy stub.  See http://llvm.org/PR5184 for details.</doc>
<use f='llvm/llvm/tools/lli/lli.cpp' l='540' u='c' c='main'/>
