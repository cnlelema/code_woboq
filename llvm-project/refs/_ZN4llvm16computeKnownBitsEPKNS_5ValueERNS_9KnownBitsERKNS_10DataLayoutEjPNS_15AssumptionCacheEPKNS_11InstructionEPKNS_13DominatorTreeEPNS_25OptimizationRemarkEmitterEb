<dec f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='54' type='void llvm::computeKnownBits(const llvm::Value * V, llvm::KnownBits &amp; Known, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr, bool UseInstrInfo = true)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ValueTracking.h' l='46'>/// Determine which bits of V are known to be either zero or one and return
  /// them in the KnownZero/KnownOne bit sets.
  ///
  /// This function is defined on values with integer type, values with pointer
  /// type, and vectors of integers.  In the case
  /// where V is a vector, the known zero and known one values are the
  /// same width as the vector element, and the bit is set only if it is true
  /// for all of the elements in the vector.</doc>
<use f='llvm/llvm/lib/Analysis/DemandedBits.cpp' l='105' u='c' c='_ZN4llvm12DemandedBits24determineLiveOperandBitsEPKNS_11InstructionEPKNS_5ValueEjRKNS_5APIntERS7_RNS_9KnownBitsESC_Rb'/>
<use f='llvm/llvm/lib/Analysis/DemandedBits.cpp' l='109' u='c' c='_ZN4llvm12DemandedBits24determineLiveOperandBitsEPKNS_11InstructionEPKNS_5ValueEjRKNS_5APIntERS7_RNS_9KnownBitsESC_Rb'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6236' u='c' c='_ZN4llvm15ScalarEvolution10createSCEVEPNS_5ValueE'/>
<def f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='169' ll='176' type='void llvm::computeKnownBits(const llvm::Value * V, llvm::KnownBits &amp; Known, const llvm::DataLayout &amp; DL, unsigned int Depth = 0, llvm::AssumptionCache * AC = nullptr, const llvm::Instruction * CxtI = nullptr, const llvm::DominatorTree * DT = nullptr, llvm::OptimizationRemarkEmitter * ORE = nullptr, bool UseInstrInfo = true)'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='210' u='c' c='_ZN4llvm19haveNoCommonBitsSetEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeEb'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='211' u='c' c='_ZN4llvm19haveNoCommonBitsSetEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeEb'/>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='5315' u='c' c='_ZL15isTruePredicateN4llvm7CmpInst9PredicateEPKNS_5ValueES4_RKNS_10DataLayoutEj'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='9394' u='c' c='_ZNK4llvm12SelectionDAG17InferPtrAlignmentENS_7SDValueE'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp' l='1257' u='c' c='_ZN12_GLOBAL__N_127PolynomialMultiplyRecognize15highBitsAreZeroEPN4llvm5ValueEj'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='664' u='c' c='_ZNK4llvm12InstCombiner16computeKnownBitsEPKNS_5ValueERNS_9KnownBitsEjPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Utils/BypassSlowDivision.cpp' l='242' u='c' c='_ZN12_GLOBAL__N_120FastDivInsertionTask13getValueRangeEPN4llvm5ValueERNS1_11SmallPtrSetIPNS1_11InstructionELj4EEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='1210' u='c' c='_ZN4llvm26getOrEnforceKnownAlignmentEPNS_5ValueEjRKNS_10DataLayoutEPKNS_11InstructionEPNS_15AssumptionCacheEPKNS_13DominatorTreeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp' l='456' u='c' c='_ZNK12_GLOBAL__N_110Vectorizer27lookThroughComplexAddressesEPN4llvm5ValueES3_NS1_5APIntEj'/>
