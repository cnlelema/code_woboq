<dec f='llvm/llvm/include/llvm/Analysis/CFG.h' l='76' type='bool llvm::isPotentiallyReachable(const llvm::BasicBlock * From, const llvm::BasicBlock * To, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CFG.h' l='70'>/// Determine whether block &apos;To&apos; is reachable from &apos;From&apos;, returning
/// true if uncertain.
///
/// Determine whether there is a path from From to To within a single function.
/// Returns false only if we can prove that once &apos;From&apos; has been reached then
/// &apos;To&apos; can not be executed. Conservatively returns true.</doc>
<def f='llvm/llvm/lib/Analysis/CFG.cpp' l='199' ll='209' type='bool llvm::isPotentiallyReachable(const llvm::BasicBlock * A, const llvm::BasicBlock * B, const llvm::DominatorTree * DT = nullptr, const llvm::LoopInfo * LI = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='810' u='c' c='_ZN12_GLOBAL__N_110MachineCSE15ProcessBlockPREEPN4llvm20MachineDominatorTreeEPNS1_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='811' u='c' c='_ZN12_GLOBAL__N_110MachineCSE15ProcessBlockPREEPN4llvm20MachineDominatorTreeEPNS1_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='934' u='c' c='_ZN4llvm12InstCombiner13foldOpIntoPhiERNS_11InstructionEPNS_7PHINodeE'/>
