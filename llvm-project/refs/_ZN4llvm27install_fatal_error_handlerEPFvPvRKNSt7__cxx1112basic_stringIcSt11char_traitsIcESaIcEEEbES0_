<dec f='llvm/llvm/include/llvm/Support/ErrorHandling.h' l='45' type='void llvm::install_fatal_error_handler(fatal_error_handler_t handler, void * user_data = nullptr)'/>
<use f='llvm/llvm/include/llvm/Support/ErrorHandling.h' l='57' u='c' c='_ZN4llvm23ScopedFatalErrorHandlerC1EPFvPvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbES1_'/>
<doc f='llvm/llvm/include/llvm/Support/ErrorHandling.h' l='29'>/// install_fatal_error_handler - Installs a new error handler to be used
  /// whenever a serious (non-recoverable) error is encountered by LLVM.
  ///
  /// If no error handler is installed the default is to print the error message
  /// to stderr, and call exit(1).  If an error handler is installed then it is
  /// the handler&apos;s responsibility to log the message, it will no longer be
  /// printed to stderr.  If the error handler returns, then exit(1) will be
  /// called.
  ///
  /// It is dangerous to naively use an error handler which throws an exception.
  /// Even though some applications desire to gracefully recover from arbitrary
  /// faults, blindly throwing exceptions through unfamiliar code isn&apos;t a way to
  /// achieve this.
  ///
  /// \param user_data - An argument which will be passed to the install error
  /// handler.</doc>
<use f='llvm/clang/tools/driver/cc1_main.cpp' l='216' u='c' c='_Z8cc1_mainN4llvm8ArrayRefIPKcEES2_Pv'/>
<use f='llvm/clang/tools/libclang/CIndex.cpp' l='3254' u='c' c='_ZN12_GLOBAL__N_125RegisterFatalErrorHandlerC1Ev'/>
<def f='llvm/llvm/lib/Support/ErrorHandling.cpp' l='63' ll='71' type='void llvm::install_fatal_error_handler(fatal_error_handler_t handler, void * user_data = nullptr)'/>
<use f='llvm/llvm/lib/Support/ErrorHandling.cpp' l='242' u='c' c='LLVMInstallFatalErrorHandler'/>
<use f='llvm/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp' l='164' u='c' c='LLVMFuzzerInitialize'/>
<use f='llvm/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp' l='177' u='c' c='LLVMFuzzerInitialize'/>
