<dec f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='97' type='void llvm::CodeExtractor::CodeExtractor(llvm::DominatorTree &amp; DT, llvm::Loop &amp; L, bool AggregateArgs = false, llvm::BlockFrequencyInfo * BFI = nullptr, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::AssumptionCache * AC = nullptr, std::string Suffix = &quot;&quot;)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='93'>/// Create a code extractor for a loop body.
    ///
    /// Behaves just like the generic code sequence constructor, but uses the
    /// block sequence of the loop.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/LoopExtractor.cpp' l='146' u='c' c='_ZN12_GLOBAL__N_113LoopExtractor9runOnLoopEPN4llvm4LoopERNS1_13LPPassManagerE'/>
<def f='llvm/llvm/lib/Transforms/Utils/CodeExtractor.cpp' l='254' ll='263' type='void llvm::CodeExtractor::CodeExtractor(llvm::DominatorTree &amp; DT, llvm::Loop &amp; L, bool AggregateArgs = false, llvm::BlockFrequencyInfo * BFI = nullptr, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::AssumptionCache * AC = nullptr, std::string Suffix = &quot;&quot;)'/>
