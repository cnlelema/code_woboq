<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='123' type='void llvm::RegBankSelect::InsertPoint::materialize()'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='152' u='c' c='_ZN4llvm13RegBankSelect11InsertPoint8getPointEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='171' u='c' c='_ZN4llvm13RegBankSelect11InsertPoint12getInsertMBBEv'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='244' c='_ZN4llvm13RegBankSelect14MBBInsertPoint11materializeEv'/>
<ovr f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='849' c='_ZN4llvm13RegBankSelect16InstrInsertPoint11materializeEv'/>
<ovr f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='898' c='_ZN4llvm13RegBankSelect15EdgeInsertPoint11materializeEv'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='115'>/// Materialize the insertion point.
    ///
    /// If isSplit() is true, this involves actually splitting
    /// the block or edge.
    ///
    /// \post getPointImpl() returns a valid iterator.
    /// \post getInsertMBBImpl() returns a valid basic block.
    /// \post isSplit() == false ; no more splitting should be required.</doc>
