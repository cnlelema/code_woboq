<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='809' type='llvm::Instruction * llvm::InstCombiner::foldOpIntoPhi(llvm::Instruction &amp; I, llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1609' u='c' c='_ZN4llvm12InstCombiner8visitSubERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='806'>/// Given a binary operator, cast instruction, or select which has a PHI node
  /// as operand #0, see if we can fold the instruction into the PHI (which is
  /// only possible if all operands to the PHI are constants).</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='296' u='c' c='_ZN4llvm12InstCombiner20commonCastTransformsERNS_8CastInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='2976' u='c' c='_ZN4llvm12InstCombiner30foldICmpInstWithConstantNotIntERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5572' u='c' c='_ZN4llvm12InstCombiner13visitFCmpInstERNS_8FCmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1278' u='c' c='_ZN4llvm12InstCombiner20commonIRemTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp' l='2038' u='c' c='_ZN4llvm12InstCombiner15visitSelectInstERNS_10SelectInstE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='891' ll='1034' type='llvm::Instruction * llvm::InstCombiner::foldOpIntoPhi(llvm::Instruction &amp; I, llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1044' u='c' c='_ZN4llvm12InstCombiner24foldBinOpIntoSelectOrPhiERNS_14BinaryOperatorE'/>
