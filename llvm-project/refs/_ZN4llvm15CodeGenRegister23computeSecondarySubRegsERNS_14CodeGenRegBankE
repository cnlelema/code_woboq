<dec f='llvm/llvm/utils/TableGen/CodeGenRegisters.h' l='175' type='void llvm::CodeGenRegister::computeSecondarySubRegs(llvm::CodeGenRegBank &amp; )'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenRegisters.h' l='174'>// Compute extra sub-registers by combining the existing sub-registers.</doc>
<def f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='465' ll='544' type='void llvm::CodeGenRegister::computeSecondarySubRegs(llvm::CodeGenRegBank &amp; RegBank)'/>
<use f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='1154' u='c' c='_ZN4llvm14CodeGenRegBankC1ERNS_12RecordKeeperERKNS_14CodeGenHwModesE'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenRegisters.cpp' l='452'>// In a register that is covered by its sub-registers, try to find redundant
// sub-registers. For example:
//
//   QQ0 = {Q0, Q1}
//   Q0 = {D0, D1}
//   Q1 = {D2, D3}
//
// We can infer that D1_D2 is also a sub-register, even if it wasn&apos;t named in
// the register definition.
//
// The explicitly specified registers form a tree. This function discovers
// sub-register relationships that would force a DAG.
//</doc>
