<dec f='llvm/llvm/lib/Target/Hexagon/RDFDeadCode.h' l='58' type='bool llvm::rdf::DeadCodeElimination::isLiveInstr(const llvm::MachineInstr * MI) const'/>
<def f='llvm/llvm/lib/Target/Hexagon/RDFDeadCode.cpp' l='57' ll='79' type='bool llvm::rdf::DeadCodeElimination::isLiveInstr(const llvm::MachineInstr * MI) const'/>
<use f='llvm/llvm/lib/Target/Hexagon/RDFDeadCode.cpp' l='85' u='c' c='_ZN4llvm3rdf19DeadCodeElimination9scanInstrENS0_8NodeAddrIPNS0_9InstrNodeEEERNS1_8SetQueueIjEE'/>
<use f='llvm/llvm/lib/Target/Hexagon/RDFDeadCode.cpp' l='162' u='c' c='_ZN4llvm3rdf19DeadCodeElimination7collectEv'/>
<doc f='llvm/llvm/lib/Target/Hexagon/RDFDeadCode.cpp' l='52'>// Check if the given instruction has observable side-effects, i.e. if
// it should be considered &quot;live&quot;. It is safe for this function to be
// overly conservative (i.e. return &quot;true&quot; for all instructions), but it
// is not safe to return &quot;false&quot; for an instruction that should not be
// considered removable.</doc>
