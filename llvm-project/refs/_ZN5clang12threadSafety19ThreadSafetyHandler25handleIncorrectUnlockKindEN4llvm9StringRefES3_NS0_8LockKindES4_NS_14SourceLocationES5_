<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='124' ll='127' type='void clang::threadSafety::ThreadSafetyHandler::handleIncorrectUnlockKind(llvm::StringRef Kind, Name LockName, clang::threadSafety::LockKind Expected, clang::threadSafety::LockKind Received, clang::SourceLocation LocLocked, clang::SourceLocation LocUnlock)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='1338' u='c' c='_ZN12_GLOBAL__N_120ThreadSafetyAnalyzer10removeLockERNS_7FactSetERKN5clang12threadSafety14CapabilityExprENS3_14SourceLocationEbNS4_8LockKindEN4llvm9StringRefE'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='114'>/// Warn about an unlock function call that attempts to unlock a lock with
  /// the incorrect lock kind. For instance, a shared lock being unlocked
  /// exclusively, or vice versa.
  /// \param LockName -- A StringRef name for the lock expression, to be printed
  /// in the error message.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param Expected -- the kind of lock expected.
  /// \param Received -- the kind of lock received.
  /// \param LocLocked -- The SourceLocation of the Lock.
  /// \param LocUnlock -- The SourceLocation of the Unlock.</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1689' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter25handleIncorrectUnlockKindEN4llvm9StringRefES4_NS0_8LockKindES5_NS_14SourceLocationES6_'/>
