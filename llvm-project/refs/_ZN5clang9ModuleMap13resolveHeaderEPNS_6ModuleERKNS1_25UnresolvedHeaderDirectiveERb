<dec f='llvm/clang/include/clang/Lex/ModuleMap.h' l='337' type='void clang::ModuleMap::resolveHeader(clang::Module * M, const Module::UnresolvedHeaderDirective &amp; Header, bool &amp; NeedsFramework)'/>
<doc f='llvm/clang/include/clang/Lex/ModuleMap.h' l='331'>/// Resolve the given header directive.
  ///
  /// \param M The module in which we&apos;re resolving the header directive.
  /// \param Header The header directive to resolve.
  /// \param NeedsFramework If M is not a framework but a missing header would
  ///        be found in case M was, set it to true. False otherwise.</doc>
<def f='llvm/clang/lib/Lex/ModuleMap.cpp' l='250' ll='287' type='void clang::ModuleMap::resolveHeader(clang::Module * Mod, const Module::UnresolvedHeaderDirective &amp; Header, bool &amp; NeedsFramework)'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1147' u='c' c='_ZN5clang9ModuleMap19addUnresolvedHeaderEPNS_6ModuleENS1_25UnresolvedHeaderDirectiveERb'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='1171' u='c' c='_ZNK5clang9ModuleMap23resolveHeaderDirectivesEPNS_6ModuleE'/>
