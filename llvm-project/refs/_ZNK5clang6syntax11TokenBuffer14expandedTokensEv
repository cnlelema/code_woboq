<def f='llvm/clang/include/clang/Tooling/Syntax/Tokens.h' l='172' ll='174' type='llvm::ArrayRef&lt;syntax::Token&gt; clang::syntax::TokenBuffer::expandedTokens() const'/>
<doc f='llvm/clang/include/clang/Tooling/Syntax/Tokens.h' l='166'>/// All tokens produced by the preprocessor after all macro replacements,
  /// directives, etc. Source locations found in the clang AST will always
  /// point to one of these tokens.
  /// FIXME: figure out how to handle token splitting, e.g. &apos;&gt;&gt;&apos; can be split
  ///        into two &apos;&gt;&apos; tokens by the parser. However, TokenBuffer currently
  ///        keeps it as a single &apos;&gt;&gt;&apos; token.</doc>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='219' u='c' c='_ZN12_GLOBAL__N_118TokenCollectorTest12findExpandedEN4llvm9StringRefE'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='299' u='c' c='_ZN12_GLOBAL__N_133TokenCollectorTest_Locations_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='451' u='c' c='_ZN12_GLOBAL__N_137TokenCollectorTest_SpecialTokens_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='455' u='c' c='_ZN12_GLOBAL__N_137TokenCollectorTest_SpecialTokens_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/Syntax/TokensTest.cpp' l='471' u='c' c='_ZN12_GLOBAL__N_139TokenCollectorTest_LateBoundTokens_Test8TestBodyEv'/>
