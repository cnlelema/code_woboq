<def f='llvm/llvm/include/llvm/CodeGen/MachineInstr.h' l='768' ll='770' type='bool llvm::MachineInstr::isRegSequenceLike(llvm::MachineInstr::QueryType Type = IgnoreBundle) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineInstr.h' l='758'>/// Return true if this instruction behaves
  /// the same way as the generic REG_SEQUENCE instructions.
  /// E.g., on ARM,
  /// dX VMOVDRR rY, rZ
  /// is equivalent to
  /// dX = REG_SEQUENCE rY, ssub_0, rZ, ssub_1.
  ///
  /// Note that for the optimizers to be able to take advantage of
  /// this property, TargetInstrInfo::getRegSequenceLikeInputs has to be
  /// override accordingly.</doc>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='249' u='c' c='_ZN12_GLOBAL__N_117PeepholeOptimizer19isUncoalescableCopyERKN4llvm12MachineInstrE'/>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='1086' u='c' c='_ZL15getCopyRewriterRN4llvm12MachineInstrERKNS_15TargetInstrInfoE'/>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='1870' u='c' c='_ZN12_GLOBAL__N_112ValueTracker28getNextSourceFromRegSequenceEv'/>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='2055' u='c' c='_ZN12_GLOBAL__N_112ValueTracker17getNextSourceImplEv'/>
<use f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='1149' u='c' c='_ZNK4llvm15TargetInstrInfo20getRegSequenceInputsERKNS_12MachineInstrEjRNS_15SmallVectorImplINS0_19RegSubRegPairAndIdxEEE'/>
