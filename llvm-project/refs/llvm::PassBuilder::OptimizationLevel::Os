<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='216' type='4'/>
<use f='llvm/clang/lib/CodeGen/BackendUtil.cpp' l='954' u='r' c='_ZL10mapToLevelRKN5clang14CodeGenOptionsE'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='206'>/// Similar to \c O2 but tries to optimize for small code size instead of
    /// fast execution without triggering significant incremental execution
    /// time slowdowns.
    ///
    /// The logic here is exactly the same as \c O2, but with code size and
    /// execution time metrics swapped.
    ///
    /// A consequence of the different core goal is that this should in general
    /// produce substantially smaller executables that still run in
    /// a reasonable amount of time.</doc>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='240' c='_ZL19isOptimizingForSizeN4llvm11PassBuilder17OptimizationLevelE'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1798' u='r' c='_ZN4llvm11PassBuilder15parseModulePassERNS_11PassManagerINS_6ModuleENS_15AnalysisManagerIS2_JEEEJEEERKNS0_15PipelineElementEbb'/>
