<dec f='llvm/clang/include/clang/Sema/Sema.h' l='4892' type='ExprResult clang::Sema::BuildCXXConstructExpr(clang::SourceLocation ConstructLoc, clang::QualType DeclInitType, clang::NamedDecl * FoundDecl, clang::CXXConstructorDecl * Constructor, bool Elidable, MultiExprArg Exprs, bool HadMultipleCandidates, bool IsListInitialization, bool IsStdInitListInitialization, bool RequiresZeroInit, unsigned int ConstructKind, clang::SourceRange ParenRange)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='4889'>// FIXME: Can we remove this and have the above BuildCXXConstructExpr check if
  // the constructor can be elidable?</doc>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='12997' u='c' c='_ZN5clang4Sema21BuildCXXConstructExprENS_14SourceLocationENS_8QualTypeEPNS_9NamedDeclEPNS_18CXXConstructorDeclEN4llvm15MutableArrayRefIPNS_4ExprEEEbbbbjNS_11SourceRangeE'/>
<def f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='13005' ll='13027' type='ExprResult clang::Sema::BuildCXXConstructExpr(clang::SourceLocation ConstructLoc, clang::QualType DeclInitType, clang::NamedDecl * FoundDecl, clang::CXXConstructorDecl * Constructor, bool Elidable, MultiExprArg ExprArgs, bool HadMultipleCandidates, bool IsListInitialization, bool IsStdInitListInitialization, bool RequiresZeroInit, unsigned int ConstructKind, clang::SourceRange ParenRange)'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='6202' u='c' c='_ZL10CopyObjectRN5clang4SemaENS_8QualTypeERKNS_17InitializedEntityENS_12ActionResultIPNS_4ExprELb1EEEb'/>
<use f='llvm/clang/lib/Sema/SemaInit.cpp' l='6424' u='c' c='_ZL32PerformConstructorInitializationRN5clang4SemaERKNS_17InitializedEntityERKNS_18InitializationKindEN4llvm15MutableArrayRefIPNS_4ExprEEERKNS_22Initi7938511'/>
