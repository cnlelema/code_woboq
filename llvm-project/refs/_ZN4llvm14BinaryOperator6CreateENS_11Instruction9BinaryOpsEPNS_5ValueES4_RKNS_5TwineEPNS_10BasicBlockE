<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='224' type='static llvm::BinaryOperator * llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps Op, llvm::Value * S1, llvm::Value * S2, const llvm::Twine &amp; Name, llvm::BasicBlock * InsertAtEnd)'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='297' u='c' c='_ZN4llvm14BinaryOperator9CreateNSWENS_11Instruction9BinaryOpsEPNS_5ValueES4_RKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='316' u='c' c='_ZN4llvm14BinaryOperator9CreateNUWENS_11Instruction9BinaryOpsEPNS_5ValueES4_RKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='335' u='c' c='_ZN4llvm14BinaryOperator11CreateExactENS_11Instruction9BinaryOpsEPNS_5ValueES4_RKNS_5TwineEPNS_10BasicBlockE'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='220'>/// Construct a binary instruction, given the opcode and the two
  /// operands.  Also automatically insert this instruction to the end of the
  /// BasicBlock specified.
  ///</doc>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='2335' ll='2341' type='static llvm::BinaryOperator * llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps Op, llvm::Value * S1, llvm::Value * S2, const llvm::Twine &amp; Name, llvm::BasicBlock * InsertAtEnd)'/>
