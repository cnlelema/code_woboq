<dec f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.h' l='102' type='bool llvm::MipsSEDAGToDAGISel::selectVSplatCommon(llvm::SDValue N, llvm::SDValue &amp; Imm, bool Signed, unsigned int ImmBitSize) const'/>
<doc f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.h' l='101'>/// Select constant vector splats whose value fits in a given integer.</doc>
<def f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='657' ll='677' type='bool llvm::MipsSEDAGToDAGISel::selectVSplatCommon(llvm::SDValue N, llvm::SDValue &amp; Imm, bool Signed, unsigned int ImmBitSize) const'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='682' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm1ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='687' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm2ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='692' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm3ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='698' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm4ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='704' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm5ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='710' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm6ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='716' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatUimm8ENS_7SDValueERS1_'/>
<use f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='722' u='c' c='_ZNK4llvm18MipsSEDAGToDAGISel17selectVSplatSimm5ENS_7SDValueERS1_'/>
<doc f='llvm/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp' l='641'>// Select constant vector splats.
//
// In addition to the requirements of selectVSplat(), this function returns
// true and sets Imm if:
// * The splat value is the same width as the elements of the vector
// * The splat value fits in an integer with the specified signed-ness and
//   width.
//
// This function looks through ISD::BITCAST nodes.
// TODO: This might not be appropriate for big-endian MSA since BITCAST is
//       sometimes a shuffle in big-endian mode.
//
// It&apos;s worth noting that this function is not used as part of the selection
// of ldi.[bhwd] since it does not permit using the wrong-typed ldi.[bhwd]
// instruction to achieve the desired bit pattern. ldi.[bhwd] is selected in
// MipsSEDAGToDAGISel::selectNode.</doc>
