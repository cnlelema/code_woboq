<def f='llvm/clang/include/clang/Sema/Overload.h' l='229' ll='350'/>
<size>56</size>
<doc f='llvm/clang/include/clang/Sema/Overload.h' l='221'>/// StandardConversionSequence - represents a standard conversion
  /// sequence (C++ 13.3.3.1.1). A standard conversion sequence
  /// contains between zero and three conversions. If a particular
  /// conversion is not needed, it will be set to the identity conversion
  /// (ICK_Identity). Note that the three conversions are
  /// specified as separate members (rather than in an array) so that
  /// we can keep the size of a standard conversion sequence to a
  /// single word.</doc>
<mbr r='clang::StandardConversionSequence::First' o='0' t='clang::ImplicitConversionKind'/>
<mbr r='clang::StandardConversionSequence::Second' o='8' t='clang::ImplicitConversionKind'/>
<mbr r='clang::StandardConversionSequence::Third' o='16' t='clang::ImplicitConversionKind'/>
<mbr r='clang::StandardConversionSequence::DeprecatedStringLiteralToCharPtr' o='24' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::QualificationIncludesObjCLifetime' o='25' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::IncompatibleObjC' o='26' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::ReferenceBinding' o='27' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::DirectBinding' o='28' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::IsLvalueReference' o='29' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::BindsToFunctionLvalue' o='30' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::BindsToRvalue' o='31' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::BindsImplicitObjectArgumentWithoutRefQualifier' o='32' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::ObjCLifetimeConversionBinding' o='33' t='unsigned int'/>
<mbr r='clang::StandardConversionSequence::IncompatibleCHERIConversion' o='34' t='unsigned int'/>
<fun r='_ZNK5clang26StandardConversionSequence34isInvalidCHERICapabilityConversionEv'/>
<fun r='_ZN5clang26StandardConversionSequence25setInvalidCHERIConversionEb'/>
<mbr r='clang::StandardConversionSequence::FromTypePtr' o='64' t='void *'/>
<mbr r='clang::StandardConversionSequence::ToTypePtrs' o='128' t='void *[3]'/>
<mbr r='clang::StandardConversionSequence::CopyConstructor' o='320' t='clang::CXXConstructorDecl *'/>
<mbr r='clang::StandardConversionSequence::FoundCopyConstructor' o='384' t='clang::DeclAccessPair'/>
<fun r='_ZN5clang26StandardConversionSequence11setFromTypeENS_8QualTypeE'/>
<fun r='_ZN5clang26StandardConversionSequence9setToTypeEjNS_8QualTypeE'/>
<fun r='_ZN5clang26StandardConversionSequence13setAllToTypesENS_8QualTypeE'/>
<fun r='_ZNK5clang26StandardConversionSequence11getFromTypeEv'/>
<fun r='_ZNK5clang26StandardConversionSequence9getToTypeEj'/>
<fun r='_ZN5clang26StandardConversionSequence23setAsIdentityConversionEv'/>
<fun r='_ZNK5clang26StandardConversionSequence20isIdentityConversionEv'/>
<fun r='_ZNK5clang26StandardConversionSequence7getRankEv'/>
<fun r='_ZNK5clang26StandardConversionSequence16getNarrowingKindERNS_10ASTContextEPKNS_4ExprERNS_7APValueERNS_8QualTypeEb'/>
<fun r='_ZNK5clang26StandardConversionSequence25isPointerConversionToBoolEv'/>
<fun r='_ZNK5clang26StandardConversionSequence32isPointerConversionToVoidPointerERNS_10ASTContextE'/>
<fun r='_ZNK5clang26StandardConversionSequence4dumpEv'/>
