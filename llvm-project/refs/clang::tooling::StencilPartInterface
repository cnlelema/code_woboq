<def f='llvm/clang/include/clang/Tooling/Refactoring/Stencil.h' l='41' ll='65'/>
<ovr f='llvm/clang/lib/Tooling/Refactoring/Stencil.cpp' l='109' c='StencilPartImpl'/>
<size>16</size>
<doc f='llvm/clang/include/clang/Tooling/Refactoring/Stencil.h' l='35'>/// A stencil is represented as a sequence of &quot;parts&quot; that can each individually
/// generate a code string based on a match result.  The different kinds of
/// parts include (raw) text, references to bound nodes and assorted operations
/// on bound nodes.
///
/// Users can create custom Stencil operations by implementing this interface.</doc>
<fun r='_ZN5clang7tooling20StencilPartInterfaceD1Ev'/>
<fun r='_ZNK5clang7tooling20StencilPartInterface4evalERKNS_12ast_matchers11MatchFinder11MatchResultEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZNK5clang7tooling20StencilPartInterface7isEqualERKS1_'/>
<fun r='_ZNK5clang7tooling20StencilPartInterface6typeIdEv'/>
<fun r='_ZN5clang7tooling20StencilPartInterfaceC1EPKv'/>
<fun r='_ZN5clang7tooling20StencilPartInterfaceC1ERKS1_'/>
<fun r='_ZN5clang7tooling20StencilPartInterfaceaSERKS1_'/>
<mbr r='clang::tooling::StencilPartInterface::TypeId' o='64' t='const void *'/>
