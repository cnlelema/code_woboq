<dec f='llvm/llvm/include/llvm/ADT/APInt.h' l='1070' type='llvm::APInt llvm::APInt::urem(const llvm::APInt &amp; RHS) const'/>
<use f='llvm/llvm/include/llvm/ADT/APSInt.h' l='119' u='c' c='_ZN4llvm6APSIntrMERKS0_'/>
<use f='llvm/llvm/include/llvm/ADT/APSInt.h' l='134' u='c' c='_ZNK4llvm6APSIntrmERKS0_'/>
<doc f='llvm/llvm/include/llvm/ADT/APInt.h' l='1061'>/// Unsigned remainder operation.
  ///
  /// Perform an unsigned remainder operation on this APInt with RHS being the
  /// divisor. Both this and RHS are treated as unsigned quantities for purposes
  /// of this operation. Note that this is a true remainder operation and not a
  /// modulo operation because the sign follows the sign of the dividend which
  /// is *this.
  ///
  /// \returns a new APInt value containing the remainder result</doc>
<use f='llvm/llvm/lib/Analysis/Loads.cpp' l='84' u='c' c='_ZL34isDereferenceableAndAlignedPointerPKN4llvm5ValueEjRKNS_5APIntERKNS_10DataLayoutEPKNS_11InstructionEPKNS_13DominatorTreeERNS_15SmallPtrSetImplIS2_EE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='3214' u='c' c='_ZN4llvm15ScalarEvolution11getUDivExprEPKNS_4SCEVES3_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='3228' u='c' c='_ZN4llvm15ScalarEvolution11getUDivExprEPKNS_4SCEVES3_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='3234' u='c' c='_ZN4llvm15ScalarEvolution11getUDivExprEPKNS_4SCEVES3_'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/Utils.cpp' l='354' u='c' c='_ZN4llvm17ConstantFoldBinOpEjjjRKNS_19MachineRegisterInfoE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='4763' u='c' c='_ZL9FoldValuejRKN4llvm5APIntES2_'/>
<use f='llvm/llvm/lib/ExecutionEngine/ExecutionEngine.cpp' l='804' u='c' c='_ZN4llvm15ExecutionEngine16getConstantValueEPKNS_8ConstantE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='791' u='c' c='_ZN4llvm11Interpreter19visitBinaryOperatorERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='833' u='c' c='_ZN4llvm11Interpreter19visitBinaryOperatorERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='2083' u='c' c='_ZN4llvm11Interpreter20getConstantExprValueEPNS_12ConstantExprERNS_16ExecutionContextE'/>
<use f='llvm/llvm/lib/IR/ConstantFold.cpp' l='1222' u='c' c='_ZN4llvm29ConstantFoldBinaryInstructionEjPNS_8ConstantES1_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='986' u='c' c='_ZL12rotateModulojRKN4llvm5APIntE'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1153' u='c' c='_ZNK4llvm5APInt5magicEv'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1198' u='c' c='_ZNK4llvm5APInt6magicuEj'/>
<def f='llvm/llvm/lib/Support/APInt.cpp' l='1612' ll='1648' type='llvm::APInt llvm::APInt::urem(const llvm::APInt &amp; RHS) const'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1685' u='c' c='_ZNK4llvm5APInt4sremERKS0_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1686' u='c' c='_ZNK4llvm5APInt4sremERKS0_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1689' u='c' c='_ZNK4llvm5APInt4sremERKS0_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='1690' u='c' c='_ZNK4llvm5APInt4sremERKS0_'/>
<use f='llvm/llvm/lib/Support/APInt.cpp' l='2817' u='c' c='_ZN4llvm8APIntOps26SolveQuadraticEquationWrapENS_5APIntES1_S1_j'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='318' u='c' c='_ZN12_GLOBAL__N_117APIntTest_i1_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='917' u='c' c='_ZN12_GLOBAL__N_17testDivEN4llvm5APIntES1_S1_'/>
<use f='llvm/llvm/unittests/ADT/APIntTest.cpp' l='933' u='c' c='_ZN12_GLOBAL__N_17testDivEN4llvm5APIntES1_S1_'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='936' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_URem_Test8TestBodyEv'/>
