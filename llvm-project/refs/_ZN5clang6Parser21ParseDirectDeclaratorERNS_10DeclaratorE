<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2676' type='void clang::Parser::ParseDirectDeclarator(clang::Declarator &amp; D)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5400' u='a' c='_ZN5clang6Parser15ParseDeclaratorERNS_10DeclaratorE'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5685' ll='5983' type='void clang::Parser::ParseDirectDeclarator(clang::Declarator &amp; D)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6127' u='a' c='_ZN5clang6Parser20ParseParenDeclaratorERNS_10DeclaratorE'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6820' u='a' c='_ZN5clang6Parser31ParseMisplacedBracketDeclaratorERNS_10DeclaratorE'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='5639'>/// ParseDirectDeclarator
///       direct-declarator: [C99 6.7.5]
/// [C99]   identifier
///         &apos;(&apos; declarator &apos;)&apos;
/// [GNU]   &apos;(&apos; attributes declarator &apos;)&apos;
/// [C90]   direct-declarator &apos;[&apos; constant-expression[opt] &apos;]&apos;
/// [C99]   direct-declarator &apos;[&apos; type-qual-list[opt] assignment-expr[opt] &apos;]&apos;
/// [C99]   direct-declarator &apos;[&apos; &apos;static&apos; type-qual-list[opt] assign-expr &apos;]&apos;
/// [C99]   direct-declarator &apos;[&apos; type-qual-list &apos;static&apos; assignment-expr &apos;]&apos;
/// [C99]   direct-declarator &apos;[&apos; type-qual-list[opt] &apos;*&apos; &apos;]&apos;
/// [C++11] direct-declarator &apos;[&apos; constant-expression[opt] &apos;]&apos;
///                    attribute-specifier-seq[opt]
///         direct-declarator &apos;(&apos; parameter-type-list &apos;)&apos;
///         direct-declarator &apos;(&apos; identifier-list[opt] &apos;)&apos;
/// [GNU]   direct-declarator &apos;(&apos; parameter-forward-declarations
///                    parameter-type-list[opt] &apos;)&apos;
/// [C++]   direct-declarator &apos;(&apos; parameter-declaration-clause &apos;)&apos;
///                    cv-qualifier-seq[opt] exception-specification[opt]
/// [C++11] direct-declarator &apos;(&apos; parameter-declaration-clause &apos;)&apos;
///                    attribute-specifier-seq[opt] cv-qualifier-seq[opt]
///                    ref-qualifier[opt] exception-specification[opt]
/// [C++]   declarator-id
/// [C++11] declarator-id attribute-specifier-seq[opt]
///
///       declarator-id: [C++ 8]
///         &apos;...&apos;[opt] id-expression
///         &apos;::&apos;[opt] nested-name-specifier[opt] type-name
///
///       id-expression: [C++ 5.1]
///         unqualified-id
///         qualified-id
///
///       unqualified-id: [C++ 5.1]
///         identifier
///         operator-function-id
///         conversion-function-id
///          &apos;~&apos; class-name
///         template-id
///
/// C++17 adds the following, which we also handle here:
///
///       simple-declaration:
///         &lt;decl-spec&gt; &apos;[&apos; identifier-list &apos;]&apos; brace-or-equal-initializer &apos;;&apos;
///
/// Note, any additional constructs added here may need corresponding changes
/// in isConstructorDeclarator.</doc>
