<dec f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.h' l='134' type='llvm::SDValue llvm::SITargetLowering::performSHLPtrCombine(llvm::SDNode * N, unsigned int AS, llvm::EVT MemVT, llvm::TargetLowering::DAGCombinerInfo &amp; DCI) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='7411' ll='7456' type='llvm::SDValue llvm::SITargetLowering::performSHLPtrCombine(llvm::SDNode * N, unsigned int AddrSpace, llvm::EVT MemVT, llvm::TargetLowering::DAGCombinerInfo &amp; DCI) const'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='7466' u='c' c='_ZNK4llvm16SITargetLowering23performMemSDNodeCombineEPNS_9MemSDNodeERNS_14TargetLowering15DAGCombinerInfoE'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/SIISelLowering.cpp' l='7397'>// (shl (add x, c1), c2) -&gt; add (shl x, c2), (shl c1, c2)

// This is a variant of
// (mul (add x, c1), c2) -&gt; add (mul x, c2), (mul c1, c2),
//
// The normal DAG combiner will do this, but only if the add has one use since
// that would increase the number of instructions.
//
// This prevents us from seeing a constant offset that can be folded into a
// memory instruction&apos;s addressing mode. If we know the resulting add offset of
// a pointer can be folded into an addressing offset, we can replace the pointer
// operand with the add of new constant offset. This eliminates one of the uses,
// and may allow the remaining use to also be simplified.
//</doc>
