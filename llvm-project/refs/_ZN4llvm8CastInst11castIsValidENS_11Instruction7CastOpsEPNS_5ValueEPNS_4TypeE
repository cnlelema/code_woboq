<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='705' type='static bool llvm::CastInst::castIsValid(Instruction::CastOps op, llvm::Value * S, llvm::Type * DstTy)'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='701'>/// This method can be used to determine if a cast from S to DstTy using
  /// Opcode op is valid or not.
  /// @returns true iff the proposed cast is valid.
  /// Determine if a cast is valid without creating one.</doc>
<use f='llvm/llvm/lib/Analysis/ConstantFolding.cpp' l='341' u='c' c='_ZN4llvm30ConstantFoldLoadThroughBitcastEPNS_8ConstantEPNS_4TypeERKNS_10DataLayoutE'/>
<use f='llvm/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp' l='154' u='c' c='_ZN4llvm20UnrolledInstAnalyzer13visitCastInstERNS_8CastInstE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='3300' u='c' c='_ZN4llvm8LLParser10ParseValIDERNS_5ValIDEPNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6514' u='c' c='_ZN4llvm8LLParser9ParseCastERPNS_11InstructionERNS0_16PerFunctionStateEj'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6515' u='c' c='_ZN4llvm8LLParser9ParseCastERPNS_11InstructionERNS0_16PerFunctionStateEj'/>
<use f='llvm/llvm/lib/Bitcode/Reader/BitcodeReader.cpp' l='3729' u='c' c='_ZN12_GLOBAL__N_113BitcodeReader17parseFunctionBodyEPN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='1553' u='c' c='_ZN4llvm12ConstantExpr7getCastEjPNS_8ConstantEPNS_4TypeEb'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='1553' u='c' c='_ZN4llvm12ConstantExpr10getBitCastEPNS_8ConstantEPNS_4TypeEb'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='1553' u='c' c='_ZN4llvm12ConstantExpr16getAddrSpaceCastEPNS_8ConstantEPNS_4TypeEb'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8CastInst6CreateENS_11Instruction7CastOpsEPNS_5ValueEPNS_4TypeERKNS_5TwineEPS1_'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8CastInst6CreateENS_11Instruction7CastOpsEPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='3212' ll='3325' type='static bool llvm::CastInst::castIsValid(Instruction::CastOps op, llvm::Value * S, llvm::Type * DstTy)'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm9TruncInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm9TruncInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8ZExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8ZExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8SExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm8SExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm11FPTruncInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm11FPTruncInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm9FPExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm9FPExtInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10UIToFPInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10UIToFPInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10SIToFPInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10SIToFPInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10FPToUIInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10FPToUIInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10FPToSIInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm10FPToSIInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm12PtrToIntInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm12PtrToIntInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm12IntToPtrInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm12IntToPtrInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm11BitCastInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm11BitCastInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm17AddrSpaceCastInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2750' u='c' c='_ZN4llvm17AddrSpaceCastInstC1EPNS_5ValueEPNS_4TypeERKNS_5TwineEPNS_10BasicBlockE'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='3204'>//===----------------------------------------------------------------------===//
//                    CastInst SubClass Constructors
//===----------------------------------------------------------------------===//

/// Check that the construction parameters for a CastInst are correct. This
/// could be broken out into the separate constructors but it is useful to have
/// it in one place and to eliminate the redundant code for getting the sizes
/// of the types involved.</doc>
<use f='llvm/llvm/lib/IR/Verifier.cpp' l='1918' u='c' c='_ZN12_GLOBAL__N_18Verifier17visitConstantExprEPKN4llvm12ConstantExprE'/>
<use f='llvm/llvm/lib/IR/Verifier.cpp' l='2755' u='c' c='_ZN12_GLOBAL__N_18Verifier16visitBitCastInstERN4llvm11BitCastInstE'/>
<use f='llvm/llvm/unittests/IR/InstructionsTest.cpp' l='275' u='c' c='_ZN4llvm12_GLOBAL__N_130InstructionsTest_CastInst_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/InstructionsTest.cpp' l='278' u='c' c='_ZN4llvm12_GLOBAL__N_130InstructionsTest_CastInst_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/InstructionsTest.cpp' l='282' u='c' c='_ZN4llvm12_GLOBAL__N_130InstructionsTest_CastInst_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/InstructionsTest.cpp' l='285' u='c' c='_ZN4llvm12_GLOBAL__N_130InstructionsTest_CastInst_Test8TestBodyEv'/>
