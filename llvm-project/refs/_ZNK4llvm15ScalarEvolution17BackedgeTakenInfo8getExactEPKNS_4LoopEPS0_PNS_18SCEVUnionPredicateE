<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1333' type='const llvm::SCEV * llvm::ScalarEvolution::BackedgeTakenInfo::getExact(const llvm::Loop * L, llvm::ScalarEvolution * SE, llvm::SCEVUnionPredicate * Predicates = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1315'>/// Return an expression indicating the exact *backedge-taken*
    /// count of the loop if it is known or SCEVCouldNotCompute
    /// otherwise.  If execution makes it to the backedge on every
    /// iteration (i.e. there are no abnormal exists like exception
    /// throws and thread exits) then this is the number of times the
    /// loop header will execute minus one.
    ///
    /// If the SCEV predicate associated with the answer can be different
    /// from AlwaysTrue, we must add a (non null) Predicates argument.
    /// The SCEV predicate associated with the answer will be added to
    /// Predicates. A run-time check needs to be emitted for the SCEV
    /// predicate in order for the answer to be valid.
    ///
    /// Note that we should always know if we need to pass a predicate
    /// argument or not from the way the ExitCounts vector was computed.
    /// If we allowed SCEV predicates to be generated when populating this
    /// vector, this information can contain them and therefore a
    /// SCEVPredicate argument should be added to getExact.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6585' u='c' c='_ZN4llvm15ScalarEvolution31getPredicatedBackedgeTakenCountEPKNS_4LoopERNS_18SCEVUnionPredicateE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6589' u='c' c='_ZN4llvm15ScalarEvolution21getBackedgeTakenCountEPKNS_4LoopE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6650' u='c' c='_ZN4llvm15ScalarEvolution20getBackedgeTakenInfoEPKNS_4LoopE'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6859' ll='6891' type='const llvm::SCEV * llvm::ScalarEvolution::BackedgeTakenInfo::getExact(const llvm::Loop * L, llvm::ScalarEvolution * SE, llvm::SCEVUnionPredicate * Preds = nullptr) const'/>
<doc f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6853'>/// Get the exact loop backedge taken count considering all loop exits. A
/// computable result can only be returned for loops with all exiting blocks
/// dominating the latch. howFarToZero assumes that the limit of each loop test
/// is never skipped. This is a valid assumption as long as the loop exits via
/// that test. For precise results, it is the caller&apos;s responsibility to specify
/// the relevant loop exiting block using getExact(ExitingBlock, SE).</doc>
