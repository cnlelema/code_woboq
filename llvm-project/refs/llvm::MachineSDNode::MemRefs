<dec f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='2445' type='PointerUnion&lt;llvm::MachineMemOperand *, llvm::MachineMemOperand **&gt;'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='2461' u='m' c='_ZNK4llvm13MachineSDNode11memoperandsEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='2464' u='m' c='_ZNK4llvm13MachineSDNode11memoperandsEv'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='2472' u='w' c='_ZN4llvm13MachineSDNode12clearMemRefsEv'/>
<offset>640</offset>
<doc f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='2431'>// We use a pointer union between a single `MachineMemOperand` pointer and
  // a pointer to an array of `MachineMemOperand` pointers. This is null when
  // the number of these is zero, the single pointer variant used when the
  // number is one, and the array is used for larger numbers.
  //
  // The array is allocated via the `SelectionDAG`&apos;s allocator and so will
  // always live until the DAG is cleaned up and doesn&apos;t require ownership here.
  //
  // We can&apos;t use something simpler like `TinyPtrVector` here because `SDNode`
  // subclasses aren&apos;t managed in a conforming C++ manner. See the comments on
  // `SelectionDAG::MorphNodeTo` which details what all goes on, but the
  // constraint here is that these don&apos;t manage memory with their constructor or
  // destructor and can be initialized to a good state even if they start off
  // uninitialized.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='7750' u='w' c='_ZN4llvm12SelectionDAG14setNodeMemRefsEPNS_13MachineSDNodeENS_8ArrayRefIPNS_17MachineMemOperandEEE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='7758' u='w' c='_ZN4llvm12SelectionDAG14setNodeMemRefsEPNS_13MachineSDNodeENS_8ArrayRefIPNS_17MachineMemOperandEEE'/>
