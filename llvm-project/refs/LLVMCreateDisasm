<dec f='llvm/llvm/include/llvm-c/Disassembler.h' l='39' type='LLVMDisasmContextRef LLVMCreateDisasm(const char * TripleName, void * DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)'/>
<def f='llvm/llvm/lib/MC/MCDisassembler/Disassembler.cpp' l='117' ll='122' type='LLVMDisasmContextRef LLVMCreateDisasm(const char * TT, void * DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)'/>
<doc f='llvm/llvm/include/llvm-c/Disassembler.h' l='31'>/**
 * Create a disassembler for the TripleName.  Symbolic disassembly is supported
 * by passing a block of information in the DisInfo parameter and specifying the
 * TagType and callback functions as described above.  These can all be passed
 * as NULL.  If successful, this returns a disassembler context.  If not, it
 * returns NULL. This function is equivalent to calling
 * LLVMCreateDisasmCPUFeatures() with an empty CPU name and feature set.
 */</doc>
<use f='llvm/llvm/unittests/MC/Disassembler.cpp' l='32' u='c' c='_ZN25Disassembler_X86Test_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/MC/Disassembler.cpp' l='74' u='c' c='_ZN33Disassembler_WebAssemblyTest_Test8TestBodyEv'/>
