<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2285' type='clang::Parser::ConditionOrInitStatement clang::Parser::isCXXConditionDeclarationOrInitStatement(bool CanBeInitStmt, bool CanBeForRangeDecl)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='2281'>/// Disambiguates between the different kinds of things that can happen
  /// after &apos;if (&apos; or &apos;switch (&apos;. This could be one of two different kinds of
  /// declaration (depending on whether there is a &apos;;&apos; later) or an expression.</doc>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1872' u='c' c='_ZN5clang6Parser17ParseCXXConditionEPNS_12ActionResultIPNS_4StmtELb1EEENS_14SourceLocationENS_4Sema13ConditionKindEPNS0_12ForRangeInfoE'/>
<def f='llvm/clang/lib/Parse/ParseTentative.cpp' l='463' ll='525' type='Parser::ConditionOrInitStatement clang::Parser::isCXXConditionDeclarationOrInitStatement(bool CanBeInitStatement, bool CanBeForRangeDecl)'/>
<doc f='llvm/clang/lib/Parse/ParseTentative.cpp' l='446'>/// Disambiguates between a declaration in a condition, a
/// simple-declaration in an init-statement, and an expression for
/// a condition of a if/switch statement.
///
///       condition:
///         expression
///         type-specifier-seq declarator &apos;=&apos; assignment-expression
/// [C++11] type-specifier-seq declarator &apos;=&apos; initializer-clause
/// [C++11] type-specifier-seq declarator braced-init-list
/// [GNU]   type-specifier-seq declarator simple-asm-expr[opt] attributes[opt]
///             &apos;=&apos; assignment-expression
///       simple-declaration:
///         decl-specifier-seq init-declarator-list[opt] &apos;;&apos;
///
/// Note that, unlike isCXXSimpleDeclaration, we must disambiguate all the way
/// to the &apos;;&apos; to disambiguate cases like &apos;int(x))&apos; (an expression) from
/// &apos;int(x);&apos; (a simple-declaration in an init-statement).</doc>
