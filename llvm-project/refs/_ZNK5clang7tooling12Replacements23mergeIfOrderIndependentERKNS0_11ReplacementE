<dec f='llvm/clang/include/clang/Tooling/Core/Replacement.h' l='308' type='llvm::Expected&lt;Replacements&gt; clang::tooling::Replacements::mergeIfOrderIndependent(const clang::tooling::Replacement &amp; R) const'/>
<doc f='llvm/clang/include/clang/Tooling/Core/Replacement.h' l='304'>// If `R` and all existing replacements are order-indepedent, then merge it
  // with `Replaces` and returns the merged replacements; otherwise, returns an
  // error.</doc>
<def f='llvm/clang/lib/Tooling/Core/Replacement.cpp' l='219' ll='243' type='llvm::Expected&lt;Replacements&gt; clang::tooling::Replacements::mergeIfOrderIndependent(const clang::tooling::Replacement &amp; R) const'/>
<use f='llvm/clang/lib/Tooling/Core/Replacement.cpp' l='335' u='c' c='_ZN5clang7tooling12Replacements3addERKNS0_11ReplacementE'/>
<doc f='llvm/clang/lib/Tooling/Core/Replacement.cpp' l='216'>// `R` and `Replaces` are order-independent if applying them in either order
// has the same effect, so we need to compare replacements associated to
// applying them in either order.</doc>
