<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='835' type='void llvm::DependenceInfo::findBoundsLT(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2650' u='c' c='_ZNK4llvm14DependenceInfo17exploreDirectionsEjPNS0_15CoefficientInfoES2_PNS0_9BoundInfoERKNS_14SmallBitVectorERjPKNS_4SCEVE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2824' ll='2852' type='void llvm::DependenceInfo::findBoundsLT(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2811'>// Computes the upper and lower bounds for level K
// using the &lt; direction. Records them in Bound.
// Wolfe gives the equations
//
//    LB^&lt;_k = (A^-_k - B_k)^- (U_k - L_k - N_k) + (A_k - B_k)L_k - B_k N_k
//    UB^&lt;_k = (A^+_k - B_k)^+ (U_k - L_k - N_k) + (A_k - B_k)L_k - B_k N_k
//
// Since we normalize loops, we can simplify these equations to
//
//    LB^&lt;_k = (A^-_k - B_k)^- (U_k - 1) - B_k
//    UB^&lt;_k = (A^+_k - B_k)^+ (U_k - 1) - B_k
//
// We must be careful to handle the case where the upper bound is unknown.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='833'>/// findBoundsLT - Computes the upper and lower bounds for level K
    /// using the &lt; direction. Records them in Bound.</doc>
