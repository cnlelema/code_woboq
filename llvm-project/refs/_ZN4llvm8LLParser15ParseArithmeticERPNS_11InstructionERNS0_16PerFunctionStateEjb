<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='578' type='bool llvm::LLParser::ParseArithmetic(llvm::Instruction *&amp; Inst, llvm::LLParser::PerFunctionState &amp; PFS, unsigned int Opc, bool IsFP)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='5706' u='c' c='_ZN4llvm8LLParser16ParseInstructionERPNS_11InstructionEPNS_10BasicBlockERNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='5718' u='c' c='_ZN4llvm8LLParser16ParseInstructionERPNS_11InstructionEPNS_10BasicBlockERNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='5732' u='c' c='_ZN4llvm8LLParser16ParseInstructionERPNS_11InstructionEPNS_10BasicBlockERNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='5738' u='c' c='_ZN4llvm8LLParser16ParseInstructionERPNS_11InstructionEPNS_10BasicBlockERNS0_16PerFunctionStateE'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6433' ll='6449' type='bool llvm::LLParser::ParseArithmetic(llvm::Instruction *&amp; Inst, llvm::LLParser::PerFunctionState &amp; PFS, unsigned int Opc, bool IsFP)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6424'>//===----------------------------------------------------------------------===//
// Binary Operators.
//===----------------------------------------------------------------------===//

/// ParseArithmetic
///  ::= ArithmeticOps TypeAndValue &apos;,&apos; Value
///
/// If IsFP is false, then any integer operand is allowed, if it is true, any fp
/// operand is allowed.</doc>
