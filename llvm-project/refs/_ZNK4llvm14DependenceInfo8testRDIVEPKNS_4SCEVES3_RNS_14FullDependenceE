<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='630' type='bool llvm::DependenceInfo::testRDIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, llvm::FullDependence &amp; Result) const'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2221' ll='2281' type='bool llvm::DependenceInfo::testRDIV(const llvm::SCEV * Src, const llvm::SCEV * Dst, llvm::FullDependence &amp; Result) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3615' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3715' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2208'>// testRDIV -
// When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*j]
// where i and j are induction variables, c1 and c2 are loop invariant,
// and a1 and a2 are constant, we can solve it exactly with an easy adaptation
// of the Exact SIV test, the Restricted Double Index Variable (RDIV) test.
// It doesn&apos;t make sense to talk about distance or direction in this case,
// so there&apos;s no point in making special versions of the Strong SIV test or
// the Weak-crossing SIV test.
//
// With minor algebra, this test can also be used for things like
// [c1 + a1*i + a2*j][c2].
//
// Return true if dependence disproved.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='621'>/// testRDIV - Tests the RDIV subscript pair (Src and Dst) for dependence.
    /// Things of the form [c1 + a1*i] and [c2 + a2*j]
    /// where i and j are induction variables, c1 and c2 are loop invariant,
    /// and a1 and a2 are constant.
    /// With minor algebra, this test can also be used for things like
    /// [c1 + a1*i + a2*j][c2].
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// Marks the Result as inconsistent.</doc>
