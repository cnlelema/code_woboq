<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='626' type='ICmpInst::Predicate llvm::Loop::LoopBounds::getCanonicalPredicate() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='593'>/// Return the canonical predicate for the latch compare instruction, if
    /// able to be calcuated. Else BAD_ICMP_PREDICATE.
    ///
    /// A predicate is considered as canonical if requirements below are all
    /// satisfied:
    /// 1. The first successor of the latch branch is the loop header
    ///    If not, inverse the predicate.
    /// 2. One of the operands of the latch comparison is StepInst
    ///    If not, and
    ///    - if the current calcuated predicate is not ne or eq, flip the
    ///      predicate.
    ///    - else if the loop is increasing, return slt
    ///      (notice that it is safe to change from ne or eq to sign compare)
    ///    - else if the loop is decreasing, return sgt
    ///      (notice that it is safe to change from ne or eq to sign compare)
    ///
    /// Here is an example when both (1) and (2) are not satisfied:
    /// \code
    /// loop.header:
    ///  %iv = phi [%initialiv, %loop.preheader], [%inc, %loop.header]
    ///  %inc = add %iv, %step
    ///  %cmp = slt %iv, %finaliv
    ///  br %cmp, %loop.exit, %loop.header
    /// loop.exit:
    /// \endcode
    /// - The second successor of the latch branch is the loop header instead
    ///   of the first successor (slt -&gt; sge)
    /// - The first operand of the latch comparison (%cmp) is the IndVar (%iv)
    ///   instead of the StepInst (%inc) (sge -&gt; sgt)
    ///
    /// The predicate would be sgt if both (1) and (2) are satisfied.
    /// getCanonicalPredicate() returns sgt for this example.
    /// Note: The IR is not changed.</doc>
<def f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='228' ll='268' type='ICmpInst::Predicate llvm::Loop::LoopBounds::getCanonicalPredicate() const'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='286' u='c' c='_ZN31LoopInfoTest_CanonicalLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='286' u='c' c='_ZN31LoopInfoTest_CanonicalLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='341' u='c' c='_ZN43LoopInfoTest_LoopWithInverseGuardSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='341' u='c' c='_ZN43LoopInfoTest_LoopWithInverseGuardSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='396' u='c' c='_ZN41LoopInfoTest_LoopWithSwappedGuardCmp_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='396' u='c' c='_ZN41LoopInfoTest_LoopWithSwappedGuardCmp_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='451' u='c' c='_ZN43LoopInfoTest_LoopWithInverseLatchSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='451' u='c' c='_ZN43LoopInfoTest_LoopWithInverseLatchSuccs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='506' u='c' c='_ZN36LoopInfoTest_LoopWithLatchCmpNE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='506' u='c' c='_ZN36LoopInfoTest_LoopWithLatchCmpNE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='562' u='c' c='_ZN37LoopInfoTest_LoopWithGuardCmpSLE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='562' u='c' c='_ZN37LoopInfoTest_LoopWithGuardCmpSLE_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='615' u='c' c='_ZN37LoopInfoTest_LoopNonConstantStep_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='615' u='c' c='_ZN37LoopInfoTest_LoopNonConstantStep_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='669' u='c' c='_ZN36LoopInfoTest_LoopUnsignedBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='669' u='c' c='_ZN36LoopInfoTest_LoopUnsignedBounds_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='724' u='c' c='_ZN32LoopInfoTest_DecreasingLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='724' u='c' c='_ZN32LoopInfoTest_DecreasingLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='777' u='c' c='_ZN37LoopInfoTest_CannotFindDirection_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='777' u='c' c='_ZN37LoopInfoTest_CannotFindDirection_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='836' u='c' c='_ZN28LoopInfoTest_ZextIndVar_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='836' u='c' c='_ZN28LoopInfoTest_ZextIndVar_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='887' u='c' c='_ZN31LoopInfoTest_UnguardedLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='887' u='c' c='_ZN31LoopInfoTest_UnguardedLoop_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='941' u='c' c='_ZN46LoopInfoTest_UnguardedLoopWithControlFlow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='941' u='c' c='_ZN46LoopInfoTest_UnguardedLoopWithControlFlow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1007' u='c' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1007' u='c' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1029' u='c' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1029' u='c' c='_ZN26LoopInfoTest_LoopNest_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1093' u='c' c='_ZN29LoopInfoTest_AuxiliaryIV_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LoopInfoTest.cpp' l='1093' u='c' c='_ZN29LoopInfoTest_AuxiliaryIV_Test8TestBodyEv'/>
