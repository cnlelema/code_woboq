<def f='llvm/llvm/include/llvm/IR/CallSite.h' l='534' ll='536' type='bool llvm::CallSiteBase::cannotDuplicate() const'/>
<doc f='llvm/llvm/include/llvm/IR/CallSite.h' l='533'>/// Determine if the call can be duplicated.</doc>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='441' u='c' c='_ZNK4llvm4Loop13isSafeToCloneEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp' l='186' u='c' c='_ZL16canSplitCallSiteN4llvm8CallSiteERNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp' l='2622' u='c' c='_ZL21unswitchBestConditionRN4llvm4LoopERNS_13DominatorTreeERNS_8LoopInfoERNS_15AssumptionCacheERNS_19TargetTransformInfoENS_12function_refIFvbNS_8Arra2024261'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SpeculateAroundPHIs.cpp' l='71' u='c' c='_ZL25isSafeToSpeculatePHIUsersRN4llvm7PHINodeERNS_13DominatorTreeERNS_15SmallPtrSetImplIPNS_11InstructionEEES8_'/>
