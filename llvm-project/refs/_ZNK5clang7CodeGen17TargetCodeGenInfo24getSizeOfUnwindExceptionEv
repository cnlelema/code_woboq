<dec f='llvm/clang/lib/CodeGen/TargetInfo.h' l='75' type='unsigned int clang::CodeGen::TargetCodeGenInfo::getSizeOfUnwindException() const'/>
<doc f='llvm/clang/lib/CodeGen/TargetInfo.h' l='67'>/// Determines the size of struct _Unwind_Exception on this platform,
  /// in 8-bit units.  The Itanium ABI defines this as:
  ///   struct _Unwind_Exception {
  ///     uint64 exception_class;
  ///     _Unwind_Exception_Cleanup_Fn exception_cleanup;
  ///     uint64 private_1;
  ///     uint64 private_2;
  ///   };</doc>
<use f='llvm/clang/lib/CodeGen/ItaniumCXXABI.cpp' l='4146' u='c' c='_ZL14InitCatchParamRN5clang7CodeGen15CodeGenFunctionERKNS_7VarDeclENS0_7AddressENS_14SourceLocationE'/>
<def f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='400' ll='408' type='unsigned int clang::CodeGen::TargetCodeGenInfo::getSizeOfUnwindException() const'/>
<ovr f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='5697' c='_ZNK12_GLOBAL__N_120ARMTargetCodeGenInfo24getSizeOfUnwindExceptionEv'/>
<use f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='5699' u='c' c='_ZNK12_GLOBAL__N_120ARMTargetCodeGenInfo24getSizeOfUnwindExceptionEv'/>
<ovr f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='7063' c='_ZNK12_GLOBAL__N_121MIPSTargetCodeGenInfo24getSizeOfUnwindExceptionEv'/>
<doc f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='398'>// If someone can figure out a general rule for this, that would be great.
// It&apos;s probably just doomed to be platform-dependent, though.</doc>
