<def f='llvm/llvm/lib/Analysis/StratifiedSets.h' l='173' ll='593'/>
<doc f='llvm/llvm/lib/Analysis/StratifiedSets.h' l='113'>/// Generic Builder class that produces StratifiedSets instances.
///
/// The goal of this builder is to efficiently produce correct StratifiedSets
/// instances. To this end, we use a few tricks:
///   &gt; Set chains (A method for linking sets together)
///   &gt; Set remaps (A method for marking a set as an alias [irony?] of another)
///
/// ==== Set chains ====
/// This builder has a notion of some value A being above, below, or with some
/// other value B:
///   &gt; The `A above B` relationship implies that there is a reference edge
///   going from A to B. Namely, it notes that A can store anything in B&apos;s set.
///   &gt; The `A below B` relationship is the opposite of `A above B`. It implies
///   that there&apos;s a dereference edge going from A to B.
///   &gt; The `A with B` relationship states that there&apos;s an assignment edge going
///   from A to B, and that A and B should be treated as equals.
///
/// As an example, take the following code snippet:
///
/// %a = alloca i32, align 4
/// %ap = alloca i32*, align 8
/// %app = alloca i32**, align 8
/// store %a, %ap
/// store %ap, %app
/// %aw = getelementptr %ap, i32 0
///
/// Given this, the following relations exist:
///   - %a below %ap &amp; %ap above %a
///   - %ap below %app &amp; %app above %ap
///   - %aw with %ap &amp; %ap with %aw
///
/// These relations produce the following sets:
///   [{%a}, {%ap, %aw}, {%app}]
///
/// ...Which state that the only MayAlias relationship in the above program is
/// between %ap and %aw.
///
/// Because LLVM allows arbitrary casts, code like the following needs to be
/// supported:
///   %ip = alloca i64, align 8
///   %ipp = alloca i64*, align 8
///   %i = bitcast i64** ipp to i64
///   store i64* %ip, i64** %ipp
///   store i64 %i, i64* %ip
///
/// Which, because %ipp ends up *both* above and below %ip, is fun.
///
/// This is solved by merging %i and %ipp into a single set (...which is the
/// only way to solve this, since their bit patterns are equivalent). Any sets
/// that ended up in between %i and %ipp at the time of merging (in this case,
/// the set containing %ip) also get conservatively merged into the set of %i
/// and %ipp. In short, the resulting StratifiedSet from the above code would be
/// {%ip, %ipp, %i}.
///
/// ==== Set remaps ====
/// More of an implementation detail than anything -- when merging sets, we need
/// to update the numbers of all of the elements mapped to those sets. Rather
/// than doing this at each merge, we note in the BuilderLink structure that a
/// remap has occurred, and use this information so we can defer renumbering set
/// elements until build time.</doc>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder12finalizeSetsERSt6vectorINS0_14StratifiedLinkESaIS3_EE'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder14propagateAttrsERSt6vectorINS0_14StratifiedLinkESaIS3_EE'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder5buildEv'/>
<fun r='_ZNK4llvm5cflaa21StratifiedSetsBuilder3hasERKT_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder3addERKT_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder8addAboveERKT_S4_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder8addBelowERKT_S4_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder7addWithERKT_S4_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder14noteAttributesERKT_St6bitsetILm32EE'/>
<mbr r='llvm::cflaa::StratifiedSetsBuilder::Values' t='DenseMap&lt;T, llvm::cflaa::StratifiedInfo&gt;'/>
<mbr r='llvm::cflaa::StratifiedSetsBuilder::Links' t='std::vector&lt;BuilderLink&gt;'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder12addAtMergingERKT_j'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder7linksAtEj'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder5mergeEjj'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder11mergeDirectEjj'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder15tryMergeUpwardsEjj'/>
<fun r='_ZNK4llvm5cflaa21StratifiedSetsBuilder3getERKT_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder3getERKT_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder7indexOfERKT_'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder12addLinkBelowEj'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder12addLinkAboveEj'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder19getNewUnlinkedIndexEv'/>
<fun r='_ZN4llvm5cflaa21StratifiedSetsBuilder8addLinksEv'/>
<fun r='_ZNK4llvm5cflaa21StratifiedSetsBuilder8inboundsEj'/>
