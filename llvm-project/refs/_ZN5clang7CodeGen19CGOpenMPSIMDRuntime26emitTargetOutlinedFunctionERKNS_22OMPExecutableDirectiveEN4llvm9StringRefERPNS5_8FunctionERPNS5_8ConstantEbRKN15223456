<dec f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='2080' type='void clang::CodeGen::CGOpenMPSIMDRuntime::emitTargetOutlinedFunction(const clang::OMPExecutableDirective &amp; D, llvm::StringRef ParentName, llvm::Function *&amp; OutlinedFn, llvm::Constant *&amp; OutlinedFnID, bool IsOffloadEntry, const clang::CodeGen::RegionCodeGenTy &amp; CodeGen)'/>
<doc f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.h' l='2071'>/// Emit outilined function for &apos;target&apos; directive.
  /// \param D Directive to emit.
  /// \param ParentName Name of the function that encloses the target region.
  /// \param OutlinedFn Outlined function value to be defined by this call.
  /// \param OutlinedFnID Outlined function ID value to be defined by this call.
  /// \param IsOffloadEntry True if the outlined function is an offload entry.
  /// \param CodeGen Code generation sequence for the \a D directive.
  /// An outlined function may not be an entry if, e.g. the if clause always
  /// evaluates to false.</doc>
<inh f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='6440' c='_ZN5clang7CodeGen15CGOpenMPRuntime26emitTargetOutlinedFunctionERKNS_22OMPExecutableDirectiveEN4llvm9StringRefERPNS5_8FunctionERPNS5_8ConstantEbRKNS0_15RegionCodeGenTyE'/>
<def f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='10683' ll='10688' type='void clang::CodeGen::CGOpenMPSIMDRuntime::emitTargetOutlinedFunction(const clang::OMPExecutableDirective &amp; D, llvm::StringRef ParentName, llvm::Function *&amp; OutlinedFn, llvm::Constant *&amp; OutlinedFnID, bool IsOffloadEntry, const clang::CodeGen::RegionCodeGenTy &amp; CodeGen)'/>
