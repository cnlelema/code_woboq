<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='112' type='bool llvm::JumpThreadingPass::ThreadEdge(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs, llvm::BasicBlock * SuccBB)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1745' u='c' c='_ZN4llvm17JumpThreadingPass22ProcessThreadableEdgesEPNS_5ValueEPNS_10BasicBlockENS_13jumpthreading18ConstantPreferenceEPNS_11InstructionE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1910' ll='2076' type='bool llvm::JumpThreadingPass::ThreadEdge(llvm::BasicBlock * BB, const SmallVectorImpl&lt;llvm::BasicBlock *&gt; &amp; PredBBs, llvm::BasicBlock * SuccBB)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1907'>/// ThreadEdge - We have decided that it is safe and profitable to factor the
/// blocks in PredBBs to one predecessor, then thread an edge from it to SuccBB
/// across BB.  Transform the IR to reflect this change.</doc>
