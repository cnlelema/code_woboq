<dec f='llvm/llvm/utils/TableGen/X86DisassemblerTables.h' l='251' type='void llvm::X86Disassembler::DisassemblerTables::setTableFields(llvm::X86Disassembler::OpcodeType type, llvm::X86Disassembler::InstructionContext insnContext, uint8_t opcode, const llvm::X86Disassembler::ModRMFilter &amp; filter, InstrUID uid, bool is32bit, bool noPrefix, bool ignoresVEX_L, bool ignoresVEX_W, unsigned int AddrSize)'/>
<doc f='llvm/llvm/utils/TableGen/X86DisassemblerTables.h' l='235'>/// setTableFields - Uses the opcode type, instruction context, opcode, and a
  ///   ModRMFilter as criteria to set a particular set of entries in the
  ///   decode tables to point to a specific uid.
  ///
  /// @param type         - The opcode type (ONEBYTE, TWOBYTE, etc.)
  /// @param insnContext  - The context to use (IC, IC_64BIT, etc.)
  /// @param opcode       - The last byte of the opcode (not counting any escape
  ///                       or extended opcodes).
  /// @param filter       - The ModRMFilter that decides which ModR/M byte values
  ///                       correspond to the desired instruction.
  /// @param uid          - The unique ID of the instruction.
  /// @param is32bit      - Instructon is only 32-bit
  /// @param noPrefix     - Instruction record has no prefix.
  /// @param ignoresVEX_L - Instruction ignores VEX.L
  /// @param ignoresVEX_W - Instruction ignores VEX.W
  /// @param AddrSize     - Instructions address size 16/32/64. 0 is unspecified</doc>
<def f='llvm/llvm/utils/TableGen/X86DisassemblerTables.cpp' l='1109' ll='1135' type='void llvm::X86Disassembler::DisassemblerTables::setTableFields(llvm::X86Disassembler::OpcodeType type, llvm::X86Disassembler::InstructionContext insnContext, uint8_t opcode, const llvm::X86Disassembler::ModRMFilter &amp; filter, InstrUID uid, bool is32bit, bool noPrefix, bool ignoresVEX_L, bool ignoresVEX_W, unsigned int addressSize)'/>
<use f='llvm/llvm/utils/TableGen/X86RecognizableInstr.cpp' l='811' u='c' c='_ZNK4llvm15X86Disassembler17RecognizableInstr14emitDecodePathERNS0_18DisassemblerTablesE'/>
<use f='llvm/llvm/utils/TableGen/X86RecognizableInstr.cpp' l='816' u='c' c='_ZNK4llvm15X86Disassembler17RecognizableInstr14emitDecodePathERNS0_18DisassemblerTablesE'/>
