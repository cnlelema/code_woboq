<dec f='llvm/llvm/include/llvm/MC/MCCodePadder.h' l='235' type='double llvm::MCCodePaddingPolicy::computeRangePenaltyWeight(const MCPFRange &amp; Range, uint64_t Offset, llvm::MCAsmLayout &amp; Layout) const'/>
<doc f='llvm/llvm/include/llvm/MC/MCCodePadder.h' l='226'>/// Computes and returns the penalty caused by a range of instruction windows.
  /// The weight is computed for each window separelty and then accumulated.
  ///
  /// \param Range The range.
  /// \param Offset The offset of the parent section relative to the beginning
  /// of the file, mod the window size.
  /// \param Layout Code layout information.
  ///
  /// \returns the penalty caused by \p Range.</doc>
<use f='llvm/llvm/lib/MC/MCCodePadder.cpp' l='244' u='c' c='_ZN4llvm12MCCodePadder13relaxFragmentEPNS_17MCPaddingFragmentERNS_11MCAsmLayoutE'/>
<def f='llvm/llvm/lib/MC/MCCodePadder.cpp' l='293' ll='327' type='double llvm::MCCodePaddingPolicy::computeRangePenaltyWeight(const MCPFRange &amp; Range, uint64_t Offset, llvm::MCAsmLayout &amp; Layout) const'/>
