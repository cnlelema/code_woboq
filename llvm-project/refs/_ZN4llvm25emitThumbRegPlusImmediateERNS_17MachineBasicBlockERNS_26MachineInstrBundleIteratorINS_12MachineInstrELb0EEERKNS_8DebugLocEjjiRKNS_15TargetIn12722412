<dec f='llvm/llvm/lib/Target/ARM/ARMBaseInstrInfo.h' l='541' type='void llvm::emitThumbRegPlusImmediate(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator &amp; MBBI, const llvm::DebugLoc &amp; dl, unsigned int DestReg, unsigned int BaseReg, int NumBytes, const llvm::TargetInstrInfo &amp; TII, const llvm::ARMBaseRegisterInfo &amp; MRI, unsigned int MIFlags = 0)'/>
<def f='llvm/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp' l='185' ll='336' type='void llvm::emitThumbRegPlusImmediate(llvm::MachineBasicBlock &amp; MBB, MachineBasicBlock::iterator &amp; MBBI, const llvm::DebugLoc &amp; dl, unsigned int DestReg, unsigned int BaseReg, int NumBytes, const llvm::TargetInstrInfo &amp; TII, const llvm::ARMBaseRegisterInfo &amp; MRI, unsigned int MIFlags = 0)'/>
<doc f='llvm/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp' l='181'>/// emitThumbRegPlusImmediate - Emits a series of instructions to materialize
/// a destreg = basereg + immediate in Thumb code. Tries a series of ADDs or
/// SUBs first, and uses a constant pool value if the instruction sequence would
/// be too long. This is allowed to modify the condition flags.</doc>
