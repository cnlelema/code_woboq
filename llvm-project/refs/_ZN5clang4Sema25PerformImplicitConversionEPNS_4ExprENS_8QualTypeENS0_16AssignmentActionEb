<dec f='llvm/clang/include/clang/Sema/Sema.h' l='9982' type='ExprResult clang::Sema::PerformImplicitConversion(clang::Expr * From, clang::QualType ToType, clang::Sema::AssignmentAction Action, bool AllowExplicit = false)'/>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='8329' u='c' c='_ZN5clang4Sema15CheckDestructorEPNS_17CXXDestructorDeclE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='8507' u='c' c='_ZN5clang4Sema32CheckSingleAssignmentConstraintsENS_8QualTypeERNS_12ActionResultIPNS_4ExprELb1EEEbbb'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='1909' u='c' c='_ZN5clang4Sema11BuildCXXNewENS_11SourceRangeEbNS_14SourceLocationEN4llvm15MutableArrayRefIPNS_4ExprEEES2_S1_NS_8QualTypeEPNS_14TypeSourceInfoENS3_8OptionalIS6_EES1_S6_'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='3417' u='c' c='_ZN5clang4Sema14ActOnCXXDeleteENS_14SourceLocationEbbPNS_4ExprE'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5296' u='c' c='_ZN12_GLOBAL__N_1L15tryBuildCaptureERN5clang4SemaEPNS0_4ExprERN4llvm9MapVectorIPKS3_PNS0_11DeclRefExprENS5_8DenseMapIS8_jNS5_12DenseMapInfoIS8_EENS5_612084324'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5376' u='c' c='_ZNK12_GLOBAL__N_127OpenMPIterationSpaceChecker18buildNumIterationsEPN5clang5ScopeEbRN4llvm9MapVectorIPKNS1_4ExprEPNS1_11DeclRefExprENS4_8DenseMapIS8_1661028'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5394' u='c' c='_ZNK12_GLOBAL__N_127OpenMPIterationSpaceChecker18buildNumIterationsEPN5clang5ScopeEbRN4llvm9MapVectorIPKNS1_4ExprEPNS1_11DeclRefExprENS4_8DenseMapIS8_1661028'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5426' u='c' c='_ZNK12_GLOBAL__N_127OpenMPIterationSpaceChecker12buildPreCondEPN5clang5ScopeEPNS1_4ExprERN4llvm9MapVectorIPKS4_PNS1_11DeclRefExprENS6_8DenseMapIS9_jNS13266149'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5802' u='c' c='_ZL16buildCounterInitRN5clang4SemaEPNS_5ScopeENS_14SourceLocationENS_12ActionResultIPNS_4ExprELb1EEES8_RN4llvm9MapVectorIPKS6_PNS_11DeclRefExprENS9_8D12490394'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5874' u='c' c='_ZL18buildCounterUpdateRN5clang4SemaEPNS_5ScopeENS_14SourceLocationENS_12ActionResultIPNS_4ExprELb1EEES8_S8_S8_bPN4llvm9MapVectorIPKS6_PNS_11DeclRefEx2564106'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='5897' u='c' c='_ZL19widenIterationCountjPN5clang4ExprERNS_4SemaE'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='6082' u='c' c='_ZL15checkOpenMPLoopN5clang19OpenMPDirectiveKindEPNS_4ExprES2_PNS_4StmtERNS_4SemaERN12_GLOBAL__N_110DSAStackTyERN4llvm13SmallDenseMapIPKNS_9ValueDeclE12687516'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='6090' u='c' c='_ZL15checkOpenMPLoopN5clang19OpenMPDirectiveKindEPNS_4ExprES2_PNS_4StmtERNS_4SemaERN12_GLOBAL__N_110DSAStackTyERN4llvm13SmallDenseMapIPKNS_9ValueDeclE12687516'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='6116' u='c' c='_ZL15checkOpenMPLoopN5clang19OpenMPDirectiveKindEPNS_4ExprES2_PNS_4StmtERNS_4SemaERN12_GLOBAL__N_110DSAStackTyERN4llvm13SmallDenseMapIPKNS_9ValueDeclE12687516'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='6124' u='c' c='_ZL15checkOpenMPLoopN5clang19OpenMPDirectiveKindEPNS_4ExprES2_PNS_4StmtERNS_4SemaERN12_GLOBAL__N_110DSAStackTyERN4llvm13SmallDenseMapIPKNS_9ValueDeclE12687516'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='7444' u='c' c='_ZN12_GLOBAL__N_125OpenMPAtomicUpdateChecker14checkStatementEPN5clang4StmtEjj'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='10026' u='c' c='_ZN5clang4Sema26ActOnOpenMPAllocatorClauseEPNS_4ExprENS_14SourceLocationES3_S3_'/>
<use f='llvm/clang/lib/Sema/SemaOpenMP.cpp' l='15210' u='c' c='_ZN5clang4Sema25ActOnOpenMPAllocateClauseEPNS_4ExprEN4llvm8ArrayRefIS2_EENS_14SourceLocationES6_S6_S6_'/>
<def f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1419' ll='1424' type='ExprResult clang::Sema::PerformImplicitConversion(clang::Expr * From, clang::QualType ToType, clang::Sema::AssignmentAction Action, bool AllowExplicit = false)'/>
<doc f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1414'>/// PerformImplicitConversion - Perform an implicit conversion of the
/// expression From to the type ToType. Returns the
/// converted expression. Flavor is the kind of conversion we&apos;re
/// performing, used in the error message. If @p AllowExplicit,
/// explicit user-defined conversions are permitted.</doc>
