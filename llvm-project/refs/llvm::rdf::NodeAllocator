<def f='llvm/llvm/lib/Target/Hexagon/RDFGraph.h' l='373' ll='410'/>
<size>152</size>
<doc f='llvm/llvm/lib/Target/Hexagon/RDFGraph.h' l='357'>// Fast memory allocation and translation between node id and node address.
  // This is really the same idea as the one underlying the &quot;bump pointer
  // allocator&quot;, the difference being in the translation. A node id is
  // composed of two components: the index of the block in which it was
  // allocated, and the index within the block. With the default settings,
  // where the number of nodes per block is 4096, the node id (minus 1) is:
  //
  // bit position:                11             0
  // +----------------------------+--------------+
  // | Index of the block         |Index in block|
  // +----------------------------+--------------+
  //
  // The actual node id is the above plus 1, to avoid creating a node id of 0.
  //
  // This method significantly improved the build time, compared to using maps
  // (std::unordered_map or DenseMap) to translate between pointers and ids.</doc>
<fun r='_ZN4llvm3rdf13NodeAllocatorC1Ej'/>
<fun r='_ZNK4llvm3rdf13NodeAllocator3ptrEj'/>
<fun r='_ZNK4llvm3rdf13NodeAllocator2idEPKNS0_8NodeBaseE'/>
<fun r='_ZN4llvm3rdf13NodeAllocator3NewEv'/>
<fun r='_ZN4llvm3rdf13NodeAllocator5clearEv'/>
<fun r='_ZN4llvm3rdf13NodeAllocator13startNewBlockEv'/>
<fun r='_ZN4llvm3rdf13NodeAllocator12needNewBlockEv'/>
<fun r='_ZNK4llvm3rdf13NodeAllocator6makeIdEjj'/>
<mbr r='llvm::rdf::NodeAllocator::NodesPerBlock' o='0' t='const uint32_t'/>
<mbr r='llvm::rdf::NodeAllocator::BitsPerIndex' o='32' t='const uint32_t'/>
<mbr r='llvm::rdf::NodeAllocator::IndexMask' o='64' t='const uint32_t'/>
<mbr r='llvm::rdf::NodeAllocator::ActiveEnd' o='128' t='char *'/>
<mbr r='llvm::rdf::NodeAllocator::Blocks' o='192' t='std::vector&lt;char *&gt;'/>
<mbr r='llvm::rdf::NodeAllocator::MemPool' o='384' t='AllocatorTy'/>
