<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='447' type='llvm::ConstantRange::OverflowResult llvm::ConstantRange::signedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='446'>/// Return whether signed sub of the two ranges always/never overflows.</doc>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4317' u='c' c='_ZN4llvm27computeOverflowForSignedSubEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1352' ll='1380' type='ConstantRange::OverflowResult llvm::ConstantRange::signedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1678' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1679' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1683' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1684' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1687' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1688' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1689' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1690' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1695' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1696' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1699' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1700' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1705' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1706' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1709' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1710' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1713' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1715' u='c' c='_ZN12_GLOBAL__N_140ConstantRangeTest_SignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1836' u='c' c='_ZN12_GLOBAL__N_150ConstantRangeTest_SignedSubOverflowExhaustive_Test8TestBodyEv'/>
