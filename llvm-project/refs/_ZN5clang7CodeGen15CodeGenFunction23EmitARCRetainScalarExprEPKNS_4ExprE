<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3888' type='llvm::Value * clang::CodeGen::CodeGenFunction::EmitARCRetainScalarExpr(const clang::Expr * expr)'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='818' u='c' c='_ZN5clang7CodeGen15CodeGenFunction14EmitScalarInitEPKNS_4ExprEPKNS_9ValueDeclENS0_6LValueEb'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='2487' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter13VisitCastExprEPN5clang8CastExprE'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='1675' u='c' c='_ZN5clang7CodeGen15CodeGenFunction25EmitObjCForCollectionStmtERKNS_21ObjCForCollectionStmtE'/>
<def f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='3244' ll='3257' type='llvm::Value * clang::CodeGen::CodeGenFunction::EmitARCRetainScalarExpr(const clang::Expr * e)'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='3249' u='c' c='_ZN5clang7CodeGen15CodeGenFunction23EmitARCRetainScalarExprEPKNS_4ExprE'/>
<doc f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='3240'>/// EmitARCRetainScalarExpr - Semantically equivalent to
/// EmitARCRetainObject(e-&gt;getType(), EmitScalarExpr(e)), but making a
/// best-effort attempt to peephole expressions that naturally produce
/// retained objects.</doc>
<use f='llvm/clang/lib/CodeGen/CGObjCRuntime.cpp' l='348' u='c' c='_ZN5clang7CodeGen13CGObjCRuntime22EmitAtSynchronizedStmtERNS0_15CodeGenFunctionERKNS_22ObjCAtSynchronizedStmtEN4llvm14FunctionCalleeES8_'/>
