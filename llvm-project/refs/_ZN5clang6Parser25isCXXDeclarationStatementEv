<use f='llvm/clang/include/clang/Parse/Parser.h' l='2191' u='c' c='_ZN5clang6Parser22isDeclarationStatementEv'/>
<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2255' type='bool clang::Parser::isCXXDeclarationStatement()'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='2252'>/// isCXXDeclarationStatement - C++-specialized function that disambiguates
  /// between a declaration or an expression statement, when parsing function
  /// bodies. Returns true for declaration, false for expression.</doc>
<def f='llvm/clang/lib/Parse/ParseTentative.cpp' l='49' ll='66' type='bool clang::Parser::isCXXDeclarationStatement()'/>
<doc f='llvm/clang/lib/Parse/ParseTentative.cpp' l='19'>/// isCXXDeclarationStatement - C++-specialized function that disambiguates
/// between a declaration or an expression statement, when parsing function
/// bodies. Returns true for declaration, false for expression.
///
///         declaration-statement:
///           block-declaration
///
///         block-declaration:
///           simple-declaration
///           asm-definition
///           namespace-alias-definition
///           using-declaration
///           using-directive
/// [C++0x]   static_assert-declaration
///
///         asm-definition:
///           &apos;asm&apos; &apos;(&apos; string-literal &apos;)&apos; &apos;;&apos;
///
///         namespace-alias-definition:
///           &apos;namespace&apos; identifier = qualified-namespace-specifier &apos;;&apos;
///
///         using-declaration:
///           &apos;using&apos; typename[opt] &apos;::&apos;[opt] nested-name-specifier
///                 unqualified-id &apos;;&apos;
///           &apos;using&apos; &apos;::&apos; unqualified-id ;
///
///         using-directive:
///           &apos;using&apos; &apos;namespace&apos; &apos;::&apos;[opt] nested-name-specifier[opt]
///                 namespace-name &apos;;&apos;
///</doc>
