<def f='llvm/clang/lib/Format/UnwrappedLineParser.h' l='36' ll='64'/>
<size>56</size>
<doc f='llvm/clang/lib/Format/UnwrappedLineParser.h' l='30'>/// An unwrapped line is a sequence of \c Token, that we would like to
/// put on a single line if there was no column limit.
///
/// This is used as a main interface between the \c UnwrappedLineParser and the
/// \c UnwrappedLineFormatter. The key property is that changing the formatting
/// within an unwrapped line does not affect any other unwrapped lines.</doc>
<fun r='_ZN5clang6format13UnwrappedLineC1Ev'/>
<mbr r='clang::format::UnwrappedLine::Tokens' o='0' t='std::list&lt;UnwrappedLineNode&gt;'/>
<mbr r='clang::format::UnwrappedLine::Level' o='192' t='unsigned int'/>
<mbr r='clang::format::UnwrappedLine::InPPDirective' o='224' t='bool'/>
<mbr r='clang::format::UnwrappedLine::MustBeDeclaration' o='232' t='bool'/>
<mbr r='clang::format::UnwrappedLine::MatchingOpeningBlockLineIndex' o='256' t='size_t'/>
<mbr r='clang::format::UnwrappedLine::MatchingClosingBlockLineIndex' o='320' t='size_t'/>
<smbr r='clang::format::UnwrappedLine::kInvalidIndex' t='const size_t'/>
<mbr r='clang::format::UnwrappedLine::FirstStartColumn' o='384' t='unsigned int'/>
<fun r='_ZN5clang6format13UnwrappedLineC1Ev'/>
