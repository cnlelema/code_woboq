<def f='llvm/clang/lib/Format/UnwrappedLineParser.h' l='75' ll='279'/>
<size>1344</size>
<fun r='_ZN5clang6format19UnwrappedLineParserC1ERKNS0_11FormatStyleERKNS0_18AdditionalKeywordsEjN4llvm8ArrayRefIPNS0_11FormatTokenEEERNS0_21UnwrappedLineConsumerE'/>
<fun r='_ZN5clang6format19UnwrappedLineParser5parseEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser5resetEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9parseFileEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser10parseLevelEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser10parseBlockEbbb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser15parseChildBlockEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser16parsePPDirectiveEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser13parsePPDefineEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9parsePPIfEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parsePPElIfEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parsePPElseEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser12parsePPEndIfEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser14parsePPUnknownEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser26readTokenWithJavaScriptASIEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser22parseStructuralElementEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser20tryToParseBracedListEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser15parseBracedListEbNS_3tok9TokenKindE'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parseParensEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parseSquareEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser15parseIfThenElseEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser13parseTryCatchEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser19parseForOrWhileLoopEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser12parseDoWhileEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser10parseLabelEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser14parseCaseLabelEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parseSwitchEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser14parseNamespaceEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser8parseNewEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser20parseAccessSpecifierEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9parseEnumEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser17parseJavaEnumBodyEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11parseRecordEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser15parseObjCMethodEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser21parseObjCProtocolListEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser19parseObjCUntilAtEndEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser34parseObjCInterfaceOrImplementationEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser17parseObjCProtocolEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser30parseJavaScriptEs6ImportExportEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser19parseStatementMacroEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser16tryToParseLambdaEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser26tryToParseLambdaIntroducerEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser20tryToParseJSFunctionEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser16addUnwrappedLineEv'/>
<fun r='_ZNK5clang6format19UnwrappedLineParser3eofEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9nextTokenEi'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9readTokenEi'/>
<fun r='_ZN5clang6format19UnwrappedLineParser18distributeCommentsERKN4llvm15SmallVectorImplIPNS0_11FormatTokenEEEPKS4_'/>
<fun r='_ZN5clang6format19UnwrappedLineParser13flushCommentsEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser9pushTokenEPNS0_11FormatTokenE'/>
<fun r='_ZN5clang6format19UnwrappedLineParser19calculateBraceTypesEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser31conditionalCompilationConditionEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser27conditionalCompilationStartEb'/>
<fun r='_ZN5clang6format19UnwrappedLineParser33conditionalCompilationAlternativeEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser25conditionalCompilationEndEv'/>
<fun r='_ZN5clang6format19UnwrappedLineParser11isOnNewLineERKNS0_11FormatTokenE'/>
<fun r='_ZNK5clang6format19UnwrappedLineParser13computePPHashEv'/>
<mbr r='clang::format::UnwrappedLineParser::Line' o='0' t='std::unique_ptr&lt;UnwrappedLine&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::CommentsBeforeNextToken' o='64' t='SmallVector&lt;clang::format::FormatToken *, 1&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::FormatTok' o='256' t='clang::format::FormatToken *'/>
<mbr r='clang::format::UnwrappedLineParser::MustBreakBeforeNextToken' o='320' t='bool'/>
<mbr r='clang::format::UnwrappedLineParser::Lines' o='384' t='SmallVector&lt;clang::format::UnwrappedLine, 8&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::PreprocessorDirectives' o='4096' t='SmallVector&lt;clang::format::UnwrappedLine, 4&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::CurrentLines' o='6016' t='SmallVectorImpl&lt;clang::format::UnwrappedLine&gt; *'/>
<mbr r='clang::format::UnwrappedLineParser::DeclarationScopeStack' o='6080' t='std::vector&lt;bool&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::Style' o='6400' t='const clang::format::FormatStyle &amp;'/>
<mbr r='clang::format::UnwrappedLineParser::Keywords' o='6464' t='const clang::format::AdditionalKeywords &amp;'/>
<mbr r='clang::format::UnwrappedLineParser::CommentPragmasRegex' o='6528' t='llvm::Regex'/>
<mbr r='clang::format::UnwrappedLineParser::Tokens' o='6656' t='clang::format::FormatTokenSource *'/>
<mbr r='clang::format::UnwrappedLineParser::Callback' o='6720' t='clang::format::UnwrappedLineConsumer &amp;'/>
<mbr r='clang::format::UnwrappedLineParser::AllTokens' o='6784' t='ArrayRef&lt;clang::format::FormatToken *&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::PPStack' o='6912' t='SmallVector&lt;clang::format::UnwrappedLineParser::PPBranch, 16&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::PPBranchLevel' o='9088' t='int'/>
<mbr r='clang::format::UnwrappedLineParser::PPLevelBranchIndex' o='9152' t='SmallVector&lt;int, 8&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::PPLevelBranchCount' o='9536' t='SmallVector&lt;int, 8&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::PPChainBranchIndex' o='9920' t='std::stack&lt;int&gt;'/>
<mbr r='clang::format::UnwrappedLineParser::IncludeGuard' o='10560' t='clang::format::UnwrappedLineParser::IncludeGuardState'/>
<mbr r='clang::format::UnwrappedLineParser::IncludeGuardToken' o='10624' t='clang::format::FormatToken *'/>
<mbr r='clang::format::UnwrappedLineParser::FirstStartColumn' o='10688' t='unsigned int'/>
