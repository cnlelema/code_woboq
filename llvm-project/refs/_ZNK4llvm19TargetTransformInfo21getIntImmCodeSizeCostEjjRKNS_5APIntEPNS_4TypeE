<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='694' type='int llvm::TargetTransformInfo::getIntImmCodeSizeCost(unsigned int Opc, unsigned int Idx, const llvm::APInt &amp; Imm, llvm::Type * Ty) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='687'>/// Return the expected cost for the given integer when optimising
  /// for size. This is different than the other integer immediate cost
  /// functions in that it is subtarget agnostic. This is useful when you e.g.
  /// target one ISA such as Aarch32 but smaller encodings could be possible
  /// with another such as Thumb. This return value is used as a penalty when
  /// the total costs for a constant is calculated (the bigger the cost, the
  /// more beneficial constant hoisting is).</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='327' ll='333' type='int llvm::TargetTransformInfo::getIntImmCodeSizeCost(unsigned int Opcode, unsigned int Idx, const llvm::APInt &amp; Imm, llvm::Type * Ty) const'/>
<use f='llvm/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp' l='589' u='c' c='_ZN4llvm20ConstantHoistingPass24maximizeConstantsInRangeEN9__gnu_cxx17__normal_iteratorIPNS_10consthoist17ConstantCandidateESt6vectorIS4_SaIS4_EEEES9_RS9_'/>
