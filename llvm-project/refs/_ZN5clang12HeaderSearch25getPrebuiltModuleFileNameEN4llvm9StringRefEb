<dec f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='511' type='std::string clang::HeaderSearch::getPrebuiltModuleFileName(llvm::StringRef ModuleName, bool FileMapOnly = false)'/>
<doc f='llvm/clang/include/clang/Lex/HeaderSearch.h' l='501'>/// Retrieve the name of the prebuilt module file that should be used
  /// to load a module with the given name.
  ///
  /// \param ModuleName The module whose module file name will be returned.
  ///
  /// \param FileMapOnly If true, then only look in the explicit module name
  //  to file name map and skip the directory search.
  ///
  /// \returns The name of the module file that corresponds to this module,
  /// or an empty string if this module does not correspond to any module file.</doc>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='1664' u='c' c='_ZN5clang16CompilerInstance10loadModuleENS_14SourceLocationEN4llvm8ArrayRefISt4pairIPNS_14IdentifierInfoES1_EEENS_6Module18NameVisibilityKindEb'/>
<def f='llvm/clang/lib/Lex/HeaderSearch.cpp' l='133' ll='153' type='std::string clang::HeaderSearch::getPrebuiltModuleFileName(llvm::StringRef ModuleName, bool FileMapOnly = false)'/>
<use f='llvm/clang/lib/Serialization/ASTReader.cpp' l='2560' u='c' c='_ZN5clang9ASTReader16ReadControlBlockERNS_13serialization10ModuleFileERN4llvm15SmallVectorImplINS0_14ImportedModuleEEEPKS2_j'/>
