<inh f='llvm/llvm/include/llvm/Support/BinaryStream.h' l='35' c='llvm::BinaryStream'/>
<def f='llvm/llvm/include/llvm/Support/BinaryStream.h' l='73' ll='97'/>
<ovr f='llvm/llvm/include/llvm/Support/BinaryByteStream.h' l='89' c='llvm::MutableBinaryByteStream'/>
<ovr f='llvm/llvm/include/llvm/Support/BinaryByteStream.h' l='135' c='llvm::AppendingBinaryByteStream'/>
<ovr f='llvm/llvm/include/llvm/Support/BinaryByteStream.h' l='205' c='llvm::FileBufferByteStream'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/Support/BinaryStream.h' l='68'>/// A BinaryStream which can be read from as well as written to.  Note
/// that writing to a BinaryStream always necessitates copying from the input
/// buffer to the stream&apos;s backing store.  Streams are assumed to be buffered
/// so that to be portable it is necessary to call commit() on the stream when
/// all data has been written.</doc>
<fun r='_ZN4llvm20WritableBinaryStreamD1Ev'/>
<fun r='_ZN4llvm20WritableBinaryStream10writeBytesEjNS_8ArrayRefIhEE'/>
<fun r='_ZN4llvm20WritableBinaryStream6commitEv'/>
<fun r='_ZNK4llvm20WritableBinaryStream8getFlagsEv'/>
<fun r='_ZN4llvm20WritableBinaryStream19checkOffsetForWriteEjj'/>
<ovr f='llvm/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h' l='107' c='llvm::msf::WritableMappedBlockStream'/>
<ovr f='llvm/llvm/lib/Support/BinaryStreamRef.cpp' l='38' c='(anonymousnamespace)::MutableArrayRefImpl'/>
<ovr f='llvm/llvm/unittests/DebugInfo/MSF/MappedBlockStreamTest.cpp' l='29' c='(anonymousnamespace)::DiscontiguousStream'/>
<ovr f='llvm/llvm/unittests/Support/BinaryStreamTest.cpp' l='25' c='(anonymousnamespace)::BrokenStream'/>
