<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='453' type='bool llvm::callsGCLeafFunction(const llvm::CallBase * Call, const llvm::TargetLibraryInfo &amp; TLI)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='445'>/// Return true if this call calls a gc leaf function.
///
/// A leaf function is a function that does not safepoint the thread during its
/// execution.  During a call or invoke to such a function, the callers stack
/// does not have to be made parseable.
///
/// Most passes can and should ignore this information, and it is only used
/// during lowering by the GC infrastructure.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp' l='184' u='c' c='_ZL15needsStatepointPN4llvm8CallBaseERKNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp' l='2525' u='c' c='_ZN4llvm23RewriteStatepointsForGC13runOnFunctionERNS_8FunctionERNS_13DominatorTreeERNS_19TargetTransformInfoERKNS_17TargetLibraryInfoE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2482' ll='2506' type='bool llvm::callsGCLeafFunction(const llvm::CallBase * Call, const llvm::TargetLibraryInfo &amp; TLI)'/>
