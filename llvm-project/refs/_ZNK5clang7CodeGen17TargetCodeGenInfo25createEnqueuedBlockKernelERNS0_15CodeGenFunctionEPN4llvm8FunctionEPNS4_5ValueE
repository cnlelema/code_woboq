<dec f='llvm/clang/lib/CodeGen/TargetInfo.h' l='359' type='llvm::Function * clang::CodeGen::TargetCodeGenInfo::createEnqueuedBlockKernel(clang::CodeGen::CodeGenFunction &amp; CGF, llvm::Function * BlockInvokeFunc, llvm::Value * BlockLiteral) const'/>
<doc f='llvm/clang/lib/CodeGen/TargetInfo.h' l='353'>/// Create an OpenCL kernel for an enqueued block. The kernel function is
  /// a wrapper for the block invoke function with target-specific calling
  /// convention and ABI as an OpenCL kernel. The wrapper function accepts
  /// block context and block arguments in target-specific way and calls
  /// the original block invoke function.</doc>
<use f='llvm/clang/lib/CodeGen/CGOpenCLRuntime.cpp' l='176' u='c' c='_ZN5clang7CodeGen15CGOpenCLRuntime23emitOpenCLEnqueuedBlockERNS0_15CodeGenFunctionEPKNS_4ExprE'/>
<def f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='9819' ll='9843' type='llvm::Function * clang::CodeGen::TargetCodeGenInfo::createEnqueuedBlockKernel(clang::CodeGen::CodeGenFunction &amp; CGF, llvm::Function * Invoke, llvm::Value * BlockLiteral) const'/>
<ovr f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='9853' c='_ZNK12_GLOBAL__N_123AMDGPUTargetCodeGenInfo25createEnqueuedBlockKernelERN5clang7CodeGen15CodeGenFunctionEPN4llvm8FunctionEPNS5_5ValueE'/>
<doc f='llvm/clang/lib/CodeGen/TargetInfo.cpp' l='9814'>/// Create an OpenCL kernel for an enqueued block.
///
/// The kernel has the same function type as the block invoke function. Its
/// name is the name of the block invoke function postfixed with &quot;_kernel&quot;.
/// It simply calls the block invoke function then returns.</doc>
