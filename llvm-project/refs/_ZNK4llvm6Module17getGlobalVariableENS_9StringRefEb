<use f='llvm/llvm/include/llvm/IR/Module.h' l='391' u='c' c='_ZNK4llvm6Module17getGlobalVariableENS_9StringRefE'/>
<dec f='llvm/llvm/include/llvm/IR/Module.h' l='394' type='llvm::GlobalVariable * llvm::Module::getGlobalVariable(llvm::StringRef Name, bool AllowInternal) const'/>
<use f='llvm/llvm/include/llvm/IR/Module.h' l='398' u='c' c='_ZN4llvm6Module17getGlobalVariableENS_9StringRefEb'/>
<use f='llvm/llvm/include/llvm/IR/Module.h' l='406' u='c' c='_ZNK4llvm6Module14getNamedGlobalENS_9StringRefE'/>
<def f='llvm/llvm/lib/IR/Module.cpp' l='189' ll='196' type='llvm::GlobalVariable * llvm::Module::getGlobalVariable(llvm::StringRef Name, bool AllowLocal) const'/>
<doc f='llvm/llvm/lib/IR/Module.cpp' l='178'>//===----------------------------------------------------------------------===//
// Methods for easy access to the global variables in the module.
//

/// getGlobalVariable - Look up the specified global variable in the module
/// symbol table.  If it does not exist, return null.  The type argument
/// should be the underlying type of the global, i.e., it should not have
/// the top-level PointerType, which represents the address of the global.
/// If AllowLocal is set to true, this function will return types that
/// have an local. By default, these types are not returned.
///</doc>
