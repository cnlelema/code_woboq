<dec f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='65' type='llvm::FunctionPass * llvm::createDeadCodeEliminationPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar.h' l='58'>//===----------------------------------------------------------------------===//
//
// DeadCodeElimination - This pass is more powerful than DeadInstElimination,
// because it is worklist driven that can potentially revisit instructions when
// their other instructions become dead, to eliminate chains of dead
// computations.
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='95' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp' l='308' u='c' c='_ZN12_GLOBAL__N_117HexagonPassConfig11addIRPassesEv'/>
<def f='llvm/llvm/lib/Transforms/Scalar/DCE.cpp' l='171' ll='173' type='llvm::FunctionPass * llvm::createDeadCodeEliminationPass()'/>
