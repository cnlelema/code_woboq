<dec f='llvm/clang/include/clang/AST/Type.h' l='1705' type='unsigned int'/>
<use f='llvm/clang/include/clang/AST/Type.h' l='5384' u='r' c='_ZNK5clang35DependentTemplateSpecializationType10getNumArgsEv'/>
<offset>32</offset>
<doc f='llvm/clang/include/clang/AST/Type.h' l='1698'>/// The number of template arguments named in this class template
    /// specialization, which is expected to be able to hold at least 1024
    /// according to [implimits]. However, as this limit is somewhat easy to
    /// hit with template metaprogramming we&apos;d prefer to keep it as large
    /// as possible. At the moment it has been left as a non-bitfield since
    /// this type safely fits in 64 bits as an unsigned, so there is no reason
    /// to introduce the performance impact of a bitfield.</doc>
<use f='llvm/clang/lib/AST/Type.cpp' l='2739' u='w' c='_ZN5clang35DependentTemplateSpecializationTypeC1ENS_21ElaboratedTypeKeywordEPNS_19NestedNameSpecifierEPKNS_14IdentifierInfoEN4llvm8ArrayRefINS_16Templ9192838'/>
