<dec f='llvm/llvm/include/llvm/Support/Threading.h' l='67' type='void llvm::llvm_execute_on_thread(void (*)(void *) UserFn, void * UserData, unsigned int RequestedStackSize = 0)'/>
<doc f='llvm/llvm/include/llvm/Support/Threading.h' l='55'>/// llvm_execute_on_thread - Execute the given \p UserFn on a separate
/// thread, passing it the provided \p UserData and waits for thread
/// completion.
///
/// This function does not guarantee that the code will actually be executed
/// on a separate thread or honoring the requested stack size, but tries to do
/// so where system support is available.
///
/// \param UserFn - The callback to execute.
/// \param UserData - An argument to pass to the callback function.
/// \param RequestedStackSize - If non-zero, a requested size (in bytes) for
/// the thread stack.</doc>
<use f='llvm/clang/tools/libclang/CIndex.cpp' l='6578' u='c' c='clang_executeOnThread'/>
<use f='llvm/llvm/lib/Support/CrashRecoveryContext.cpp' l='407' u='c' c='_ZN4llvm20CrashRecoveryContext17RunSafelyOnThreadENS_12function_refIFvvEEEj'/>
<def f='llvm/llvm/lib/Support/Unix/Threading.inc' l='56' ll='81' type='void llvm::llvm_execute_on_thread(void (*)(void *) Fn, void * UserData, unsigned int RequestedStackSize = 0)'/>
