<use f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='206' u='c' c='_ZN4llvm4PBQP5Graph18addConstructedEdgeENS1_9EdgeEntryE'/>
<def f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='573' ll='581' type='EdgeId llvm::PBQP::Graph::findEdge(NodeId N1Id, NodeId N2Id)'/>
<use f='llvm/llvm/lib/CodeGen/RegAllocPBQP.cpp' l='483' u='c' c='_ZN12_GLOBAL__N_110Coalescing5applyERN4llvm4PBQP8RegAlloc11PBQPRAGraphE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='568'>/// Get the edge connecting two nodes.
    /// @param N1Id First node id.
    /// @param N2Id Second node id.
    /// @return An id for edge (N1Id, N2Id) if such an edge exists,
    ///         otherwise returns an invalid edge id.</doc>
<use f='llvm/llvm/lib/Target/AArch64/AArch64PBQPRegAlloc.cpp' l='181' u='c' c='_ZN4llvm21A57ChainingConstraint23addIntraChainConstraintERNS_4PBQP8RegAlloc11PBQPRAGraphEjj'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64PBQPRegAlloc.cpp' l='277' u='c' c='_ZN4llvm21A57ChainingConstraint23addInterChainConstraintERNS_4PBQP8RegAlloc11PBQPRAGraphEjj'/>
