<dec f='llvm/clang/include/clang/Lex/TokenLexer.h' l='184' type='bool clang::TokenLexer::pasteTokens(clang::Token &amp; LHSTok, ArrayRef&lt;clang::Token&gt; TokenStream, unsigned int &amp; CurIdx)'/>
<doc f='llvm/clang/include/clang/Lex/TokenLexer.h' l='163'>/// Concatenates the next (sub-)sequence of \p Tokens separated by &apos;##&apos;
  /// starting with LHSTok - stopping when we encounter a token that is neither
  /// &apos;##&apos; nor preceded by &apos;##&apos;.  Places the result back into \p LHSTok and sets
  /// \p CurIdx to point to the token following the last one that was pasted.
  ///
  /// Also performs the MSVC extension wide-literal token pasting involved with:
  ///       \code L #macro-arg. \endcode
  ///
  /// \param[in,out] LHSTok - Contains the token to the left of &apos;##&apos; in \p
  /// Tokens upon entry and will contain the resulting concatenated Token upon
  /// exit.
  ///
  /// \param[in] TokenStream - The stream of Tokens we are lexing from.
  ///
  /// \param[in,out] CurIdx - Upon entry, \pTokens[\pCurIdx] must equal &apos;##&apos;
  /// (with the exception of the MSVC extension mentioned above).  Upon exit, it
  /// is set to the index of the token following the last token that was
  /// concatenated together.
  ///
  /// \returns If this returns true, the caller should immediately return the
  /// token.</doc>
<use f='llvm/clang/lib/Lex/TokenLexer.cpp' l='206' u='c' c='_ZN5clang10TokenLexer22stringifyVAOPTContentsERN4llvm15SmallVectorImplINS_5TokenEEERKNS_21VAOptExpansionContextENS_14SourceLocationE'/>
<use f='llvm/clang/lib/Lex/TokenLexer.cpp' l='734' u='c' c='_ZN5clang10TokenLexer11pasteTokensERNS_5TokenE'/>
<def f='llvm/clang/lib/Lex/TokenLexer.cpp' l='741' ll='931' type='bool clang::TokenLexer::pasteTokens(clang::Token &amp; LHSTok, ArrayRef&lt;clang::Token&gt; TokenStream, unsigned int &amp; CurIdx)'/>
<doc f='llvm/clang/lib/Lex/TokenLexer.cpp' l='737'>/// LHSTok is the LHS of a ## operator, and CurTokenIdx is the ##
/// operator.  Read the ## and RHS, and paste the LHS/RHS together.  If there
/// are more ## after it, chomp them iteratively.  Return the result as LHSTok.
/// If this returns true, the caller should immediately return the token.</doc>
