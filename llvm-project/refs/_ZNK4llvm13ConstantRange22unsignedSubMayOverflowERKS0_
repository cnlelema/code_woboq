<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='444' type='llvm::ConstantRange::OverflowResult llvm::ConstantRange::unsignedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='443'>/// Return whether unsigned sub of the two ranges always/never overflows.</doc>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='4298' u='c' c='_ZN4llvm29computeOverflowForUnsignedSubEPKNS_5ValueES2_RKNS_10DataLayoutEPNS_15AssumptionCacheEPKNS_11InstructionEPKNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='1336' ll='1350' type='ConstantRange::OverflowResult llvm::ConstantRange::unsignedSubMayOverflow(const llvm::ConstantRange &amp; Other) const'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1591' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1592' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1597' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1598' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1599' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1600' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1603' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1604' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1605' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1606' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1610' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1611' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1615' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1616' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1620' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1621' u='c' c='_ZN12_GLOBAL__N_142ConstantRangeTest_UnsignedSubOverflow_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='1797' u='c' c='_ZN12_GLOBAL__N_152ConstantRangeTest_UnsignedSubOverflowExhaustive_Test8TestBodyEv'/>
