<dec f='llvm/llvm/include/llvm-c/ExecutionEngine.h' l='176' type='LLVMMCJITMemoryManagerRef LLVMCreateSimpleMCJITMemoryManager(void * Opaque, LLVMMemoryManagerAllocateCodeSectionCallback AllocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback AllocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback FinalizeMemory, LLVMMemoryManagerDestroyCallback Destroy)'/>
<doc f='llvm/llvm/include/llvm-c/ExecutionEngine.h' l='165'>/**
 * Create a simple custom MCJIT memory manager. This memory manager can
 * intercept allocations in a module-oblivious way. This will return NULL
 * if any of the passed functions are NULL.
 *
 * @param Opaque An opaque client object to pass back to the callbacks.
 * @param AllocateCodeSection Allocate a block of memory for executable code.
 * @param AllocateDataSection Allocate a block of memory for data.
 * @param FinalizeMemory Set page permissions and flush cache. Return 0 on
 *   success, 1 on error.
 */</doc>
<def f='llvm/llvm/lib/ExecutionEngine/ExecutionEngineBindings.cpp' l='391' ll='408' type='LLVMMCJITMemoryManagerRef LLVMCreateSimpleMCJITMemoryManager(void * Opaque, LLVMMemoryManagerAllocateCodeSectionCallback AllocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback AllocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback FinalizeMemory, LLVMMemoryManagerDestroyCallback Destroy)'/>
<use f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITCAPITest.cpp' l='272' u='c' c='_ZN12_GLOBAL__N_113MCJITCAPITest32useRoundTripSectionMemoryManagerEv'/>
