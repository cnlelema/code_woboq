<def f='llvm/llvm/include/llvm/ADT/BitVector.h' l='793' ll='795' type='void llvm::BitVector::clearBitsNotInMask(const uint32_t * Mask, unsigned int MaskWords = ~0U)'/>
<doc f='llvm/llvm/include/llvm/ADT/BitVector.h' l='791'>/// clearBitsNotInMask - Clear a bit in this vector for every &apos;0&apos; bit in Mask.
  /// Don&apos;t resize.  This computes &quot;*this &amp;= Mask&quot;.</doc>
<use f='llvm/llvm/include/llvm/ADT/SmallBitVector.h' l='662' u='c' c='_ZN4llvm14SmallBitVector18clearBitsNotInMaskEPKjj'/>
<use f='llvm/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp' l='154' u='c' c='_ZN12_GLOBAL__N_126DeadMachineInstructionElim20runOnMachineFunctionERN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/CodeGen/LiveIntervals.cpp' l='924' u='c' c='_ZN4llvm13LiveIntervals24checkRegMaskInterferenceERNS_12LiveIntervalERNS_9BitVectorE'/>
<use f='llvm/llvm/lib/CodeGen/RegisterScavenging.cpp' l='329' u='c' c='_ZN4llvm12RegScavenger15findSurvivorRegENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEERNS_9BitVectorEjRS3_'/>
