<dec f='llvm/llvm/include/llvm/Analysis/Loads.h' l='122' type='llvm::Value * llvm::FindAvailablePtrLoadStore(llvm::Value * Ptr, llvm::Type * AccessTy, bool AtLeastAtomic, llvm::BasicBlock * ScanBB, BasicBlock::iterator &amp; ScanFrom, unsigned int MaxInstsToScan, AliasAnalysis * AA, bool * IsLoad, unsigned int * NumScanedInst)'/>
<doc f='llvm/llvm/include/llvm/Analysis/Loads.h' l='99'>/// Scan backwards to see if we have the value of the given pointer available
/// locally within a small number of instructions.
///
/// You can use this function to scan across multiple blocks: after you call
/// this function, if ScanFrom points at the beginning of the block, it&apos;s safe
/// to continue scanning the predecessors.
///
/// \param Ptr The pointer we want the load and store to originate from.
/// \param AccessTy The access type of the pointer.
/// \param AtLeastAtomic Are we looking for at-least an atomic load/store ? In
/// case it is false, we can return an atomic or non-atomic load or store. In
/// case it is true, we need to return an atomic load or store.
/// \param ScanBB The basic block to scan.
/// \param [in,out] ScanFrom The location to start scanning from. When this
/// function returns, it points at the last instruction scanned.
/// \param MaxInstsToScan The maximum number of instructions to scan. If this
/// is zero, the whole block will be scanned.
/// \param AA Optional pointer to alias analysis, to make the scan more
/// precise.
/// \param [out] IsLoad Whether the returned value is a load from the same
/// location in memory, as opposed to the value operand of a store.
///
/// \returns The found value, or nullptr if no value is found.</doc>
<use f='llvm/llvm/lib/Analysis/Loads.cpp' l='338' u='c' c='_ZN4llvm24FindAvailableLoadedValueEPNS_8LoadInstEPNS_10BasicBlockERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb1ELb0EvEELb014632270'/>
<def f='llvm/llvm/lib/Analysis/Loads.cpp' l='343' ll='448' type='llvm::Value * llvm::FindAvailablePtrLoadStore(llvm::Value * Ptr, llvm::Type * AccessTy, bool AtLeastAtomic, llvm::BasicBlock * ScanBB, BasicBlock::iterator &amp; ScanFrom, unsigned int MaxInstsToScan, AliasAnalysis * AA, bool * IsLoadCSE, unsigned int * NumScanedInst)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1361' u='c' c='_ZN4llvm17JumpThreadingPass30SimplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1373' u='c' c='_ZN4llvm17JumpThreadingPass30SimplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
