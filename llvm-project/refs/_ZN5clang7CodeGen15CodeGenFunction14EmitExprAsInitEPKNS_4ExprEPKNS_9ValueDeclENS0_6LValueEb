<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2311' type='void clang::CodeGen::CodeGenFunction::EmitExprAsInit(const clang::Expr * init, const clang::ValueDecl * D, clang::CodeGen::LValue lvalue, bool capturedByInit)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2309'>/// EmitExprAsInit - Emits the code necessary to initialize a
  /// location in memory with the given initializer.</doc>
<def f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1884' ll='1925' type='void clang::CodeGen::CodeGenFunction::EmitExprAsInit(const clang::Expr * init, const clang::ValueDecl * D, clang::CodeGen::LValue lvalue, bool capturedByInit)'/>
<doc f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1872'>/// Emit an expression as an initializer for an object (variable, field, etc.)
/// at the given location.  The expression is not necessarily the normal
/// initializer for the object, and the address is not necessarily
/// its normal location.
///
/// \param init the initializing expression
/// \param D the object to act as if we&apos;re initializing
/// \param loc the address to initialize; its type is a pointer
///   to the LLVM mapping of the object&apos;s type
/// \param alignment the alignment of the address
/// \param capturedByInit true if \p D is a __block variable
///   whose address is potentially changed by the initializer</doc>
