<def f='llvm/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h' l='38' ll='74'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/ADT/DAGDeltaAlgorithm.h' l='17'>/// DAGDeltaAlgorithm - Implements a &quot;delta debugging&quot; algorithm for minimizing
/// directed acyclic graphs using a predicate function.
///
/// The result of the algorithm is a subset of the input change set which is
/// guaranteed to satisfy the predicate, assuming that the input set did. For
/// well formed predicates, the result set is guaranteed to be such that
/// removing any single element not required by the dependencies on the other
/// elements would falsify the predicate.
///
/// The DAG should be used to represent dependencies in the changes which are
/// likely to hold across the predicate function. That is, for a particular
/// changeset S and predicate P:
///
///   P(S) =&gt; P(S union pred(S))
///
/// The minization algorithm uses this dependency information to attempt to
/// eagerly prune large subsets of changes. As with \see DeltaAlgorithm, the DAG
/// is not required to satisfy this property, but the algorithm will run
/// substantially fewer tests with appropriate dependencies. \see DeltaAlgorithm
/// for more information on the properties which the predicate function itself
/// should satisfy.</doc>
<fun r='_ZN4llvm17DAGDeltaAlgorithm6anchorEv'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithmD1Ev'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithm3RunERKSt3setIjSt4lessIjESaIjEERKSt6vectorISt4pairIjjESaISA_EE'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithm18UpdatedSearchStateERKSt3setIjSt4lessIjESaIjEERKSt6vectorIS5_SaIS5_EES7_'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithm14ExecuteOneTestERKSt3setIjSt4lessIjESaIjEE'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithm6anchorEv'/>
<fun r='_ZN4llvm17DAGDeltaAlgorithm3RunERKSt3setIjSt4lessIjESaIjEERKSt6vectorISt4pairIjjESaISA_EE'/>
<ovr f='llvm/llvm/unittests/ADT/DAGDeltaAlgorithmTest.cpp' l='19' c='(anonymousnamespace)::FixedDAGDeltaAlgorithm'/>
