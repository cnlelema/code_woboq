<dec f='llvm/clang/lib/Format/NamespaceEndCommentsFixer.h' l='30' type='const clang::format::FormatToken * clang::format::getNamespaceToken(const clang::format::AnnotatedLine * Line, const SmallVectorImpl&lt;clang::format::AnnotatedLine *&gt; &amp; AnnotatedLines)'/>
<doc f='llvm/clang/lib/Format/NamespaceEndCommentsFixer.h' l='23'>// Finds the namespace token corresponding to a closing namespace `}`, if that
// is to be formatted.
// If \p Line contains the closing `}` of a namespace, is affected and is not in
// a preprocessor directive, the result will be the matching namespace token.
// Otherwise returns null.
// \p AnnotatedLines is the sequence of lines from which \p Line is a member of.</doc>
<def f='llvm/clang/lib/Format/NamespaceEndCommentsFixer.cpp' l='142' ll='159' type='const clang::format::FormatToken * clang::format::getNamespaceToken(const clang::format::AnnotatedLine * Line, const SmallVectorImpl&lt;clang::format::AnnotatedLine *&gt; &amp; AnnotatedLines)'/>
<use f='llvm/clang/lib/Format/NamespaceEndCommentsFixer.cpp' l='164' u='c' c='_ZN5clang6format21getNamespaceTokenTextEPKNS0_13AnnotatedLineERKN4llvm15SmallVectorImplIPS1_EE'/>
<use f='llvm/clang/lib/Format/NamespaceEndCommentsFixer.cpp' l='185' u='c' c='_ZN5clang6format25NamespaceEndCommentsFixer7analyzeERNS0_14TokenAnnotatorERN4llvm15SmallVectorImplIPNS0_13AnnotatedLineEEERNS0_16FormatTokenLexerE'/>
<use f='llvm/clang/lib/Format/UnwrappedLineFormatter.cpp' l='1165' u='c' c='_ZN5clang6format22UnwrappedLineFormatter16formatFirstTokenERKNS0_13AnnotatedLineEPS3_RKN4llvm15SmallVectorImplIPS2_EEjj'/>
