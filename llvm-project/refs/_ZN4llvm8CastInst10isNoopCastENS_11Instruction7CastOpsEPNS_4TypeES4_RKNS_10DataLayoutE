<dec f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='662' type='static bool llvm::CastInst::isNoopCast(Instruction::CastOps Opcode, llvm::Type * SrcTy, llvm::Type * DstTy, const llvm::DataLayout &amp; DL)'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='655'>/// A no-op cast is one that can be effected without changing any bits.
  /// It implies that the source and destination types are the same size. The
  /// DataLayout argument is to determine the pointer size when examining casts
  /// involving Integer and Pointer types. They are no-op casts if the integer
  /// is the same size as the pointer. However, pointer size varies with
  /// platform.
  /// Determine if the described cast is a no-op cast.</doc>
<use f='llvm/llvm/lib/Analysis/Lint.cpp' l='704' u='c' c='_ZNK12_GLOBAL__N_14Lint13findValueImplEPN4llvm5ValueEbRNS1_15SmallPtrSetImplIS3_EE'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='2478' ll='2516' type='static bool llvm::CastInst::isNoopCast(Instruction::CastOps Opcode, llvm::Type * SrcTy, llvm::Type * DestTy, const llvm::DataLayout &amp; DL)'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2519' u='c' c='_ZNK4llvm8CastInst10isNoopCastERKNS_10DataLayoutE'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='2470'>/// This function determines if the CastInst does not require any bits to be
/// changed in order to effect the cast. Essentially, it identifies cases where
/// no code gen is necessary for the cast, hence the name no-op cast.  For
/// example, the following are all no-op casts:
/// # bitcast i32* %x to i8*
/// # bitcast &lt;2 x i32&gt; %x to &lt;4 x i16&gt;
/// # ptrtoint i32* %x to i32     ; on 32-bit plaforms only
/// Determine if the described cast is a no-op.</doc>
