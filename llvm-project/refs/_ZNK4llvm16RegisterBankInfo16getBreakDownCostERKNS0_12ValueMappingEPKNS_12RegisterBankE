<def f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='628' ll='631' type='unsigned int llvm::RegisterBankInfo::getBreakDownCost(const llvm::RegisterBankInfo::ValueMapping &amp; ValMapping, const llvm::RegisterBank * CurBank = nullptr) const'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='260' u='c' c='_ZNK4llvm13RegBankSelect13getRepairCostERKNS_14MachineOperandERKNS_16RegisterBankInfo12ValueMappingE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='624'>/// Get the cost of using \p ValMapping to decompose a register. This is
  /// similar to ::copyCost, except for cases where multiple copy-like
  /// operations need to be inserted. If the register is used as a source
  /// operand and already has a bank assigned, \p CurBank is non-null.</doc>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp' l='80' c='_ZNK4llvm22AMDGPURegisterBankInfo16getBreakDownCostERKNS_16RegisterBankInfo12ValueMappingEPKNS_12RegisterBankE'/>
