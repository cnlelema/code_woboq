<dec f='llvm/llvm/include/llvm-c/Object.h' l='75' type='LLVMBinaryRef LLVMCreateBinary(LLVMMemoryBufferRef MemBuf, LLVMContextRef Context, char ** ErrorMessage)'/>
<doc f='llvm/llvm/include/llvm-c/Object.h' l='59'>/**
 * Create a binary file from the given memory buffer.
 *
 * The exact type of the binary file will be inferred automatically, and the
 * appropriate implementation selected.  The context may be NULL except if
 * the resulting file is an LLVM IR file.
 *
 * The memory buffer is not consumed by this function.  It is the responsibilty
 * of the caller to free it with \c LLVMDisposeMemoryBuffer.
 *
 * If NULL is returned, the \p ErrorMessage parameter is populated with the
 * error&apos;s description.  It is then the caller&apos;s responsibility to free this
 * message by calling \c LLVMDisposeMessage.
 *
 * @see llvm::object::createBinary
 */</doc>
<def f='llvm/llvm/lib/Object/Object.cpp' l='64' ll='76' type='LLVMBinaryRef LLVMCreateBinary(LLVMMemoryBufferRef MemBuf, LLVMContextRef Context, char ** ErrorMessage)'/>
<doc f='llvm/llvm/lib/Object/Object.cpp' l='62'>/*--.. Operations on binary files ..........................................--*/</doc>
<use f='llvm/llvm/tools/llvm-c-test/object.c' l='33' u='c' c='llvm_object_list_sections'/>
<use f='llvm/llvm/tools/llvm-c-test/object.c' l='71' u='c' c='llvm_object_list_symbols'/>
