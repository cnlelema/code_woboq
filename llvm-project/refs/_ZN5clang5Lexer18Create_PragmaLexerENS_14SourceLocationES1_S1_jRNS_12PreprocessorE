<dec f='llvm/clang/include/clang/Lex/Lexer.h' l='161' type='static clang::Lexer * clang::Lexer::Create_PragmaLexer(clang::SourceLocation SpellingLoc, clang::SourceLocation ExpansionLocStart, clang::SourceLocation ExpansionLocEnd, unsigned int TokLen, clang::Preprocessor &amp; PP)'/>
<doc f='llvm/clang/include/clang/Lex/Lexer.h' l='158'>/// Create_PragmaLexer: Lexer constructor - Create a new lexer object for
  /// _Pragma expansion.  This has a variety of magic semantics that this method
  /// sets up.  It returns a new&apos;d Lexer that must be delete&apos;d when done.</doc>
<def f='llvm/clang/lib/Lex/Lexer.cpp' l='186' ll='219' type='static clang::Lexer * clang::Lexer::Create_PragmaLexer(clang::SourceLocation SpellingLoc, clang::SourceLocation ExpansionLocStart, clang::SourceLocation ExpansionLocEnd, unsigned int TokLen, clang::Preprocessor &amp; PP)'/>
<doc f='llvm/clang/lib/Lex/Lexer.cpp' l='171'>/// Create_PragmaLexer: Lexer constructor - Create a new lexer object for
/// _Pragma expansion.  This has a variety of magic semantics that this method
/// sets up.  It returns a new&apos;d Lexer that must be delete&apos;d when done.
///
/// On entrance to this routine, TokStartLoc is a macro location which has a
/// spelling loc that indicates the bytes to be lexed for the token and an
/// expansion location that indicates where all lexed tokens should be
/// &quot;expanded from&quot;.
///
/// TODO: It would really be nice to make _Pragma just be a wrapper around a
/// normal lexer that remaps tokens as they fly by.  This would require making
/// Preprocessor::Lex virtual.  Given that, we could just dump in a magic lexer
/// interface that could handle this stuff.  This would pull GetMappedTokenLoc
/// out of the critical path of the lexer!
///</doc>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='316' u='c' c='_ZN5clang12Preprocessor13Handle_PragmaERNS_5TokenE'/>
