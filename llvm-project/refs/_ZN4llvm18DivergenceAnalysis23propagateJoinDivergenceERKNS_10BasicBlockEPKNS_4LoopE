<dec f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='132' type='bool llvm::DivergenceAnalysis::propagateJoinDivergence(const llvm::BasicBlock &amp; JoinBlock, const llvm::Loop * TermLoop)'/>
<def f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='277' ll='297' type='bool llvm::DivergenceAnalysis::propagateJoinDivergence(const llvm::BasicBlock &amp; JoinBlock, const llvm::Loop * BranchLoop)'/>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='312' u='c' c='_ZN4llvm18DivergenceAnalysis25propagateBranchDivergenceERKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='350' u='c' c='_ZN4llvm18DivergenceAnalysis23propagateLoopDivergenceERKNS_4LoopE'/>
<doc f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='126'>/// \brief Propagate control-induced divergence to users (phi nodes and
  /// instructions).
  //
  // \param JoinBlock is a divergent loop exit or join point of two disjoint
  // paths.
  // \returns Whether \p JoinBlock is a divergent loop exit of \p TermLoop.</doc>
