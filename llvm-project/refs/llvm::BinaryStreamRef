<inh f='llvm/llvm/include/llvm/Support/BinaryStreamRef.h' l='24' c='llvm::BinaryStreamRefBase'/>
<def f='llvm/llvm/include/llvm/Support/BinaryStreamRef.h' l='156' ll='198'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Support/BinaryStreamRef.h' l='149'>/// BinaryStreamRef is to BinaryStream what ArrayRef is to an Array.  It
/// provides copy-semantics and read only access to a &quot;window&quot; of the underlying
/// BinaryStream. Note that BinaryStreamRef is *not* a BinaryStream.  That is to
/// say, it does not inherit and override the methods of BinaryStream.  In
/// general, you should not pass around pointers or references to BinaryStreams
/// and use inheritance to achieve polymorphism.  Instead, you should pass
/// around BinaryStreamRefs by value and achieve polymorphism that way.</doc>
<fun r='_ZN4llvm15BinaryStreamRefC1ESt10shared_ptrINS_12BinaryStreamEEjNS_8OptionalIjEE'/>
<fun r='_ZN4llvm15BinaryStreamRefC1Ev'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ERNS_12BinaryStreamE'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ERNS_12BinaryStreamEjNS_8OptionalIjEE'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ENS_8ArrayRefIhEENS_7support10endiannessE'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ENS_9StringRefENS_7support10endiannessE'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ERKS0_'/>
<fun r='_ZN4llvm15BinaryStreamRefaSERKS0_'/>
<fun r='_ZN4llvm15BinaryStreamRefC1EOS0_'/>
<fun r='_ZN4llvm15BinaryStreamRefaSEOS0_'/>
<fun r='_ZN4llvm15BinaryStreamRefC1ERS0_jj'/>
<fun r='_ZNK4llvm15BinaryStreamRef9readBytesEjjRNS_8ArrayRefIhEE'/>
<fun r='_ZNK4llvm15BinaryStreamRef26readLongestContiguousChunkEjRNS_8ArrayRefIhEE'/>
