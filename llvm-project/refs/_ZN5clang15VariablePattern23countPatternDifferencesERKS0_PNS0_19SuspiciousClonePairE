<dec f='llvm/clang/include/clang/Analysis/CloneDetection.h' l='434' type='unsigned int clang::VariablePattern::countPatternDifferences(const clang::VariablePattern &amp; Other, VariablePattern::SuspiciousClonePair * FirstMismatch = nullptr)'/>
<use f='llvm/clang/lib/Analysis/CloneDetection.cpp' l='471' u='c' c='_ZN5clang33MatchingVariablePatternConstraint9constrainERSt6vectorIN4llvm11SmallVectorINS_12StmtSequenceELj8EEESaIS5_EE'/>
<def f='llvm/clang/lib/Analysis/CloneDetection.cpp' l='562' ll='625' type='unsigned int clang::VariablePattern::countPatternDifferences(const clang::VariablePattern &amp; Other, VariablePattern::SuspiciousClonePair * FirstMismatch = nullptr)'/>
<doc f='llvm/clang/include/clang/Analysis/CloneDetection.h' l='411'>/// Counts the differences between this pattern and the given one.
  /// \param Other The given VariablePattern to compare with.
  /// \param FirstMismatch Output parameter that will be filled with information
  ///        about the first difference between the two patterns. This parameter
  ///        can be a nullptr, in which case it will be ignored.
  /// \return Returns the number of differences between the pattern this object
  ///         is following and the given VariablePattern.
  ///
  /// For example, the following statements all have the same pattern and this
  /// function would return zero:
  ///
  ///   if (a &lt; b) return a; return b;
  ///   if (x &lt; y) return x; return y;
  ///   if (u2 &lt; u1) return u2; return u1;
  ///
  /// But the following statement has a different pattern (note the changed
  /// variables in the return statements) and would have two differences when
  /// compared with one of the statements above.
  ///
  ///   if (a &lt; b) return b; return a;
  ///
  /// This function should only be called if the related statements of the given
  /// pattern and the statements of this objects are clones of each other.</doc>
