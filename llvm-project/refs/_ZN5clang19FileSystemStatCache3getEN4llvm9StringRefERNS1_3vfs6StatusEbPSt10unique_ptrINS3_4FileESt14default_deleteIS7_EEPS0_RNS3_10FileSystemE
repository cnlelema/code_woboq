<dec f='llvm/clang/include/clang/Basic/FileSystemStatCache.h' l='51' type='static std::error_code clang::FileSystemStatCache::get(llvm::StringRef Path, llvm::vfs::Status &amp; Status, bool isFile, std::unique_ptr&lt;llvm::vfs::File&gt; * F, clang::FileSystemStatCache * Cache, llvm::vfs::FileSystem &amp; FS)'/>
<use f='llvm/clang/lib/Basic/FileManager.cpp' l='432' u='c' c='_ZN5clang11FileManager12getStatValueEN4llvm9StringRefERNS1_3vfs6StatusEbPSt10unique_ptrINS3_4FileESt14default_deleteIS7_EE'/>
<use f='llvm/clang/lib/Basic/FileManager.cpp' l='438' u='c' c='_ZN5clang11FileManager12getStatValueEN4llvm9StringRefERNS1_3vfs6StatusEbPSt10unique_ptrINS3_4FileESt14default_deleteIS7_EE'/>
<doc f='llvm/clang/include/clang/Basic/FileSystemStatCache.h' l='40'>/// Get the &apos;stat&apos; information for the specified path, using the cache
  /// to accelerate it if possible.
  ///
  /// \returns \c true if the path does not exist or \c false if it exists.
  ///
  /// If isFile is true, then this lookup should only return success for files
  /// (not directories).  If it is false this lookup should only return
  /// success for directories (not files).  On a successful file lookup, the
  /// implementation can optionally fill in \p F with a valid \p File object and
  /// the client guarantees that it will close it.</doc>
<def f='llvm/clang/lib/Basic/FileSystemStatCache.cpp' l='33' ll='99' type='static std::error_code clang::FileSystemStatCache::get(llvm::StringRef Path, llvm::vfs::Status &amp; Status, bool isFile, std::unique_ptr&lt;llvm::vfs::File&gt; * F, clang::FileSystemStatCache * Cache, llvm::vfs::FileSystem &amp; FS)'/>
<use f='llvm/clang/lib/Basic/FileSystemStatCache.cpp' l='106' u='c' c='_ZN5clang17MemorizeStatCalls7getStatEN4llvm9StringRefERNS1_3vfs6StatusEbPSt10unique_ptrINS3_4FileESt14default_deleteIS7_EERNS3_10FileSystemE'/>
<doc f='llvm/clang/lib/Basic/FileSystemStatCache.cpp' l='24'>/// FileSystemStatCache::get - Get the &apos;stat&apos; information for the specified
/// path, using the cache to accelerate it if possible.  This returns true if
/// the path does not exist or false if it exists.
///
/// If isFile is true, then this lookup should only return success for files
/// (not directories).  If it is false this lookup should only return
/// success for directories (not files).  On a successful file lookup, the
/// implementation can optionally fill in FileDescriptor with a valid
/// descriptor and the client guarantees that it will close it.</doc>
