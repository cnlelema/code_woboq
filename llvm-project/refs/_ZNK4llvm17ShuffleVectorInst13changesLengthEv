<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='2037' ll='2041' type='bool llvm::ShuffleVectorInst::changesLength() const'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2069' u='c' c='_ZNK4llvm17ShuffleVectorInst14isSingleSourceEv'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2090' u='c' c='_ZNK4llvm17ShuffleVectorInst10isIdentityEv'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2131' u='c' c='_ZNK4llvm17ShuffleVectorInst8isSelectEv'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2151' u='c' c='_ZNK4llvm17ShuffleVectorInst9isReverseEv'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2173' u='c' c='_ZNK4llvm17ShuffleVectorInst14isZeroEltSplatEv'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='2222' u='c' c='_ZNK4llvm17ShuffleVectorInst11isTransposeEv'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='2033'>/// Return true if this shuffle returns a vector with a different number of
  /// elements than its source vectors.
  /// Examples: shufflevector &lt;4 x n&gt; A, &lt;4 x n&gt; B, &lt;1,2,3&gt;
  ///           shufflevector &lt;4 x n&gt; A, &lt;4 x n&gt; B, &lt;1,2,3,4,5&gt;</doc>
<use f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='1167' u='c' c='_ZNK4llvm19TargetTransformInfo24getInstructionThroughputEPKNS_11InstructionE'/>
