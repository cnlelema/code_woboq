<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='350' type='bool llvm::SplitIndirectBrCriticalEdges(llvm::Function &amp; F, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::BlockFrequencyInfo * BFI = nullptr)'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='467' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare13runOnFunctionERN4llvm8FunctionE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='331'>// Split critical edges where the source of the edge is an indirectbr
// instruction. This isn&apos;t always possible, but we can handle some easy cases.
// This is useful because MI is unable to split such critical edges,
// which means it will not be able to sink instructions along those edges.
// This is especially painful for indirect branches with many successors, where
// we end up having to prepare all outgoing values in the origin block.
//
// Our normal algorithm for splitting critical edges requires us to update
// the outgoing edges of the edge origin block, but for an indirectbr this
// is hard, since it would require finding and updating the block addresses
// the indirect branch uses. But if a block only has a single indirectbr
// predecessor, with the others being regular branches, we can do it in a
// different way.
// Say we have A -&gt; D, B -&gt; D, I -&gt; D where only I -&gt; D is an indirectbr.
// We can split D into D0 and D1, where D0 contains only the PHIs from D,
// and D1 is the D block body. We can then duplicate D0 as D0A and D0B, and
// create the following structure:
// A -&gt; D0A, B -&gt; D0A, I -&gt; D0B, D0A -&gt; D1, D0B -&gt; D1
// If BPI and BFI aren&apos;t non-null, BPI/BFI will be updated accordingly.</doc>
<use f='llvm/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp' l='847' u='c' c='_ZL17instrumentOneFuncRN4llvm8FunctionEPNS_6ModuleEPNS_21BranchProbabilityInfoEPNS_18BlockFrequencyInfoERSt18unordered_multimapIPNS_6ComdatEPNS_11Glob5553003'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp' l='1640' u='c' c='_ZL20annotateAllFunctionsRN4llvm6ModuleENS_9StringRefES2_NS_12function_refIFPNS_21BranchProbabilityInfoERNS_8FunctionEEEENS3_IFPNS_18BlockFrequencyInfoES7_EEEb'/>
<def f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='356' ll='473' type='bool llvm::SplitIndirectBrCriticalEdges(llvm::Function &amp; F, llvm::BranchProbabilityInfo * BPI = nullptr, llvm::BlockFrequencyInfo * BFI = nullptr)'/>
