<dec f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='956' type='bool llvm::TreePattern::InferAllTypes(const StringMap&lt;SmallVector&lt;llvm::TreePatternNode *, 1&gt; &gt; * NamedTypes = nullptr)'/>
<def f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2864' ll='2934' type='bool llvm::TreePattern::InferAllTypes(const StringMap&lt;SmallVector&lt;llvm::TreePatternNode *, 1&gt; &gt; * InNamedTypes = nullptr)'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='3134' u='c' c='_ZN4llvm18CodeGenDAGPatterns21ParsePatternFragmentsEb'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='3257' u='c' c='_ZN4llvm18CodeGenDAGPatterns27FindPatternInputsAndOutputsERNS_11TreePatternESt10shared_ptrINS_15TreePatternNodeEERSt3mapINSt7__cxx1112basic_stringIcSt12880361'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='3315' u='c' c='_ZN4llvm18CodeGenDAGPatterns27FindPatternInputsAndOutputsERNS_11TreePatternESt10shared_ptrINS_15TreePatternNodeEERSt3mapINSt7__cxx1112basic_stringIcSt12880361'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='4068' u='c' c='_ZN4llvm18CodeGenDAGPatterns15ParseOnePatternEPNS_6RecordERNS_11TreePatternES4_RKSt6vectorIS2_SaIS2_EE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='4073' u='c' c='_ZN4llvm18CodeGenDAGPatterns15ParseOnePatternEPNS_6RecordERNS_11TreePatternES4_RKSt6vectorIS2_SaIS2_EE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='4119' u='c' c='_ZN4llvm18CodeGenDAGPatterns15ParseOnePatternEPNS_6RecordERNS_11TreePatternES4_RKSt6vectorIS2_SaIS2_EE'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2861'>/// InferAllTypes - Infer/propagate as many types throughout the expression
/// patterns as possible.  Return true if all types are inferred, false
/// otherwise.  Flags an error if a type contradiction is found.</doc>
<doc f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='953'>/// InferAllTypes - Infer/propagate as many types throughout the expression
  /// patterns as possible.  Return true if all types are inferred, false
  /// otherwise.  Bail out if a type contradiction is found.</doc>
