<dec f='llvm/clang/include/clang/AST/VTableBuilder.h' l='541' type='void clang::MicrosoftVTableContext::computeVTablePaths(bool ForVBTables, const clang::CXXRecordDecl * RD, VPtrInfoVector &amp; Paths)'/>
<def f='llvm/clang/lib/AST/VTableBuilder.cpp' l='3248' ll='3323' type='void clang::MicrosoftVTableContext::computeVTablePaths(bool ForVBTables, const clang::CXXRecordDecl * RD, VPtrInfoVector &amp; Paths)'/>
<use f='llvm/clang/lib/AST/VTableBuilder.cpp' l='3566' u='c' c='_ZN5clang22MicrosoftVTableContext31computeVTableRelatedInformationEPKNS_13CXXRecordDeclE'/>
<use f='llvm/clang/lib/AST/VTableBuilder.cpp' l='3675' u='c' c='_ZN5clang22MicrosoftVTableContext32computeVBTableRelatedInformationEPKNS_13CXXRecordDeclE'/>
<doc f='llvm/clang/lib/AST/VTableBuilder.cpp' l='3227'>/// Produces MSVC-compatible vbtable data.  The symbols produced by this
/// algorithm match those produced by MSVC 2012 and newer, which is different
/// from MSVC 2010.
///
/// MSVC 2012 appears to minimize the vbtable names using the following
/// algorithm.  First, walk the class hierarchy in the usual order, depth first,
/// left to right, to find all of the subobjects which contain a vbptr field.
/// Visiting each class node yields a list of inheritance paths to vbptrs.  Each
/// record with a vbptr creates an initially empty path.
///
/// To combine paths from child nodes, the paths are compared to check for
/// ambiguity.  Paths are &quot;ambiguous&quot; if multiple paths have the same set of
/// components in the same order.  Each group of ambiguous paths is extended by
/// appending the class of the base from which it came.  If the current class
/// node produced an ambiguous path, its path is extended with the current class.
/// After extending paths, MSVC again checks for ambiguity, and extends any
/// ambiguous path which wasn&apos;t already extended.  Because each node yields an
/// unambiguous set of paths, MSVC doesn&apos;t need to extend any path more than once
/// to produce an unambiguous set of paths.
///
/// TODO: Presumably vftables use the same algorithm.</doc>
