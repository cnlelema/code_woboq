<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='525' type='llvm::Value * llvm::InnerLoopVectorizer::getStepVector(llvm::Value * Val, int StartIdx, llvm::Value * Step, Instruction::BinaryOps Opcode = Instruction::BinaryOpsEnd)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1561' u='c' c='_ZN4llvm19InnerLoopVectorizer31createVectorIntOrFpInductionPHIERKNS_19InductionDescriptorEPNS_5ValueEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1742' u='c' c='_ZN4llvm19InnerLoopVectorizer21widenIntOrFpInductionEPNS_7PHINodeEPNS_9TruncInstE'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1760' ll='1814' type='llvm::Value * llvm::InnerLoopVectorizer::getStepVector(llvm::Value * Val, int StartIdx, llvm::Value * Step, Instruction::BinaryOps BinOp = Instruction::BinaryOpsEnd)'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6313' c='_ZN4llvm17InnerLoopUnroller13getStepVectorEPNS_5ValueEiS2_NS_11Instruction9BinaryOpsE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='522'>/// This function adds (StartIdx, StartIdx + Step, StartIdx + 2*Step, ...)
  /// to each vector element of Val. The sequence starts at StartIndex.
  /// \p Opcode is relevant for FP induction variable.</doc>
