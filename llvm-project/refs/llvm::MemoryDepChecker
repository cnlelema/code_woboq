<def f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='92' ll='330'/>
<size>344</size>
<doc f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='58'>/// Checks memory dependences among accesses to the same underlying
/// object to determine whether there vectorization is legal or not (and at
/// which vectorization factor).
///
/// Note: This class will compute a conservative dependence for access to
/// different underlying pointers. Clients, such as the loop vectorizer, will
/// sometimes deal these potential dependencies by emitting runtime checks.
///
/// We use the ScalarEvolution framework to symbolically evalutate access
/// functions pairs. Since we currently don&apos;t restructure the loop we can rely
/// on the program order of memory accesses to determine their safety.
/// At the moment we will only deem accesses as safe for:
///  * A negative constant distance assuming program order.
///
///      Safe: tmp = a[i + 1];     OR     a[i + 1] = x;
///            a[i] = tmp;                y = a[i];
///
///   The latter case is safe because later checks guarantuee that there can&apos;t
///   be a cycle through a phi node (that is, we check that &quot;x&quot; and &quot;y&quot; is not
///   the same variable: a header phi can only be an induction or a reduction, a
///   reduction can&apos;t have a memory sink, an induction can&apos;t have a memory
///   source). This is important and must not be violated (or we have to
///   resort to checking for cycles through memory).
///
///  * A positive constant distance assuming program order that is bigger
///    than the biggest memory access.
///
///     tmp = a[i]        OR              b[i] = x
///     a[i+2] = tmp                      y = b[i+2];
///
///     Safe distance: 2 x sizeof(a[0]), and 2 x sizeof(b[0]), respectively.
///
///  * Zero distances and all accesses have the same size.
///</doc>
<fun r='_ZN4llvm16MemoryDepCheckerC1ERNS_25PredicatedScalarEvolutionEPKNS_4LoopE'/>
<fun r='_ZN4llvm16MemoryDepChecker9addAccessEPNS_9StoreInstE'/>
<fun r='_ZN4llvm16MemoryDepChecker9addAccessEPNS_8LoadInstE'/>
<fun r='_ZN4llvm16MemoryDepChecker11areDepsSafeERNS_18EquivalenceClassesINS_14PointerIntPairIPNS_5ValueELj1EbNS_21PointerLikeTypeTraitsIS4_EENS_18PointerIntPa10177573'/>
<fun r='_ZNK4llvm16MemoryDepChecker22isSafeForVectorizationEv'/>
<fun r='_ZN4llvm16MemoryDepChecker22getMaxSafeDepDistBytesEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker23getMaxSafeRegisterWidthEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker27shouldRetryWithRuntimeCheckEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker14getDependencesEv'/>
<fun r='_ZN4llvm16MemoryDepChecker16clearDependencesEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker21getMemoryInstructionsEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker27generateInstructionOrderMapEv'/>
<fun r='_ZNK4llvm16MemoryDepChecker24getInstructionsForAccessEPNS_5ValueEb'/>
<mbr r='llvm::MemoryDepChecker::PSE' o='0' t='llvm::PredicatedScalarEvolution &amp;'/>
<mbr r='llvm::MemoryDepChecker::InnermostLoop' o='64' t='const llvm::Loop *'/>
<mbr r='llvm::MemoryDepChecker::Accesses' o='128' t='DenseMap&lt;MemAccessInfo, std::vector&lt;unsigned int&gt; &gt;'/>
<mbr r='llvm::MemoryDepChecker::InstMap' o='384' t='SmallVector&lt;llvm::Instruction *, 16&gt;'/>
<mbr r='llvm::MemoryDepChecker::AccessIdx' o='1536' t='unsigned int'/>
<mbr r='llvm::MemoryDepChecker::MaxSafeDepDistBytes' o='1600' t='uint64_t'/>
<mbr r='llvm::MemoryDepChecker::MaxSafeRegisterWidth' o='1664' t='uint64_t'/>
<mbr r='llvm::MemoryDepChecker::FoundNonConstantDistanceDependence' o='1728' t='bool'/>
<mbr r='llvm::MemoryDepChecker::Status' o='1760' t='llvm::MemoryDepChecker::VectorizationSafetyStatus'/>
<mbr r='llvm::MemoryDepChecker::RecordDependences' o='1792' t='bool'/>
<mbr r='llvm::MemoryDepChecker::Dependences' o='1856' t='SmallVector&lt;llvm::MemoryDepChecker::Dependence, 8&gt;'/>
<fun r='_ZN4llvm16MemoryDepChecker11isDependentERKNS_14PointerIntPairIPNS_5ValueELj1EbNS_21PointerLikeTypeTraitsIS3_EENS_18PointerIntPairInfoIS3_Lj1ES5_EEEEjS12820736'/>
<fun r='_ZN4llvm16MemoryDepChecker28couldPreventStoreLoadForwardEmm'/>
<fun r='_ZN4llvm16MemoryDepChecker13mergeInStatusENS0_25VectorizationSafetyStatusE'/>
