<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='607' type='llvm::Value * llvm::InnerLoopVectorizer::emitTransformedIndex(IRBuilder&lt;&gt; &amp; B, llvm::Value * Index, llvm::ScalarEvolution * SE, const llvm::DataLayout &amp; DL, const llvm::InductionDescriptor &amp; ID) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1723' u='c' c='_ZN4llvm19InnerLoopVectorizer21widenIntOrFpInductionEPNS_7PHINodeEPNS_9TruncInstE'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2650' ll='2736' type='llvm::Value * llvm::InnerLoopVectorizer::emitTransformedIndex(IRBuilder&lt;&gt; &amp; B, llvm::Value * Index, llvm::ScalarEvolution * SE, const llvm::DataLayout &amp; DL, const llvm::InductionDescriptor &amp; ID) const'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2877' u='c' c='_ZN4llvm19InnerLoopVectorizer28createVectorizedLoopSkeletonEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='3005' u='c' c='_ZN4llvm19InnerLoopVectorizer12fixupIVUsersEPNS_7PHINodeERKNS_19InductionDescriptorEPNS_5ValueES7_PNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='3863' u='c' c='_ZN4llvm19InnerLoopVectorizer19widenPHIInstructionEPNS_11InstructionEjj'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='601'>/// Compute the transformed value of Index at offset StartValue using step
  /// StepValue.
  /// For integer induction, returns StartValue + Index * StepValue.
  /// For pointer induction, returns StartValue[Index * StepValue].
  /// FIXME: The newly created binary instructions should contain nsw/nuw
  /// flags, which can be found from the original scalar operations.</doc>
