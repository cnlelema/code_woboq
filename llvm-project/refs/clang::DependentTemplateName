<inh f='llvm/llvm/include/llvm/ADT/FoldingSet.h' l='135' c='llvm::FoldingSetBase::Node'/>
<def f='llvm/clang/include/clang/AST/TemplateName.h' l='442' ll='540'/>
<size>32</size>
<doc f='llvm/clang/include/clang/AST/TemplateName.h' l='434'>/// Represents a dependent template name that cannot be
/// resolved prior to template instantiation.
///
/// This kind of template name refers to a dependent template name,
/// including its nested name specifier (if any). For example,
/// DependentTemplateName can refer to &quot;MetaFun::template apply&quot;,
/// where &quot;MetaFun::&quot; is the nested name specifier and &quot;apply&quot; is the
/// template name referenced. The &quot;template&quot; keyword is implied.</doc>
<mbr r='clang::DependentTemplateName::Qualifier' o='64' t='llvm::PointerIntPair&lt;NestedNameSpecifier *, 1, bool&gt;'/>
<mbr r='clang::DependentTemplateName::CanonicalTemplateName' o='192' t='clang::TemplateName'/>
<fun r='_ZN5clang21DependentTemplateNameC1EPNS_19NestedNameSpecifierEPKNS_14IdentifierInfoE'/>
<fun r='_ZN5clang21DependentTemplateNameC1EPNS_19NestedNameSpecifierEPKNS_14IdentifierInfoENS_12TemplateNameE'/>
<fun r='_ZN5clang21DependentTemplateNameC1EPNS_19NestedNameSpecifierENS_22OverloadedOperatorKindE'/>
<fun r='_ZN5clang21DependentTemplateNameC1EPNS_19NestedNameSpecifierENS_22OverloadedOperatorKindENS_12TemplateNameE'/>
<fun r='_ZNK5clang21DependentTemplateName12getQualifierEv'/>
<fun r='_ZNK5clang21DependentTemplateName12isIdentifierEv'/>
<fun r='_ZNK5clang21DependentTemplateName13getIdentifierEv'/>
<fun r='_ZNK5clang21DependentTemplateName20isOverloadedOperatorEv'/>
<fun r='_ZNK5clang21DependentTemplateName11getOperatorEv'/>
<fun r='_ZN5clang21DependentTemplateName7ProfileERN4llvm16FoldingSetNodeIDE'/>
<fun r='_ZN5clang21DependentTemplateName7ProfileERN4llvm16FoldingSetNodeIDEPNS_19NestedNameSpecifierEPKNS_14IdentifierInfoE'/>
<fun r='_ZN5clang21DependentTemplateName7ProfileERN4llvm16FoldingSetNodeIDEPNS_19NestedNameSpecifierENS_22OverloadedOperatorKindE'/>
