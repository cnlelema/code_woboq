<dec f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='861' type='llvm::MemoryAccess * llvm::MemorySSA::renameBlock(llvm::BasicBlock * , llvm::MemoryAccess * , bool )'/>
<def f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1101' ll='1119' type='llvm::MemoryAccess * llvm::MemorySSA::renameBlock(llvm::BasicBlock * BB, llvm::MemoryAccess * IncomingVal, bool RenameAllUses)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1138' u='c' c='_ZN4llvm9MemorySSA10renamePassEPNS_15DomTreeNodeBaseINS_10BasicBlockEEEPNS_12MemoryAccessERNS_15SmallPtrSetImplIPS2_EEbb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1165' u='c' c='_ZN4llvm9MemorySSA10renamePassEPNS_15DomTreeNodeBaseINS_10BasicBlockEEEPNS_12MemoryAccessERNS_15SmallPtrSetImplIPS2_EEbb'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1098'>/// Rename a single basic block into MemorySSA form.
/// Uses the standard SSA renaming algorithm.
/// \returns The new incoming value.</doc>
