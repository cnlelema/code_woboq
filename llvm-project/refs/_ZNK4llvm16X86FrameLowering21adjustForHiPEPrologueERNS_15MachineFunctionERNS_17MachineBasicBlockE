<dec f='llvm/llvm/lib/Target/X86/X86FrameLowering.h' l='73' type='void llvm::X86FrameLowering::adjustForHiPEPrologue(llvm::MachineFunction &amp; MF, llvm::MachineBasicBlock &amp; PrologueMBB) const'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetFrameLowering.h' l='182' c='_ZNK4llvm19TargetFrameLowering21adjustForHiPEPrologueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='2544' ll='2677' type='void llvm::X86FrameLowering::adjustForHiPEPrologue(llvm::MachineFunction &amp; MF, llvm::MachineBasicBlock &amp; PrologueMBB) const'/>
<doc f='llvm/llvm/lib/Target/X86/X86FrameLowering.cpp' l='2529'>/// Erlang programs may need a special prologue to handle the stack size they
/// might need at runtime. That is because Erlang/OTP does not implement a C
/// stack but uses a custom implementation of hybrid stack/heap architecture.
/// (for more information see Eric Stenman&apos;s Ph.D. thesis:
/// http://publications.uu.se/uu/fulltext/nbn_se_uu_diva-2688.pdf)
///
/// CheckStack:
///       temp0 = sp - MaxStack
///       if( temp0 &lt; SP_LIMIT(P) ) goto IncStack else goto OldStart
/// OldStart:
///       ...
/// IncStack:
///       call inc_stack   # doubles the stack space
///       temp0 = sp - MaxStack
///       if( temp0 &lt; SP_LIMIT(P) ) goto IncStack else goto OldStart</doc>
