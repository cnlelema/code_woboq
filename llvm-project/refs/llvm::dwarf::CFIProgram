<def f='llvm/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h' l='34' ll='127'/>
<size>48</size>
<doc f='llvm/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h' l='28'>/// Represent a sequence of Call Frame Information instructions that, when read
/// in order, construct a table mapping PC to frame state. This can also be
/// referred to as &quot;CFI rules&quot; in DWARF literature to avoid confusion with
/// computer programs in the broader sense, and in this context each instruction
/// would be a rule to establish the mapping. Refer to pg. 172 in the DWARF5
/// manual, &quot;6.4.1 Structure of Call Frame Information&quot;.</doc>
<fun r='_ZN4llvm5dwarf10CFIProgram5beginEv'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram5beginEv'/>
<fun r='_ZN4llvm5dwarf10CFIProgram3endEv'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram3endEv'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram4sizeEv'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram5emptyEv'/>
<fun r='_ZN4llvm5dwarf10CFIProgramC1EmlNS_6Triple8ArchTypeE'/>
<fun r='_ZN4llvm5dwarf10CFIProgram5parseENS_13DataExtractorEPjj'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram4dumpERNS_11raw_ostreamEPKNS_14MCRegisterInfoEbj'/>
<mbr r='llvm::dwarf::CFIProgram::Instructions' o='0' t='std::vector&lt;Instruction&gt;'/>
<mbr r='llvm::dwarf::CFIProgram::CodeAlignmentFactor' o='192' t='const uint64_t'/>
<mbr r='llvm::dwarf::CFIProgram::DataAlignmentFactor' o='256' t='const int64_t'/>
<mbr r='llvm::dwarf::CFIProgram::Arch' o='320' t='Triple::ArchType'/>
<fun r='_ZN4llvm5dwarf10CFIProgram14addInstructionEh'/>
<fun r='_ZN4llvm5dwarf10CFIProgram14addInstructionEhm'/>
<fun r='_ZN4llvm5dwarf10CFIProgram14addInstructionEhmm'/>
<fun r='_ZN4llvm5dwarf10CFIProgram15getOperandTypesEv'/>
<fun r='_ZNK4llvm5dwarf10CFIProgram12printOperandERNS_11raw_ostreamEPKNS_14MCRegisterInfoEbRKNS1_11InstructionEjm'/>
