<def f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='1026' ll='1063'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='1010'>//===----------------------------------------------------------------------===//
//                           SuperRegClassIterator
//===----------------------------------------------------------------------===//
//
// Iterate over the possible super-registers for a given register class. The
// iterator will visit a list of pairs (Idx, Mask) corresponding to the
// possible classes of super-registers.
//
// Each bit mask will have at least one set bit, and each set bit in Mask
// corresponds to a SuperRC such that:
//
//   For all Reg in SuperRC: Reg:Idx is in RC.
//
// The iterator can include (O, RC-&gt;getSubClassMask()) as the first entry which
// also satisfies the above requirement, assuming Reg:0 == Reg.
//</doc>
<mbr r='llvm::SuperRegClassIterator::RCMaskWords' o='0' t='const unsigned int'/>
<mbr r='llvm::SuperRegClassIterator::SubReg' o='32' t='unsigned int'/>
<mbr r='llvm::SuperRegClassIterator::Idx' o='64' t='const uint16_t *'/>
<mbr r='llvm::SuperRegClassIterator::Mask' o='128' t='const uint32_t *'/>
<fun r='_ZN4llvm21SuperRegClassIteratorC1EPKNS_19TargetRegisterClassEPKNS_18TargetRegisterInfoEb'/>
<fun r='_ZNK4llvm21SuperRegClassIterator7isValidEv'/>
<fun r='_ZNK4llvm21SuperRegClassIterator9getSubRegEv'/>
<fun r='_ZNK4llvm21SuperRegClassIterator7getMaskEv'/>
<fun r='_ZN4llvm21SuperRegClassIteratorppEv'/>
