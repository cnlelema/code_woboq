<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3741' type='clang::CodeGen::RValue clang::CodeGen::CodeGenFunction::EmitNVPTXDevicePrintfCallExpr(const clang::CallExpr * E, clang::CodeGen::ReturnValueSlot ReturnValue)'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='4250' u='c' c='_ZN5clang7CodeGen15CodeGenFunction15EmitBuiltinExprENS_10GlobalDeclEjPKNS_8CallExprENS0_15ReturnValueSlotE'/>
<def f='llvm/clang/lib/CodeGen/CGGPUBuiltin.cpp' l='69' ll='122' type='clang::CodeGen::RValue clang::CodeGen::CodeGenFunction::EmitNVPTXDevicePrintfCallExpr(const clang::CallExpr * E, clang::CodeGen::ReturnValueSlot ReturnValue)'/>
<doc f='llvm/clang/lib/CodeGen/CGGPUBuiltin.cpp' l='44'>// Transforms a call to printf into a call to the NVPTX vprintf syscall (which
// isn&apos;t particularly special; it&apos;s invoked just like a regular function).
// vprintf takes two args: A format string, and a pointer to a buffer containing
// the varargs.
//
// For example, the call
//
//   printf(&quot;format string&quot;, arg1, arg2, arg3);
//
// is converted into something resembling
//
//   struct Tmp {
//     Arg1 a1;
//     Arg2 a2;
//     Arg3 a3;
//   };
//   char* buf = alloca(sizeof(Tmp));
//   *(Tmp*)buf = {a1, a2, a3};
//   vprintf(&quot;format string&quot;, buf);
//
// buf is aligned to the max of {alignof(Arg1), ...}.  Furthermore, each of the
// args is itself aligned to its preferred alignment.
//
// Note that by the time this function runs, E&apos;s args have already undergone the
// standard C vararg promotion (short -&gt; int, float -&gt; double, etc.).</doc>
