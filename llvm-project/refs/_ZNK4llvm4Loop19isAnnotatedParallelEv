<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='718' type='bool llvm::Loop::isAnnotatedParallel() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='706'>/// Returns true if the loop is annotated parallel.
  ///
  /// A parallel loop can be assumed to not contain any dependencies between
  /// iterations by the compiler. That is, any loop-carried dependency checking
  /// can be skipped completely when parallelizing the loop on the target
  /// machine. Thus, if the parallel loop information originates from the
  /// programmer, e.g. via the OpenMP parallel for pragma, it is the
  /// programmer&apos;s responsibility to ensure there are no loop-carried
  /// dependencies. The final execution order of the instructions across
  /// iterations is not guaranteed, thus, the end result might or might not
  /// implement actual concurrent execution of instructions across multiple
  /// iterations.</doc>
<use f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='1789' u='c' c='_ZN4llvm14LoopAccessInfo11analyzeLoopEPNS_9AAResultsEPNS_8LoopInfoEPKNS_17TargetLibraryInfoEPNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='494' ll='567' type='bool llvm::Loop::isAnnotatedParallel() const'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp' l='275' u='c' c='_ZN12_GLOBAL__N_118LoopVersioningLICM18legalLoopStructureEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='877' u='c' c='_ZN4llvm25LoopVectorizationLegality20blockCanBePredicatedEPNS_10BasicBlockERNS_15SmallPtrSetImplIPNS_5ValueEEE'/>
