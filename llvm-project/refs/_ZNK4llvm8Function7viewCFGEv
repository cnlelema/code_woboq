<dec f='llvm/llvm/include/llvm/IR/Function.h' l='767' type='void llvm::Function::viewCFG() const'/>
<doc f='llvm/llvm/include/llvm/IR/Function.h' l='761'>/// viewCFG - This function is meant for use from the debugger.  You can just
  /// say &apos;call F-&gt;viewCFG()&apos; and a ghostview window should pop up from the
  /// program, displaying the CFG of the current function with the code for each
  /// basic block inside.  This depends on there being a &apos;dot&apos; and &apos;gv&apos; program
  /// in your path.
  ///</doc>
<use f='llvm/llvm/lib/Analysis/Analysis.cpp' l='131' u='c' c='LLVMViewFunctionCFG'/>
<use f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='42' u='c' c='_ZN12_GLOBAL__N_119CFGViewerLegacyPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='59' u='c' c='_ZN4llvm13CFGViewerPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<def f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='176' ll='180' type='void llvm::Function::viewCFG() const'/>
<doc f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='171'>/// viewCFG - This function is meant for use from the debugger.  You can just
/// say &apos;call F-&gt;viewCFG()&apos; and a ghostview window should pop up from the
/// program, displaying the CFG of the current function.  This depends on there
/// being a &apos;dot&apos; and &apos;gv&apos; program in your path.
///</doc>
