<def f='llvm/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h' l='37' ll='120'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h' l='31'>/// The optimization diagnostic interface.
///
/// It allows reporting when optimizations are performed and when they are not
/// along with the reasons for it.  Hotness information of the corresponding
/// code region can be included in the remark if DiagnosticsHotnessRequested is
/// enabled in the LLVM context.</doc>
<fun r='_ZN4llvm25OptimizationRemarkEmitterC1EPKNS_8FunctionEPNS_18BlockFrequencyInfoE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitterC1EPKNS_8FunctionE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitterC1EOS0_'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitteraSEOS0_'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter10invalidateERNS_8FunctionERKNS_17PreservedAnalysesERNS_15AnalysisManagerIS1_JEE11InvalidatorE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter4emitERNS_30DiagnosticInfoOptimizationBaseE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter4emitET_PDTclfL0p_EE'/>
<fun r='_ZNK4llvm25OptimizationRemarkEmitter18allowExtraAnalysisENS_9StringRefE'/>
<mbr r='llvm::OptimizationRemarkEmitter::F' o='0' t='const llvm::Function *'/>
<mbr r='llvm::OptimizationRemarkEmitter::BFI' o='64' t='llvm::BlockFrequencyInfo *'/>
<mbr r='llvm::OptimizationRemarkEmitter::OwnedBFI' o='128' t='std::unique_ptr&lt;BlockFrequencyInfo&gt;'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter14computeHotnessEPKNS_5ValueE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter14computeHotnessERNS_28DiagnosticInfoIROptimizationE'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitter17shouldEmitVerboseEv'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitterC1ERKS0_'/>
<fun r='_ZN4llvm25OptimizationRemarkEmitteraSERKS0_'/>
