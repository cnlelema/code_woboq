<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='4191' type='void clang::CodeGen::CodeGenFunction::EmitCfiCheckFail()'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='4190'>/// Emit a cross-DSO CFI failure handling function.</doc>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='4042' ll='4124' type='void clang::CodeGen::CodeGenFunction::EmitCfiCheckFail()'/>
<doc f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='4035'>// This function is basically a switch over the CFI failure kind, which is
// extracted from CFICheckFailData (1st function argument). Each case is either
// llvm.trap or a call to one of the two runtime handlers, based on
// -fsanitize-trap and -fsanitize-recover settings.  Default case (invalid
// failure kind) traps, but this should really never happen.  CFICheckFailData
// can be nullptr if the calling module has -fsanitize-trap behavior for this
// check kind; in this case __cfi_check_fail traps as well.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenModule.cpp' l='524' u='c' c='_ZN5clang7CodeGen13CodeGenModule7ReleaseEv'/>
