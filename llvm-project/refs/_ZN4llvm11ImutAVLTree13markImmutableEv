<def f='llvm/llvm/include/llvm/ADT/ImmutableSet.h' l='278' ll='281' type='void llvm::ImutAVLTree::markImmutable()'/>
<doc f='llvm/llvm/include/llvm/ADT/ImmutableSet.h' l='265'>//===----------------------------------------------------===//
  // Mutating operations.  A tree root can be manipulated as
  // long as its reference has not &quot;escaped&quot; from internal
  // methods of a factory object (see below).  When a tree
  // pointer is externally viewable by client code, the
  // internal &quot;mutable bit&quot; is cleared to mark the tree
  // immutable.  Note that a tree that still has its mutable
  // bit set may have children (subtrees) that are themselves
  // immutable.
  //===----------------------------------------------------===//

  /// markImmutable - Clears the mutable flag for a tree.  After this happens,
  ///   it is an error to call setLeft(), setRight(), and setHeight().</doc>
