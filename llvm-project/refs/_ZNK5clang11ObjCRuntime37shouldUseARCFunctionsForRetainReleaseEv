<def f='llvm/clang/include/clang/Basic/ObjCRuntime.h' l='198' ll='216' type='bool clang::ObjCRuntime::shouldUseARCFunctionsForRetainRelease() const'/>
<doc f='llvm/clang/include/clang/Basic/ObjCRuntime.h' l='181'>/// Does this runtime provide ARC entrypoints that are likely to be faster
  /// than an ordinary message send of the appropriate selector?
  ///
  /// The ARC entrypoints are guaranteed to be equivalent to just sending the
  /// corresponding message.  If the entrypoint is implemented naively as just a
  /// message send, using it is a trade-off: it sacrifices a few cycles of
  /// overhead to save a small amount of code.  However, it&apos;s possible for
  /// runtimes to detect and special-case classes that use &quot;standard&quot;
  /// retain/release behavior; if that&apos;s dynamically a large proportion of all
  /// retained objects, using the entrypoint will also be faster than using a
  /// message send.
  ///
  /// When this method returns true, Clang will turn non-super message sends of
  /// certain selectors into calls to the correspond entrypoint:
  ///   retain =&gt; objc_retain
  ///   release =&gt; objc_release
  ///   autorelease =&gt; objc_autorelease</doc>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='407' u='c' c='_ZL33tryGenerateSpecializedMessageSendRN5clang7CodeGen15CodeGenFunctionENS_8QualTypeEPN4llvm5ValueERKNS0_11CallArgListENS_8SelectorEPKNS_14ObjCMethodDeclEb'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='414' u='c' c='_ZL33tryGenerateSpecializedMessageSendRN5clang7CodeGen15CodeGenFunctionENS_8QualTypeEPN4llvm5ValueERKNS0_11CallArgListENS_8SelectorEPKNS_14ObjCMethodDeclEb'/>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='421' u='c' c='_ZL33tryGenerateSpecializedMessageSendRN5clang7CodeGen15CodeGenFunctionENS_8QualTypeEPN4llvm5ValueERKNS0_11CallArgListENS_8SelectorEPKNS_14ObjCMethodDeclEb'/>
