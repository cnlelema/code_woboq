<dec f='llvm/clang/lib/Format/FormatToken.h' l='364' type='bool clang::format::FormatToken::isSimpleTypeSpecifier() const'/>
<doc f='llvm/clang/lib/Format/FormatToken.h' l='363'>/// Determine whether the token is a simple-type-specifier.</doc>
<def f='llvm/clang/lib/Format/FormatToken.cpp' l='39' ll='68' type='bool clang::format::FormatToken::isSimpleTypeSpecifier() const'/>
<doc f='llvm/clang/lib/Format/FormatToken.cpp' l='37'>// FIXME: This is copy&amp;pasted from Sema. Put it in a common place and remove
// duplication.</doc>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='325' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser11parseParensEb'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1534' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser13isStartOfNameERKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='1590' u='c' c='_ZN5clang6format12_GLOBAL__N_116AnnotatingParser14rParenEndsCastERKNS0_11FormatTokenE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2108' u='c' c='_ZN5clang6formatL25isFunctionDeclarationNameERKNS0_11FormatTokenERKNS0_13AnnotatedLineE'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2617' u='c' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/TokenAnnotator.cpp' l='2629' u='c' c='_ZN5clang6format14TokenAnnotator20spaceRequiredBetweenERKNS0_13AnnotatedLineERKNS0_11FormatTokenES7_'/>
<use f='llvm/clang/lib/Format/UnwrappedLineParser.cpp' l='1266' u='c' c='_ZN5clang6format19UnwrappedLineParser22parseStructuralElementEv'/>
<use f='llvm/clang/lib/Format/UnwrappedLineParser.cpp' l='1423' u='c' c='_ZN5clang6format19UnwrappedLineParser16tryToParseLambdaEv'/>
<use f='llvm/clang/lib/Format/UnwrappedLineParser.cpp' l='1505' u='c' c='_ZN5clang6format19UnwrappedLineParser26tryToParseLambdaIntroducerEv'/>
