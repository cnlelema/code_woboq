<def f='llvm/clang/include/clang/Lex/LiteralSupport.h' l='42' ll='171'/>
<size>112</size>
<doc f='llvm/clang/include/clang/Lex/LiteralSupport.h' l='39'>/// NumericLiteralParser - This performs strict semantic analysis of the content
/// of a ppnumber, classifying it as either integer, floating, or erroneous,
/// determines the radix of the value and can convert it to a useful value.</doc>
<mbr r='clang::NumericLiteralParser::PP' o='0' t='clang::Preprocessor &amp;'/>
<mbr r='clang::NumericLiteralParser::ThisTokBegin' o='64' t='const char *const'/>
<mbr r='clang::NumericLiteralParser::ThisTokEnd' o='128' t='const char *const'/>
<mbr r='clang::NumericLiteralParser::DigitsBegin' o='192' t='const char *'/>
<mbr r='clang::NumericLiteralParser::SuffixBegin' o='256' t='const char *'/>
<mbr r='clang::NumericLiteralParser::s' o='320' t='const char *'/>
<mbr r='clang::NumericLiteralParser::radix' o='384' t='unsigned int'/>
<mbr r='clang::NumericLiteralParser::saw_exponent' o='416' t='bool'/>
<mbr r='clang::NumericLiteralParser::saw_period' o='424' t='bool'/>
<mbr r='clang::NumericLiteralParser::saw_ud_suffix' o='432' t='bool'/>
<mbr r='clang::NumericLiteralParser::saw_fixed_point_suffix' o='440' t='bool'/>
<mbr r='clang::NumericLiteralParser::UDSuffixBuf' o='448' t='SmallString&lt;32&gt;'/>
<fun r='_ZN5clang20NumericLiteralParserC1EN4llvm9StringRefENS_14SourceLocationERNS_12PreprocessorE'/>
<mbr r='clang::NumericLiteralParser::hadError' o='832' t='bool'/>
<mbr r='clang::NumericLiteralParser::isUnsigned' o='833' t='bool'/>
<mbr r='clang::NumericLiteralParser::isLong' o='834' t='bool'/>
<mbr r='clang::NumericLiteralParser::isLongLong' o='835' t='bool'/>
<mbr r='clang::NumericLiteralParser::isHalf' o='836' t='bool'/>
<mbr r='clang::NumericLiteralParser::isFloat' o='837' t='bool'/>
<mbr r='clang::NumericLiteralParser::isImaginary' o='838' t='bool'/>
<mbr r='clang::NumericLiteralParser::isFloat16' o='839' t='bool'/>
<mbr r='clang::NumericLiteralParser::isFloat128' o='840' t='bool'/>
<mbr r='clang::NumericLiteralParser::MicrosoftInteger' o='848' t='uint8_t'/>
<mbr r='clang::NumericLiteralParser::isFract' o='856' t='bool'/>
<mbr r='clang::NumericLiteralParser::isAccum' o='857' t='bool'/>
<fun r='_ZNK5clang20NumericLiteralParser19isFixedPointLiteralEv'/>
<fun r='_ZNK5clang20NumericLiteralParser16isIntegerLiteralEv'/>
<fun r='_ZNK5clang20NumericLiteralParser17isFloatingLiteralEv'/>
<fun r='_ZNK5clang20NumericLiteralParser11hasUDSuffixEv'/>
<fun r='_ZNK5clang20NumericLiteralParser11getUDSuffixEv'/>
<fun r='_ZNK5clang20NumericLiteralParser17getUDSuffixOffsetEv'/>
<fun r='_ZN5clang20NumericLiteralParser15isValidUDSuffixERKNS_11LangOptionsEN4llvm9StringRefE'/>
<fun r='_ZNK5clang20NumericLiteralParser8getRadixEv'/>
<fun r='_ZN5clang20NumericLiteralParser15GetIntegerValueERN4llvm5APIntE'/>
<fun r='_ZN5clang20NumericLiteralParser13GetFloatValueERN4llvm7APFloatE'/>
<fun r='_ZN5clang20NumericLiteralParser18GetFixedPointValueERN4llvm5APIntEj'/>
<fun r='_ZN5clang20NumericLiteralParser27ParseNumberStartingWithZeroENS_14SourceLocationE'/>
<fun r='_ZN5clang20NumericLiteralParser25ParseDecimalOrOctalCommonENS_14SourceLocationE'/>
<fun r='_ZN5clang20NumericLiteralParser16isDigitSeparatorEc'/>
<fun r='_ZN5clang20NumericLiteralParser14containsDigitsEPKcS2_'/>
<fun r='_ZN5clang20NumericLiteralParser14checkSeparatorENS_14SourceLocationEPKcNS0_18CheckSeparatorKindE'/>
<fun r='_ZN5clang20NumericLiteralParser13SkipHexDigitsEPKc'/>
<fun r='_ZN5clang20NumericLiteralParser15SkipOctalDigitsEPKc'/>
<fun r='_ZN5clang20NumericLiteralParser10SkipDigitsEPKc'/>
<fun r='_ZN5clang20NumericLiteralParser16SkipBinaryDigitsEPKc'/>
