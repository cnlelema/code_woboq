<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1572' type='bool clang::Sema::CheckParamExceptionSpec(const clang::PartialDiagnostic &amp; NestedDiagID, const clang::PartialDiagnostic &amp; NoteID, const clang::FunctionProtoType * Target, clang::SourceLocation TargetLoc, const clang::FunctionProtoType * Source, clang::SourceLocation SourceLoc)'/>
<use f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='791' u='c' c='_ZN5clang4Sema24CheckExceptionSpecSubsetERKNS_17PartialDiagnosticES3_S3_S3_PKNS_17FunctionProtoTypeENS_14SourceLocationES6_S7_'/>
<use f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='844' u='c' c='_ZN5clang4Sema24CheckExceptionSpecSubsetERKNS_17PartialDiagnosticES3_S3_S3_PKNS_17FunctionProtoTypeENS_14SourceLocationES6_S7_'/>
<def f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='869' ll='897' type='bool clang::Sema::CheckParamExceptionSpec(const clang::PartialDiagnostic &amp; DiagID, const clang::PartialDiagnostic &amp; NoteID, const clang::FunctionProtoType * Target, clang::SourceLocation TargetLoc, const clang::FunctionProtoType * Source, clang::SourceLocation SourceLoc)'/>
<doc f='llvm/clang/lib/Sema/SemaExceptionSpec.cpp' l='864'>/// CheckParamExceptionSpec - Check if the parameter and return types of the
/// two functions have equivalent exception specs. This is part of the
/// assignment and override compatibility check. We do not check the parameters
/// of parameter function pointers recursively, as no sane programmer would
/// even be able to write such a function type.</doc>
