<def f='llvm/llvm/lib/Analysis/CFLGraph.h' l='57' ll='153'/>
<size>32</size>
<doc f='llvm/llvm/lib/Analysis/CFLGraph.h' l='47'>/// The Program Expression Graph (PEG) of CFL analysis
/// CFLGraph is auxiliary data structure used by CFL-based alias analysis to
/// describe flow-insensitive pointer-related behaviors. Given an LLVM function,
/// the main purpose of this graph is to abstract away unrelated facts and
/// translate the rest into a form that can be easily digested by CFL analyses.
/// Each Node in the graph is an InstantiatedValue, and each edge represent a
/// pointer assignment between InstantiatedValue. Pointer
/// references/dereferences are not explicitly stored in the graph: we
/// implicitly assume that for each node (X, I) it has a dereference edge to (X,
/// I+1) and a reference edge to (X, I-1).</doc>
<mbr r='llvm::cflaa::CFLGraph::ValueImpls' o='0' t='ValueMap'/>
<fun r='_ZN4llvm5cflaa8CFLGraph7getNodeENS0_17InstantiatedValueE'/>
<fun r='_ZN4llvm5cflaa8CFLGraph7addNodeENS0_17InstantiatedValueESt6bitsetILm32EE'/>
<fun r='_ZN4llvm5cflaa8CFLGraph7addAttrENS0_17InstantiatedValueESt6bitsetILm32EE'/>
<fun r='_ZN4llvm5cflaa8CFLGraph7addEdgeENS0_17InstantiatedValueES2_l'/>
<fun r='_ZNK4llvm5cflaa8CFLGraph7getNodeENS0_17InstantiatedValueE'/>
<fun r='_ZNK4llvm5cflaa8CFLGraph7attrForENS0_17InstantiatedValueE'/>
<fun r='_ZNK4llvm5cflaa8CFLGraph14value_mappingsEv'/>
