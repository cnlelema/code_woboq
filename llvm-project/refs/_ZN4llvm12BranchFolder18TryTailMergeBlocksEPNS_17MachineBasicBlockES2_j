<dec f='llvm/llvm/lib/CodeGen/BranchFolding.h' l='159' type='bool llvm::BranchFolder::TryTailMergeBlocks(llvm::MachineBasicBlock * SuccBB, llvm::MachineBasicBlock * PredBB, unsigned int MinCommonTailLength)'/>
<def f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='954' ll='1069' type='bool llvm::BranchFolder::TryTailMergeBlocks(llvm::MachineBasicBlock * SuccBB, llvm::MachineBasicBlock * PredBB, unsigned int MinCommonTailLength)'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1095' u='c' c='_ZN4llvm12BranchFolder15TailMergeBlocksERNS_15MachineFunctionE'/>
<use f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='1206' u='c' c='_ZN4llvm12BranchFolder15TailMergeBlocksERNS_15MachineFunctionE'/>
<doc f='llvm/llvm/lib/CodeGen/BranchFolding.cpp' l='945'>// See if any of the blocks in MergePotentials (which all have SuccBB as a
// successor, or all have no successor if it is null) can be tail-merged.
// If there is a successor, any blocks in MergePotentials that are not
// tail-merged and are not immediately before Succ must have an unconditional
// branch to Succ added (but the predecessor/successor lists need no
// adjustment). The lone predecessor of Succ that falls through into Succ,
// if any, is given in PredBB.
// MinCommonTailLength - Except for the special cases below, tail-merge if
// there are at least this many instructions in common.</doc>
