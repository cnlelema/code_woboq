<dec f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='241' type='llvm::BasicBlock * llvm::SplitBlockPredecessors(llvm::BasicBlock * BB, ArrayRef&lt;llvm::BasicBlock *&gt; Preds, const char * Suffix, llvm::DominatorTree * DT = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, bool PreserveLCSSA = false)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h' l='227'>/// This method introduces at least one new basic block into the function and
/// moves some of the predecessors of BB to be predecessors of the new block.
/// The new predecessors are indicated by the Preds array. The new block is
/// given a suffix of &apos;Suffix&apos;. Returns new basic block to which predecessors
/// from Preds are now pointing.
///
/// If BB is a landingpad block then additional basicblock might be introduced.
/// It will have Suffix+&quot;.split_lp&quot;. See SplitLandingPadPredecessors for more
/// details on this case.
///
/// This currently updates the LLVM IR, DominatorTree, LoopInfo, and LCCSA but
/// no other analyses. In particular, it does not preserve LoopSimplify
/// (because it&apos;s complicated to handle the case where one of the edges being
/// split is an exit of a loop with other exits).</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp' l='303' u='c' c='_ZN12_GLOBAL__N_121SIAnnotateControlFlow16closeControlFlowEPN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVNSink.cpp' l='808' u='c' c='_ZN12_GLOBAL__N_17GVNSink6sinkBBEPN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2100' u='c' c='_ZN4llvm17JumpThreadingPass15SplitBlockPredsEPNS_10BasicBlockENS_8ArrayRefIS2_EEPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1517' u='c' c='_ZL27splitPredecessorsOfLoopExitPN4llvm7PHINodeEPNS_13DominatorTreeEPNS_8LoopInfoEPKNS_4LoopEPNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp' l='1219' u='c' c='_ZN12_GLOBAL__N_112LoopUnswitch14SplitExitEdgesEPN4llvm4LoopERKNS1_15SmallVectorImplIPNS1_10BasicBlockEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp' l='1225' u='c' c='_ZL27normalizeForInvokeSafepointPN4llvm10BasicBlockES1_RNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp' l='556' ll='617' type='llvm::BasicBlock * llvm::SplitBlockPredecessors(llvm::BasicBlock * BB, ArrayRef&lt;llvm::BasicBlock *&gt; Preds, const char * Suffix, llvm::DominatorTree * DT = nullptr, llvm::LoopInfo * LI = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr, bool PreserveLCSSA = false)'/>
<use f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='307' u='c' c='_ZN4llvm17SplitCriticalEdgeEPNS_11InstructionEjRKNS_28CriticalEdgeSplittingOptionsE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='146' u='c' c='_ZN4llvm22InsertPreheaderForLoopEPNS_4LoopEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='260' u='c' c='_ZL18separateNestedLoopPN4llvm4LoopEPNS_10BasicBlockEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionEbPNS_15AssumptionCacheEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='143' u='c' c='_ZL13ConnectPrologPN4llvm4LoopEPNS_5ValueEjPNS_10BasicBlockES5_S5_S5_RNS_8ValueMapIPKS2_NS_14WeakTrackingVHENS_14ValueMapConfigIS8_NS_3sys10SmartMutex14442493'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='162' u='c' c='_ZL13ConnectPrologPN4llvm4LoopEPNS_5ValueEjPNS_10BasicBlockES5_S5_S5_RNS_8ValueMapIPKS2_NS_14WeakTrackingVHENS_14ValueMapConfigIS8_NS_3sys10SmartMutex14442493'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='277' u='c' c='_ZL13ConnectEpilogPN4llvm4LoopEPNS_5ValueEPNS_10BasicBlockES5_S5_S5_S5_RNS_8ValueMapIPKS2_NS_14WeakTrackingVHENS_14ValueMapConfigIS8_NS_3sys10SmartMut14533356'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='287' u='c' c='_ZL13ConnectEpilogPN4llvm4LoopEPNS_5ValueEPNS_10BasicBlockES5_S5_S5_S5_RNS_8ValueMapIPKS2_NS_14WeakTrackingVHENS_14ValueMapConfigIS8_NS_3sys10SmartMut14533356'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='681' u='c' c='_ZN4llvm26UnrollRuntimeLoopRemainderEPNS_4LoopEjbbbbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEbPS1_'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='85' u='c' c='_ZN4llvm23formDedicatedExitBlocksEPNS_4LoopEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1044' u='c' c='_ZN12_GLOBAL__N_114SimplifyCFGOpt35FoldValueComparisonIntoPredecessorsEPN4llvm11InstructionERNS1_9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1819' u='c' c='_ZL30SinkCommonCodeFromPredecessorsPN4llvm10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='3025' u='c' c='_ZL30mergeConditionalStoreToAddressPN4llvm10BasicBlockES1_S1_S1_S1_PNS_5ValueEbbRKNS_10DataLayoutE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='4470' u='c' c='_ZL24eliminateDeadSwitchCasesPN4llvm10SwitchInstEPNS_15AssumptionCacheERKNS_10DataLayoutE'/>
<use f='llvm/llvm/unittests/Transforms/Utils/BasicBlockUtilsTest.cpp' l='108' u='c' c='_ZN43BasicBlockUtils_SplitBlockPredecessors_Test8TestBodyEv'/>
