<def f='llvm/llvm/include/llvm/Analysis/LegacyDivergenceAnalysis.h' l='51' type='bool llvm::LegacyDivergenceAnalysis::isUniform(const llvm::Value * V) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LegacyDivergenceAnalysis.h' l='47'>// Returns true if V is uniform/non-divergent.
  //
  // Even if this function returns true, V may still be divergent when used
  // in a different basic block.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAnnotateUniformValues.cpp' l='118' u='c' c='_ZN12_GLOBAL__N_127AMDGPUAnnotateUniformValues15visitBranchInstERN4llvm10BranchInstE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAnnotateUniformValues.cpp' l='124' u='c' c='_ZN12_GLOBAL__N_127AMDGPUAnnotateUniformValues13visitLoadInstERN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp' l='263' u='c' c='_ZNK12_GLOBAL__N_120AMDGPUCodeGenPrepare21canWidenScalarExtLoadERN4llvm8LoadInstE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUUnifyDivergentExitNodes.cpp' l='107' u='c' c='_ZL18isUniformlyReachedRKN4llvm24LegacyDivergenceAnalysisERNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp' l='157' u='c' c='_ZN12_GLOBAL__N_121SIAnnotateControlFlow9isUniformEPN4llvm10BranchInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp' l='955' u='c' c='_ZL22hasOnlyUniformBranchesPN4llvm6RegionEjRKNS_24LegacyDivergenceAnalysisE'/>
