<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7228' type='clang::Sema::TemplateDeductionResult clang::Sema::SubstituteExplicitTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo &amp; ExplicitTemplateArgs, SmallVectorImpl&lt;clang::DeducedTemplateArgument&gt; &amp; Deduced, SmallVectorImpl&lt;clang::QualType&gt; &amp; ParamTypes, clang::QualType * FunctionType, sema::TemplateDeductionInfo &amp; Info)'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='2963' ll='3149' type='Sema::TemplateDeductionResult clang::Sema::SubstituteExplicitTemplateArguments(clang::FunctionTemplateDecl * FunctionTemplate, clang::TemplateArgumentListInfo &amp; ExplicitTemplateArgs, SmallVectorImpl&lt;clang::DeducedTemplateArgument&gt; &amp; Deduced, SmallVectorImpl&lt;clang::QualType&gt; &amp; ParamTypes, clang::QualType * FunctionType, clang::sema::TemplateDeductionInfo &amp; Info)'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='3834' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclEPNS_24TemplateArgumentListInfoEN4llvm8ArrayRefIPNS_4ExprEEERPNS_12FunctionDeclERNS_3990542'/>
<use f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4036' u='c' c='_ZN5clang4Sema23DeduceTemplateArgumentsEPNS_20FunctionTemplateDeclEPNS_24TemplateArgumentListInfoENS_8QualTypeERPNS_12FunctionDeclERNS_4sema21TemplateDeductionInfoEb'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='2939'>/// Substitute the explicitly-provided template arguments into the
/// given function template according to C++ [temp.arg.explicit].
///
/// \param FunctionTemplate the function template into which the explicit
/// template arguments will be substituted.
///
/// \param ExplicitTemplateArgs the explicitly-specified template
/// arguments.
///
/// \param Deduced the deduced template arguments, which will be populated
/// with the converted and checked explicit template arguments.
///
/// \param ParamTypes will be populated with the instantiated function
/// parameters.
///
/// \param FunctionType if non-NULL, the result type of the function template
/// will also be instantiated and the pointed-to value will be updated with
/// the instantiated function type.
///
/// \param Info if substitution fails for any reason, this object will be
/// populated with more information about the failure.
///
/// \returns TDK_Success if substitution was successful, or some failure
/// condition.</doc>
