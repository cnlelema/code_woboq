<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='53' type='llvm::BasicBlock * llvm::InsertPreheaderForLoop(llvm::Loop * L, llvm::DominatorTree * DT, llvm::LoopInfo * LI, llvm::MemorySSAUpdater * MSSAU, bool PreserveLCSSA)'/>
<use f='llvm/llvm/lib/CodeGen/HardwareLoops.cpp' l='307' u='c' c='_ZN12_GLOBAL__N_113HardwareLoops14TryConvertLoopERN4llvm19TargetTransformInfo16HardwareLoopInfoE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCLoopPreIncPrep.cpp' l='334' u='c' c='_ZN12_GLOBAL__N_117PPCLoopPreIncPrep9runOnLoopEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='1407' u='c' c='_ZN12_GLOBAL__N_124LoopInterchangeTransform18adjustLoopBranchesEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='1410' u='c' c='_ZN12_GLOBAL__N_124LoopInterchangeTransform18adjustLoopBranchesEv'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='122' ll='159' type='llvm::BasicBlock * llvm::InsertPreheaderForLoop(llvm::Loop * L, llvm::DominatorTree * DT, llvm::LoopInfo * LI, llvm::MemorySSAUpdater * MSSAU, bool PreserveLCSSA)'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='538' u='c' c='_ZL15simplifyOneLoopPN4llvm4LoopERNS_15SmallVectorImplIS1_EEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_15AssumptionCacheEPNS_16MemorySSAUpdaterEb'/>
<doc f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='118'>/// InsertPreheaderForLoop - Once we discover that a loop doesn&apos;t have a
/// preheader, this method is called to insert one.  This method has two phases:
/// preheader insertion and analysis updating.
///</doc>
