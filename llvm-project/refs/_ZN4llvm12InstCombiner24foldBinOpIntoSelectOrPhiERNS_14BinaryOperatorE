<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='818' type='llvm::Instruction * llvm::InstCombiner::foldBinOpIntoSelectOrPhi(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='872' u='c' c='_ZN4llvm12InstCombiner19foldAddWithConstantERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1359' u='c' c='_ZN4llvm12InstCombiner9visitFAddERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='817'>/// This is a convenience wrapper function for the above two functions.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='1722' u='c' c='_ZN4llvm12InstCombiner8visitAndERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='2281' u='c' c='_ZN4llvm12InstCombiner7visitOrERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='2916' u='c' c='_ZN4llvm12InstCombiner8visitXorERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='213' u='c' c='_ZN4llvm12InstCombiner8visitMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='358' u='c' c='_ZN4llvm12InstCombiner9visitFMulERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='718' u='c' c='_ZN4llvm12InstCombiner20commonIDivTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='356' u='c' c='_ZN4llvm12InstCombiner19FoldShiftByConstantEPNS_5ValueEPNS_8ConstantERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1036' ll='1048' type='llvm::Instruction * llvm::InstCombiner::foldBinOpIntoSelectOrPhi(llvm::BinaryOperator &amp; I)'/>
