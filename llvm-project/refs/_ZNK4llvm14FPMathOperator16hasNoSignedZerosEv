<def f='llvm/llvm/include/llvm/IR/Operator.h' l='342' ll='344' type='bool llvm::FPMathOperator::hasNoSignedZeros() const'/>
<doc f='llvm/llvm/include/llvm/IR/Operator.h' l='341'>/// Test if this operation can ignore the sign of zero.</doc>
<use f='llvm/llvm/lib/Analysis/ValueTracking.cpp' l='3017' u='c' c='_ZN4llvm20CannotBeNegativeZeroEPKNS_5ValueEPKNS_17TargetLibraryInfoEj'/>
<use f='llvm/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp' l='1397' u='c' c='_ZL20getOptimizationFlagsPKN4llvm5ValueE'/>
<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='391' u='c' c='_ZN4llvm11SDNodeFlags7copyFMFERKNS_14FPMathOperatorE'/>
<use f='llvm/llvm/lib/IR/AsmWriter.cpp' l='1257' u='c' c='_ZL21WriteOptimizationInfoRN4llvm11raw_ostreamEPKNS_4UserE'/>
<use f='llvm/llvm/lib/IR/Instruction.cpp' l='214' u='c' c='_ZNK4llvm11Instruction16hasNoSignedZerosEv'/>
<use f='llvm/llvm/lib/IR/Instruction.cpp' l='642' u='c' c='_ZNK4llvm11Instruction13isAssociativeEv'/>
