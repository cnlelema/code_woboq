<def f='llvm/llvm/include/llvm/ADT/EquivalenceClasses.h' l='243' ll='249' type='bool llvm::EquivalenceClasses::isEquivalent(const ElemTy &amp; V1, const ElemTy &amp; V2) const'/>
<doc f='llvm/llvm/include/llvm/ADT/EquivalenceClasses.h' l='241'>// isEquivalent - Return true if V1 is equivalent to V2. This can happen if
  // V1 is equal to V2 or if they belong to one equivalence class.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='573' u='c' c='_ZL22CompareValueComplexityRN4llvm18EquivalenceClassesIPKNS_5ValueEEEPKNS_8LoopInfoEPS1_S9_j'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='661' u='c' c='_ZL21CompareSCEVComplexityRN4llvm18EquivalenceClassesIPKNS_4SCEVEEERNS0_IPKNS_5ValueEEEPKNS_8LoopInfoES3_S3_RNS_13DominatorTreeEj'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='23' u='c' c='_ZN4llvm36EquivalenceClassesTest_NoMerges_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='25' u='c' c='_ZN4llvm36EquivalenceClassesTest_NoMerges_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='37' u='c' c='_ZN4llvm40EquivalenceClassesTest_SimpleMerge1_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='49' u='c' c='_ZN4llvm40EquivalenceClassesTest_SimpleMerge2_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='64' u='c' c='_ZN4llvm35EquivalenceClassesTest_TwoSets_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='66' u='c' c='_ZN4llvm35EquivalenceClassesTest_TwoSets_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='79' u='c' c='_ZN4llvm40EquivalenceClassesTest_MultipleSets_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/ADT/EquivalenceClassesTest.cpp' l='81' u='c' c='_ZN4llvm40EquivalenceClassesTest_MultipleSets_Test8TestBodyEv'/>
