<dec f='llvm/llvm/include/llvm/CodeGen/AsmPrinter.h' l='367' type='void llvm::AsmPrinter::computeGlobalGOTEquivs(llvm::Module &amp; M)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/AsmPrinter.h' l='359'>/// Unnamed constant global variables solely contaning a pointer to
  /// another globals variable act like a global variable &quot;proxy&quot;, or GOT
  /// equivalents, i.e., it&apos;s only used to hold the address of the latter. One
  /// optimization is to replace accesses to these proxies by using the GOT
  /// entry for the final global instead. Hence, we select GOT equivalent
  /// candidates among all the module global variables, avoid emitting them
  /// unnecessarily and finally replace references to them by pc relative
  /// accesses to GOT entries.</doc>
<def f='llvm/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp' l='1280' ll='1292' type='void llvm::AsmPrinter::computeGlobalGOTEquivs(llvm::Module &amp; M)'/>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp' l='1439' u='c' c='_ZN4llvm10AsmPrinter14doFinalizationERNS_6ModuleE'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp' l='1273'>/// Unnamed constant global variables solely contaning a pointer to
/// another globals variable is equivalent to a GOT table entry; it contains the
/// the address of another symbol. Optimize it and replace accesses to these
/// &quot;GOT equivalents&quot; by using the GOT entry for the final global instead.
/// Compute GOT equivalent candidates among all global variables to avoid
/// emitting them if possible later on, after it use is replaced by a GOT entry
/// access.</doc>
