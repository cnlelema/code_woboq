<dec f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='227' type='llvm::InlineCost llvm::getInlineCost(llvm::CallBase &amp; Call, llvm::Function * Callee, const llvm::InlineParams &amp; Params, llvm::TargetTransformInfo &amp; CalleeTTI, std::function&lt;AssumptionCache &amp;(Function &amp;)&gt; &amp; GetAssumptionCache, Optional&lt;function_ref&lt;llvm::BlockFrequencyInfo &amp;(llvm::Function &amp;)&gt; &gt; GetBFI, llvm::ProfileSummaryInfo * PSI, llvm::OptimizationRemarkEmitter * ORE)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InlineCost.h' l='221'>/// Get an InlineCost with the callee explicitly specified.
/// This allows you to calculate the cost of inlining a function via a
/// pointer. This behaves exactly as the version with no explicit callee
/// parameter in all other respects.
//</doc>
<use f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2028' u='c' c='_ZN4llvm13getInlineCostERNS_8CallBaseERKNS_12InlineParamsERNS_19TargetTransformInfoERSt8functionIFRNS_15AssumptionCacheERNS_8FunctionEEENS_8OptionalIN14842914'/>
<def f='llvm/llvm/lib/Analysis/InlineCost.cpp' l='2032' ll='2109' type='llvm::InlineCost llvm::getInlineCost(llvm::CallBase &amp; Call, llvm::Function * Callee, const llvm::InlineParams &amp; Params, llvm::TargetTransformInfo &amp; CalleeTTI, std::function&lt;AssumptionCache &amp;(Function &amp;)&gt; &amp; GetAssumptionCache, Optional&lt;function_ref&lt;llvm::BlockFrequencyInfo &amp;(llvm::Function &amp;)&gt; &gt; GetBFI, llvm::ProfileSummaryInfo * PSI, llvm::OptimizationRemarkEmitter * ORE)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPUInline.cpp' l='217' u='c' c='_ZN12_GLOBAL__N_113AMDGPUInliner13getInlineCostEN4llvm8CallSiteE'/>
