<def f='llvm/clang/include/clang/AST/Expr.h' l='2494' ll='2497' type='clang::Stmt ** clang::CallExpr::getTrailingStmts()'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2499' u='c' c='_ZNK5clang8CallExpr16getTrailingStmtsEv'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2530' u='c' c='_ZN5clang8CallExpr9getPreArgEj'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2538' u='c' c='_ZN5clang8CallExpr9setPreArgEjPNS_4StmtE'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2578' u='c' c='_ZN5clang8CallExpr9getCalleeEv'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2580' u='c' c='_ZN5clang8CallExpr9setCalleeEPNS_4ExprE'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2608' u='c' c='_ZN5clang8CallExpr7getArgsEv'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='2674' u='c' c='_ZN5clang8CallExpr14getRawSubExprsEv'/>
<doc f='llvm/clang/include/clang/AST/Expr.h' l='2472'>// CallExpr store some data in trailing objects. However since CallExpr
  // is used a base of other expression classes we cannot use
  // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic
  // and casts.
  //
  // The trailing objects are in order:
  //
  // * A single &quot;Stmt *&quot; for the callee expression.
  //
  // * An array of getNumPreArgs() &quot;Stmt *&quot; for the pre-argument expressions.
  //
  // * An array of getNumArgs() &quot;Stmt *&quot; for the argument expressions.
  //
  // Note that we store the offset in bytes from the this pointer to the start
  // of the trailing objects. It would be perfectly possible to compute it
  // based on the dynamic kind of the CallExpr. However 1.) we have plenty of
  // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to
  // compute this once and then load the offset from the bit-fields of Stmt,
  // instead of re-computing the offset each time the trailing objects are
  // accessed.

  /// Return a pointer to the start of the trailing array of &quot;Stmt *&quot;.</doc>
