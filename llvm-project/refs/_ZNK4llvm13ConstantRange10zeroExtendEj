<dec f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='301' type='llvm::ConstantRange llvm::ConstantRange::zeroExtend(uint32_t BitWidth) const'/>
<doc f='llvm/llvm/include/llvm/IR/ConstantRange.h' l='297'>/// Return a new range in the specified integer type, which must
  /// be strictly larger than the current type.  The returned range will
  /// correspond to the possible range of values if the source range had been
  /// zero extended to BitWidth.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='1674' u='c' c='_ZN4llvm15ScalarEvolution17getZeroExtendExprEPKNS_4SCEVEPNS_4TypeEj'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='5607' u='c' c='_ZN4llvm15ScalarEvolution11getRangeRefEPKNS_4SCEVENS0_13RangeSignHintE'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='615' u='c' c='_ZNK4llvm13ConstantRange6castOpENS_11Instruction7CastOpsEj'/>
<def f='llvm/llvm/lib/IR/ConstantRange.cpp' l='648' ll='663' type='llvm::ConstantRange llvm::ConstantRange::zeroExtend(uint32_t DstTySize) const'/>
<use f='llvm/llvm/lib/IR/ConstantRange.cpp' l='742' u='c' c='_ZNK4llvm13ConstantRange11zextOrTruncEj'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='329' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='330' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='331' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='332' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='333' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='344' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/IR/ConstantRangeTest.cpp' l='344' u='c' c='_ZN12_GLOBAL__N_127ConstantRangeTest_ZExt_Test8TestBodyEv'/>
