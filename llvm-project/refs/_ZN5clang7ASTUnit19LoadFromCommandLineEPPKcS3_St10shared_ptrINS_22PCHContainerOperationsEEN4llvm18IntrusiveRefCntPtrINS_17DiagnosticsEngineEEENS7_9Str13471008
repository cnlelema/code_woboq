<dec f='llvm/clang/include/clang/Frontend/ASTUnit.h' l='818' type='static clang::ASTUnit * clang::ASTUnit::LoadFromCommandLine(const char ** ArgBegin, const char ** ArgEnd, std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps, IntrusiveRefCntPtr&lt;clang::DiagnosticsEngine&gt; Diags, llvm::StringRef ResourceFilesPath, bool OnlyLocalDecls = false, clang::CaptureDiagsKind CaptureDiagnostics = CaptureDiagsKind::None, ArrayRef&lt;RemappedFile&gt; RemappedFiles = None, bool RemappedFilesKeepOriginalName = true, unsigned int PrecompilePreambleAfterNParses = 0, clang::TranslationUnitKind TUKind = TU_Complete, bool CacheCodeCompletionResults = false, bool IncludeBriefCommentsInCodeCompletion = false, bool AllowPCHWithCompilerErrors = false, clang::SkipFunctionBodiesScope SkipFunctionBodies = SkipFunctionBodiesScope::None, bool SingleFileParse = false, bool UserFilesAreVolatile = false, bool ForSerialization = false, llvm::Optional&lt;StringRef&gt; ModuleFormat = llvm::None, std::unique_ptr&lt;ASTUnit&gt; * ErrAST = nullptr, IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; VFS = nullptr)'/>
<doc f='llvm/clang/include/clang/Frontend/ASTUnit.h' l='789'>/// LoadFromCommandLine - Create an ASTUnit from a vector of command line
  /// arguments, which must specify exactly one source file.
  ///
  /// \param ArgBegin - The beginning of the argument vector.
  ///
  /// \param ArgEnd - The end of the argument vector.
  ///
  /// \param PCHContainerOps - The PCHContainerOperations to use for loading and
  /// creating modules.
  ///
  /// \param Diags - The diagnostics engine to use for reporting errors; its
  /// lifetime is expected to extend past that of the returned ASTUnit.
  ///
  /// \param ResourceFilesPath - The path to the compiler resource files.
  ///
  /// \param ModuleFormat - If provided, uses the specific module format.
  ///
  /// \param ErrAST - If non-null and parsing failed without any AST to return
  /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit
  /// mainly to allow the caller to see the diagnostics.
  ///
  /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.
  /// Note that preamble is saved to a temporary directory on a RealFileSystem,
  /// so in order for it to be loaded correctly, VFS should have access to
  /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used
  /// if \p VFS is nullptr.
  ///
  // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we
  // shouldn&apos;t need to specify them at construction time.</doc>
<def f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='1725' ll='1817' type='static clang::ASTUnit * clang::ASTUnit::LoadFromCommandLine(const char ** ArgBegin, const char ** ArgEnd, std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps, IntrusiveRefCntPtr&lt;clang::DiagnosticsEngine&gt; Diags, llvm::StringRef ResourceFilesPath, bool OnlyLocalDecls = false, clang::CaptureDiagsKind CaptureDiagnostics = CaptureDiagsKind::None, ArrayRef&lt;RemappedFile&gt; RemappedFiles = None, bool RemappedFilesKeepOriginalName = true, unsigned int PrecompilePreambleAfterNParses = 0, clang::TranslationUnitKind TUKind = TU_Complete, bool CacheCodeCompletionResults = false, bool IncludeBriefCommentsInCodeCompletion = false, bool AllowPCHWithCompilerErrors = false, clang::SkipFunctionBodiesScope SkipFunctionBodies = SkipFunctionBodiesScope::None, bool SingleFileParse = false, bool UserFilesAreVolatile = false, bool ForSerialization = false, llvm::Optional&lt;StringRef&gt; ModuleFormat = llvm::None, std::unique_ptr&lt;ASTUnit&gt; * ErrAST = nullptr, IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; VFS = nullptr)'/>
<use f='llvm/clang/tools/libclang/CIndex.cpp' l='3509' u='c' c='_ZL31clang_parseTranslationUnit_ImplPvPKcPKS1_iN4llvm8ArrayRefI13CXUnsavedFileEEjPP21CXTranslationUnitImpl'/>
