<dec f='llvm/llvm/include/llvm/Transforms/Utils/IntegerDivision.h' l='49' type='bool llvm::expandRemainderUpTo32Bits(llvm::BinaryOperator * Rem)'/>
<def f='llvm/llvm/lib/Transforms/Utils/IntegerDivision.cpp' l='485' ll='527' type='bool llvm::expandRemainderUpTo32Bits(llvm::BinaryOperator * Rem)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/IntegerDivision.cpp' l='478'>/// Generate code to compute the remainder of two integers of bitwidth up to
/// 32 bits. Uses the above routines and extends the inputs/truncates the
/// outputs to operate in 32 bits; that is, these routines are good for targets
/// that have no or very little suppport for smaller than 32 bit integer
/// arithmetic.
///
/// Replace Rem with emulation code.</doc>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/IntegerDivision.h' l='43'>/// Generate code to calculate the remainder of two integers, replacing Rem
  /// with the generated code. Uses ExpandReminder with a 32bit Rem which
  /// makes it useful for targets with little or no support for less than
  /// 32 bit arithmetic.
  ///
  /// Replace Rem with generated code.</doc>
