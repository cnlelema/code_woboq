<dec f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1882' type='iterator_range&lt;typename SmallPtrSet&lt;SubCommand *, 4&gt;::iterator&gt; llvm::cl::getRegisteredSubcommands()'/>
<doc f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1862'>/// Use this to get all registered SubCommands from the provided parser.
///
/// \return A range of all SubCommand pointers registered with the parser.
///
/// Typical usage:
/// \code
/// main(int argc, char* argv[]) {
///   llvm::cl::ParseCommandLineOptions(argc, argv);
///   for (auto* S : llvm::cl::getRegisteredSubcommands()) {
///     if (*S) {
///       std::cout &lt;&lt; &quot;Executing subcommand: &quot; &lt;&lt; S-&gt;getName() &lt;&lt; std::endl;
///       // Execute some function based on the name...
///     }
///   }
/// }
/// \endcode
///
/// This interface is useful for defining subcommands in libraries and
/// the dispatch from a single point (like in the main function).</doc>
<def f='llvm/llvm/lib/Support/CommandLine.cpp' l='2461' ll='2464' type='iterator_range&lt;typename SmallPtrSet&lt;SubCommand *, 4&gt;::iterator&gt; llvm::cl::getRegisteredSubcommands()'/>
<use f='llvm/llvm/tools/llvm-xray/llvm-xray.cpp' l='30' u='c' c='main'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='661' u='c' c='_ZN12_GLOBAL__N_145CommandLineTest_GetRegisteredSubcommands_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='672' u='c' c='_ZN12_GLOBAL__N_145CommandLineTest_GetRegisteredSubcommands_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='717' u='c' c='_ZN12_GLOBAL__N_135CommandLineTest_DefaultOptions_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Support/CommandLineTest.cpp' l='733' u='c' c='_ZN12_GLOBAL__N_135CommandLineTest_DefaultOptions_Test8TestBodyEv'/>
