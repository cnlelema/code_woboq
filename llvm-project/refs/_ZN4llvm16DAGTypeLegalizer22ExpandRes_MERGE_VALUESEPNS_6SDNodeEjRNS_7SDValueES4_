<dec f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='960' type='void llvm::DAGTypeLegalizer::ExpandRes_MERGE_VALUES(llvm::SDNode * N, unsigned int ResNo, llvm::SDValue &amp; Lo, llvm::SDValue &amp; Hi)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1130' u='c' c='_ZN4llvm16DAGTypeLegalizer17ExpandFloatResultEPNS_6SDNodeEj'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='959'>// Generic Result Expansion.</doc>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp' l='34' ll='38' type='void llvm::DAGTypeLegalizer::ExpandRes_MERGE_VALUES(llvm::SDNode * N, unsigned int ResNo, llvm::SDValue &amp; Lo, llvm::SDValue &amp; Hi)'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp' l='27'>//===----------------------------------------------------------------------===//
// Generic Result Expansion.
//===----------------------------------------------------------------------===//

// These routines assume that the Lo/Hi part is stored first in memory on
// little/big-endian machines, followed by the Hi/Lo part.  This means that
// they cannot be used as is on vectors, for which Lo is always stored first.</doc>
