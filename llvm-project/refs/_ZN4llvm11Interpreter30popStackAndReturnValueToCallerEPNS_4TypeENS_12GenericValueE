<dec f='llvm/llvm/lib/ExecutionEngine/Interpreter/Interpreter.h' l='229' type='void llvm::Interpreter::popStackAndReturnValueToCaller(llvm::Type * RetTy, llvm::GenericValue Result)'/>
<def f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='890' ll='914' type='void llvm::Interpreter::popStackAndReturnValueToCaller(llvm::Type * RetTy, llvm::GenericValue Result)'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='927' u='c' c='_ZN4llvm11Interpreter15visitReturnInstERNS_10ReturnInstE'/>
<use f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='2136' u='c' c='_ZN4llvm11Interpreter12callFunctionEPNS_8FunctionENS_8ArrayRefINS_12GenericValueEEE'/>
<doc f='llvm/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp' l='882'>/// Pop the last stack frame off of ECStack and then copy the result
/// back into the result variable if we are not returning void. The
/// result variable may be the ExitValue, or the Value of the calling
/// CallInst if there was a previous stack frame. This method may
/// invalidate any ECStack iterators you have. This method also takes
/// care of switching to the normal destination BB, if we are returning
/// from an invoke.
///</doc>
