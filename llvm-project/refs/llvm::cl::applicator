<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1168' ll='1170'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1173' ll='1177'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1178' ll='1182'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1183' ll='1187'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1189' ll='1193'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1195' ll='1197'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1199' ll='1201'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1203' ll='1205'/>
<def f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1207' ll='1213'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1162'>//===----------------------------------------------------------------------===//
// applicator class - This class is used because we must use partial
// specialization to handle literal string arguments specially (const char* does
// not correctly respond to the apply method).  Because the syntax to use this
// is a pain, we have the &apos;apply&apos; method below to handle the nastiness...
//</doc>
<doc f='llvm/llvm/include/llvm/Support/CommandLine.h' l='1172'>// Handle const char* as a special case...</doc>
<fun r='_ZN4llvm2cl10applicator3optERKT_RT_'/>
<fun r='_ZN4llvm2cl10applicatorIAT__cE3optENS_9StringRefERT_'/>
<fun r='_ZN4llvm2cl10applicatorIAT__KcE3optENS_9StringRefERT_'/>
<fun r='_ZN4llvm2cl10applicatorINS_9StringRefEE3optES2_RT_'/>
<fun r='_ZN4llvm2cl10applicatorINS0_18NumOccurrencesFlagEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_13ValueExpectedEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_12OptionHiddenEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_15FormattingFlagsEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_9MiscFlagsEE3optES2_RNS0_6OptionE'/>
