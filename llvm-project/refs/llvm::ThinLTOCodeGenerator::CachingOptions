<def f='llvm/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h' l='126' ll='129'/>
<size>80</size>
<doc f='llvm/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h' l='106'>/**
   * \defgroup Cache controlling options
   *
   * These entry points control the ThinLTO cache. The cache is intended to
   * support incremental build, and thus needs to be persistent accross build.
   * The client enabled the cache by supplying a path to an existing directory.
   * The code generator will use this to store objects files that may be reused
   * during a subsequent build.
   * To avoid filling the disk space, a few knobs are provided:
   *  - The pruning interval limit the frequency at which the garbage collector
   *    will try to scan the cache directory to prune it from expired entries.
   *    Setting to -1 disable the pruning (default). Setting to 0 will force
   *    pruning to occur.
   *  - The pruning expiration time indicates to the garbage collector how old
   *    an entry needs to be to be removed.
   *  - Finally, the garbage collector can be instructed to prune the cache till
   *    the occupied space goes below a threshold.
   * @{
   */</doc>
<mbr r='llvm::ThinLTOCodeGenerator::CachingOptions::Path' o='0' t='std::string'/>
<mbr r='llvm::ThinLTOCodeGenerator::CachingOptions::Policy' o='256' t='llvm::CachePruningPolicy'/>
