<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='917' u='a' c='_ZNK4llvm26LoopVectorizationCostModel19getMinimalBitwidthsEv'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='971' u='m' c='_ZNK4llvm26LoopVectorizationCostModel28canTruncateToMinimalBitwidthEPNS_11InstructionEj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='971' u='m' c='_ZNK4llvm26LoopVectorizationCostModel28canTruncateToMinimalBitwidthEPNS_11InstructionEj'/>
<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1261' type='MapVector&lt;llvm::Instruction *, uint64_t&gt;'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='4747' u='w' c='_ZN4llvm26LoopVectorizationCostModel20computeFeasibleMaxVFEbj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5843' u='m' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5989' u='m' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<offset>64</offset>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1258'>/// Map of scalar integer values to the smallest bitwidth they can be legally
  /// represented as. The vector equivalents of these values should be truncated
  /// to this type.</doc>
