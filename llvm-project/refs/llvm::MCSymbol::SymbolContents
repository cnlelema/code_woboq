<dec f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='111' type='unsigned int'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='156' u='w' c='_ZN4llvm8MCSymbolC1ENS0_10SymbolKindEPKNS_14StringMapEntryIbEEb'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='232' u='r' c='_ZN4llvm8MCSymbol18redefineIfPossibleEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='234' u='w' c='_ZN4llvm8MCSymbol18redefineIfPossibleEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='297' u='r' c='_ZNK4llvm8MCSymbol10isVariableEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='321' u='r' c='_ZNK4llvm8MCSymbol7isUnsetEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='324' u='r' c='_ZNK4llvm8MCSymbol9getOffsetEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='325' u='r' c='_ZNK4llvm8MCSymbol9getOffsetEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='330' u='r' c='_ZN4llvm8MCSymbol9setOffsetEm'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='331' u='r' c='_ZN4llvm8MCSymbol9setOffsetEm'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='334' u='w' c='_ZN4llvm8MCSymbol9setOffsetEm'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='350' u='w' c='_ZN4llvm8MCSymbol9setCommonEmj'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='383' u='r' c='_ZNK4llvm8MCSymbol8isCommonEv'/>
<offset>74</offset>
<doc f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='109'>/// This is actually a Contents enumerator, but is unsigned to avoid sign
  /// extension and achieve better bitpacking with MSVC.</doc>
<use f='llvm/llvm/lib/MC/MCSymbol.cpp' l='51' u='r' c='_ZN4llvm8MCSymbol16setVariableValueEPKNS_6MCExprE'/>
<use f='llvm/llvm/lib/MC/MCSymbol.cpp' l='52' u='r' c='_ZN4llvm8MCSymbol16setVariableValueEPKNS_6MCExprE'/>
<use f='llvm/llvm/lib/MC/MCSymbol.cpp' l='55' u='w' c='_ZN4llvm8MCSymbol16setVariableValueEPKNS_6MCExprE'/>
