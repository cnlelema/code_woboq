<def f='llvm/llvm/include/llvm/IR/DiagnosticInfo.h' l='776' ll='778' type='void llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(const char * PassName, llvm::StringRef Prepend, const llvm::OptimizationRemarkAnalysis &amp; Orig)'/>
<doc f='llvm/llvm/include/llvm/IR/DiagnosticInfo.h' l='769'>/// This is ctor variant allows a pass to build an optimization remark
  /// from an existing remark.
  ///
  /// This is useful when a transformation pass (e.g LV) wants to emit a remark
  /// (\p Orig) generated by one of its analyses (e.g. LAA) as its own analysis
  /// remark.  The string \p Prepend will be emitted before the original
  /// message.</doc>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='830' u='c' c='_ZN4llvm25LoopVectorizationLegality18canVectorizeMemoryEv'/>
