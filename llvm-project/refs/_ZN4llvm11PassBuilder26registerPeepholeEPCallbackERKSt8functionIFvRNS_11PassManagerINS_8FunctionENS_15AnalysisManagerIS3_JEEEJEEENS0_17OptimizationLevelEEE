<def f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='484' ll='487' type='void llvm::PassBuilder::registerPeepholeEPCallback(const std::function&lt;void (FunctionPassManager &amp;, OptimizationLevel)&gt; &amp; C)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='478'>/// Register a callback for a default optimizer pipeline extension
  /// point
  ///
  /// This extension point allows adding passes that perform peephole
  /// optimizations similar to the instruction combiner. These passes will be
  /// inserted after each instance of the instruction combiner pass.</doc>
<use f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='139' u='c' c='_ZL19registerEPCallbacksRN4llvm11PassBuilderEbb'/>
