<dec f='llvm/clang/include/clang-c/Index.h' l='3106' type='void clang_getOverriddenCursors(CXCursor cursor, CXCursor ** overridden, unsigned int * num_overridden)'/>
<doc f='llvm/clang/include/clang-c/Index.h' l='3063'>/**
 * Determine the set of methods that are overridden by the given
 * method.
 *
 * In both Objective-C and C++, a method (aka virtual member function,
 * in C++) can override a virtual method in a base class. For
 * Objective-C, a method is said to override any method in the class&apos;s
 * base class, its protocols, or its categories&apos; protocols, that has the same
 * selector and is of the same kind (class or instance).
 * If no such method exists, the search continues to the class&apos;s superclass,
 * its protocols, and its categories, and so on. A method from an Objective-C
 * implementation is considered to override the same methods as its
 * corresponding method in the interface.
 *
 * For C++, a virtual member function overrides any virtual member
 * function with the same signature that occurs in its base
 * classes. With multiple inheritance, a virtual member function can
 * override several virtual member functions coming from different
 * base classes.
 *
 * In all cases, this function determines the immediate overridden
 * method, rather than all of the overridden methods. For example, if
 * a method is originally declared in a class A, then overridden in B
 * (which in inherits from A) and also in C (which inherited from B),
 * then the only overridden method returned from this function when
 * invoked on C&apos;s method will be B&apos;s method. The client may then
 * invoke this function again, given the previously-found overridden
 * methods, to map out the complete method-override set.
 *
 * \param cursor A cursor representing an Objective-C or C++
 * method. This routine will compute the set of methods that this
 * method overrides.
 *
 * \param overridden A pointer whose pointee will be replaced with a
 * pointer to an array of cursors, representing the set of overridden
 * methods. If there are no overridden methods, the pointee will be
 * set to NULL. The pointee must be freed via a call to
 * \c clang_disposeOverriddenCursors().
 *
 * \param num_overridden A pointer to the number of overridden
 * functions, will be set to the number of overridden functions in the
 * array pointed to by \p overridden.
 */</doc>
<use f='llvm/clang/tools/c-index-test/c-index-test.c' l='1030' u='c' c='PrintCursor'/>
<def f='llvm/clang/tools/libclang/CXCursor.cpp' l='1470' ll='1525' type='void clang_getOverriddenCursors(CXCursor cursor, CXCursor ** overridden, unsigned int * num_overridden)'/>
