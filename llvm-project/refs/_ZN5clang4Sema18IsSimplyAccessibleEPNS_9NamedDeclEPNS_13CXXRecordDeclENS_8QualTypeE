<dec f='llvm/clang/include/clang/Sema/Sema.h' l='6285' type='bool clang::Sema::IsSimplyAccessible(clang::NamedDecl * Decl, clang::CXXRecordDecl * NamingClass, clang::QualType BaseType)'/>
<def f='llvm/clang/lib/Sema/SemaAccess.cpp' l='1891' ll='1946' type='bool clang::Sema::IsSimplyAccessible(clang::NamedDecl * Target, clang::CXXRecordDecl * NamingClass, clang::QualType BaseType)'/>
<doc f='llvm/clang/lib/Sema/SemaAccess.cpp' l='1874'>/// Checks access to Target from the given class. The check will take access
/// specifiers into account, but no member access expressions and such.
///
/// \param Target the declaration to check if it can be accessed
/// \param NamingClass the class in which the lookup was started.
/// \param BaseType type of the left side of member access expression.
///        \p BaseType and \p NamingClass are used for C++ access control.
///        Depending on the lookup case, they should be set to the following:
///        - lhs.target (member access without a qualifier):
///          \p BaseType and \p NamingClass are both the type of &apos;lhs&apos;.
///        - lhs.X::target (member access with a qualifier):
///          BaseType is the type of &apos;lhs&apos;, NamingClass is &apos;X&apos;
///        - X::target (qualified lookup without member access):
///          BaseType is null, NamingClass is &apos;X&apos;.
///        - target (unqualified lookup).
///          BaseType is null, NamingClass is the parent class of &apos;target&apos;.
/// \return true if the Target is accessible from the Class, false otherwise.</doc>
<use f='llvm/clang/lib/Sema/SemaCodeComplete.cpp' l='1647' u='c' c='_ZN12_GLOBAL__N_126CodeCompletionDeclConsumer12IsAccessibleEPN5clang9NamedDeclEPNS1_11DeclContextE'/>
