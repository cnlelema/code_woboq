<dec f='llvm/clang/lib/CodeGen/ConstantEmitter.h' l='96' type='llvm::Constant * clang::CodeGen::ConstantEmitter::tryEmitAbstractForInitializer(const clang::VarDecl &amp; D)'/>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='444' u='c' c='_ZL20tryCaptureAsConstantRN5clang7CodeGen13CodeGenModuleEPNS0_15CodeGenFunctionEPKNS_7VarDeclE'/>
<doc f='llvm/clang/lib/CodeGen/ConstantEmitter.h' l='80'>// All of the &quot;abstract&quot; emission methods below permit the emission to
  // be immediately discarded without finalizing anything.  Therefore, they
  // must also promise not to do anything that will, in the future, require
  // finalization:
  //
  //   - using the CGF (if present) for anything other than establishing
  //     semantic context; for example, an expression with ignored
  //     side-effects must not be emitted as an abstract expression
  //
  //   - doing anything that would not be safe to duplicate within an
  //     initializer or to propagate to another context; for example,
  //     side effects, or emitting an initialization that requires a
  //     reference to its current location.

  /// Try to emit the initializer of the given declaration as an abstract
  /// constant.</doc>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1826' u='c' c='_ZN5clang7CodeGen15CodeGenFunction15EmitAutoVarInitERKNS1_15AutoVarEmissionE'/>
<def f='llvm/clang/lib/CodeGen/CGExprConstant.cpp' l='1197' ll='1202' type='llvm::Constant * clang::CodeGen::ConstantEmitter::tryEmitAbstractForInitializer(const clang::VarDecl &amp; D)'/>
