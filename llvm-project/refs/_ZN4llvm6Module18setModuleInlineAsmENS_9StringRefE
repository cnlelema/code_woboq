<def f='llvm/llvm/include/llvm/IR/Module.h' l='287' ll='291' type='void llvm::Module::setModuleInlineAsm(llvm::StringRef Asm)'/>
<doc f='llvm/llvm/include/llvm/IR/Module.h' l='285'>/// Set the module-scope inline assembly blocks.
  /// A trailing newline is added if the input doesn&apos;t have one.</doc>
<use f='llvm/clang/lib/CodeGen/CGObjCMac.cpp' l='5603' u='c' c='_ZN12_GLOBAL__N_19CGObjCMac12FinishModuleEv'/>
<use f='llvm/llvm/lib/Bitcode/Reader/BitcodeReader.cpp' l='3392' u='c' c='_ZN12_GLOBAL__N_113BitcodeReader11parseModuleEmb'/>
<use f='llvm/llvm/lib/IR/Core.cpp' l='420' u='c' c='LLVMSetModuleInlineAsm2'/>
<use f='llvm/llvm/lib/IR/Core.cpp' l='424' u='c' c='LLVMSetModuleInlineAsm'/>
<use f='llvm/llvm/lib/Linker/IRMover.cpp' l='1398' u='c' c='_ZN12_GLOBAL__N_18IRLinker3runEv'/>
<use f='llvm/llvm/lib/Linker/IRMover.cpp' l='1400' u='c' c='_ZN12_GLOBAL__N_18IRLinker3runEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/ExtractGV.cpp' l='73' u='c' c='_ZN12_GLOBAL__N_115GVExtractorPass11runOnModuleERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='277' u='c' c='_ZN12_GLOBAL__N_127splitAndWriteThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp' l='640' u='c' c='_ZN12_GLOBAL__N_117DataFlowSanitizer19addGlobalNamePrefixEPN4llvm11GlobalValueE'/>
<use f='llvm/llvm/lib/Transforms/Utils/CloneModule.cpp' l='55' u='c' c='_ZN4llvm11CloneModuleERKNS_6ModuleERNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS6_NS_3sys10SmartMutexILb0EEEEEEENS_12function_re13376940'/>
<use f='llvm/llvm/lib/Transforms/Utils/SplitModule.cpp' l='281' u='c' c='_ZN4llvm11SplitModuleESt10unique_ptrINS_6ModuleESt14default_deleteIS1_EEjNS_12function_refIFvS4_EEEb'/>
