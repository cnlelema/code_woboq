<dec f='llvm/clang/include/clang/Basic/Diagnostic.h' l='878' type='void clang::DiagnosticsEngine::SetDelayedDiagnostic(unsigned int DiagID, llvm::StringRef Arg1 = &quot;&quot;, llvm::StringRef Arg2 = &quot;&quot;)'/>
<doc f='llvm/clang/include/clang/Basic/Diagnostic.h' l='857'>/// Set the &quot;delayed&quot; diagnostic that will be emitted once
  /// the current diagnostic completes.
  ///
  ///  If a diagnostic is already in-flight but the front end must
  ///  report a problem (e.g., with an inconsistent file system
  ///  state), this routine sets a &quot;delayed&quot; diagnostic that will be
  ///  emitted after the current diagnostic completes. This should
  ///  only be used for fatal errors detected at inconvenient
  ///  times. If emitting a delayed diagnostic causes a second delayed
  ///  diagnostic to be introduced, that second delayed diagnostic
  ///  will be ignored.
  ///
  /// \param DiagID The ID of the diagnostic being delayed.
  ///
  /// \param Arg1 A string argument that will be provided to the
  /// diagnostic. A copy of this string will be stored in the
  /// DiagnosticsEngine object itself.
  ///
  /// \param Arg2 A string argument that will be provided to the
  /// diagnostic. A copy of this string will be stored in the
  /// DiagnosticsEngine object itself.</doc>
<def f='llvm/clang/lib/Basic/Diagnostic.cpp' l='147' ll='155' type='void clang::DiagnosticsEngine::SetDelayedDiagnostic(unsigned int DiagID, llvm::StringRef Arg1 = &quot;&quot;, llvm::StringRef Arg2 = &quot;&quot;)'/>
<use f='llvm/clang/lib/Serialization/ASTReader.cpp' l='1217' u='c' c='_ZNK5clang9ASTReader5ErrorEjN4llvm9StringRefES2_'/>
