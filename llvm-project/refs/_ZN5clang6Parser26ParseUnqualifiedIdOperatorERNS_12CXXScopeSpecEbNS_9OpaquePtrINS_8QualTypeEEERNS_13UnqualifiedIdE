<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2825' type='bool clang::Parser::ParseUnqualifiedIdOperator(clang::CXXScopeSpec &amp; SS, bool EnteringContext, ParsedType ObjectType, clang::UnqualifiedId &amp; Result)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='292' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbPbbPPNS_14IdentifierInfoEb'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2378' ll='2575' type='bool clang::Parser::ParseUnqualifiedIdOperator(clang::CXXScopeSpec &amp; SS, bool EnteringContext, ParsedType ObjectType, clang::UnqualifiedId &amp; Result)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2737' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2338'>/// Parse an operator-function-id or conversion-function-id as part
/// of a C++ unqualified-id.
///
/// This routine is responsible only for parsing the operator-function-id or
/// conversion-function-id; it does not handle template arguments in any way.
///
/// \code
///       operator-function-id: [C++ 13.5]
///         &apos;operator&apos; operator
///
///       operator: one of
///            new   delete  new[]   delete[]
///            +     -    *  /    %  ^    &amp;   |   ~
///            !     =    &lt;  &gt;    += -=   *=  /=  %=
///            ^=    &amp;=   |= &lt;&lt;   &gt;&gt; &gt;&gt;= &lt;&lt;=  ==  !=
///            &lt;=    &gt;=   &amp;&amp; ||   ++ --   ,   -&gt;* -&gt;
///            ()    []   &lt;=&gt;
///
///       conversion-function-id: [C++ 12.3.2]
///         operator conversion-type-id
///
///       conversion-type-id:
///         type-specifier-seq conversion-declarator[opt]
///
///       conversion-declarator:
///         ptr-operator conversion-declarator[opt]
/// \endcode
///
/// \param SS The nested-name-specifier that preceded this unqualified-id. If
/// non-empty, then we are parsing the unqualified-id of a qualified-id.
///
/// \param EnteringContext whether we are entering the scope of the
/// nested-name-specifier.
///
/// \param ObjectType if this unqualified-id occurs within a member access
/// expression, the type of the base object whose member is being accessed.
///
/// \param Result on a successful parse, contains the parsed unqualified-id.
///
/// \returns true if parsing fails, false otherwise.</doc>
