<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='346' type='bool llvm::cannotBeMaxInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE, bool Signed)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='345'>/// Returns true if \p S is defined and never is equal to signed/unsigned max.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='957' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionEPNS1_21BranchProbabilityInfoERNS1_4LoopERPKc'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp' l='961' u='c' c='_ZN12_GLOBAL__N_113LoopStructure18parseLoopStructureERN4llvm15ScalarEvolutionEPNS1_21BranchProbabilityInfoERNS1_4LoopERPKc'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='959' ll='968' type='bool llvm::cannotBeMaxInLoop(const llvm::SCEV * S, const llvm::Loop * L, llvm::ScalarEvolution &amp; SE, bool Signed)'/>
