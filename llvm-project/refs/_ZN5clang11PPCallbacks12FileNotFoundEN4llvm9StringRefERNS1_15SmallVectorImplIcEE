<def f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='77' ll='80' type='bool clang::PPCallbacks::FileNotFound(llvm::StringRef FileName, SmallVectorImpl&lt;char&gt; &amp; RecoveryPath)'/>
<ovr f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='378' c='_ZN5clang18PPChainedCallbacks12FileNotFoundEN4llvm9StringRefERNS1_15SmallVectorImplIcEE'/>
<use f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='380' u='c' c='_ZN5clang18PPChainedCallbacks12FileNotFoundEN4llvm9StringRefERNS1_15SmallVectorImplIcEE'/>
<use f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='381' u='c' c='_ZN5clang18PPChainedCallbacks12FileNotFoundEN4llvm9StringRefERNS1_15SmallVectorImplIcEE'/>
<doc f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='65'>/// Callback invoked whenever an inclusion directive results in a
  /// file-not-found error.
  ///
  /// \param FileName The name of the file being included, as written in the
  /// source code.
  ///
  /// \param RecoveryPath If this client indicates that it can recover from
  /// this missing file, the client should set this as an additional header
  /// search patch.
  ///
  /// \returns true to indicate that the preprocessor should attempt to recover
  /// by adding \p RecoveryPath as a header search path.</doc>
<use f='llvm/clang/lib/Lex/PPDirectives.cpp' l='1766' u='c' c='_ZN5clang12Preprocessor27HandleHeaderIncludeOrImportENS_14SourceLocationERNS_5TokenES3_S1_PKNS_15DirectoryLookupEPKNS_9FileEntryE'/>
