<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h' l='184' type='llvm::LegalizerHelper::LegalizeResult llvm::LegalizerHelper::fewerElementsVectorMultiEltType(llvm::MachineInstr &amp; MI, unsigned int TypeIdx, llvm::LLT NarrowTy)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h' l='181'>/// Legalize a instruction with a vector type where each operand may have a
  /// different element type. All type indexes must have the same number of
  /// elements.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='1751' ll='1835' type='LegalizerHelper::LegalizeResult llvm::LegalizerHelper::fewerElementsVectorMultiEltType(llvm::MachineInstr &amp; MI, unsigned int TypeIdx, llvm::LLT NarrowTyArg)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='2236' u='c' c='_ZN4llvm15LegalizerHelper19fewerElementsVectorERNS_12MachineInstrEjNS_3LLTE'/>
<doc f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='1739'>// Handle splitting vector operations which need to have the same number of
// elements in each type index, but each type index may have a different element
// type.
//
// e.g.  &lt;4 x s64&gt; = G_SHL &lt;4 x s64&gt;, &lt;4 x s32&gt; -&gt;
//       &lt;2 x s64&gt; = G_SHL &lt;2 x s64&gt;, &lt;2 x s32&gt;
//       &lt;2 x s64&gt; = G_SHL &lt;2 x s64&gt;, &lt;2 x s32&gt;
//
// Also handles some irregular breakdown cases, e.g.
// e.g.  &lt;3 x s64&gt; = G_SHL &lt;3 x s64&gt;, &lt;3 x s32&gt; -&gt;
//       &lt;2 x s64&gt; = G_SHL &lt;2 x s64&gt;, &lt;2 x s32&gt;
//             s64 = G_SHL s64, s32</doc>
