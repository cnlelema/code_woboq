<dec f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='310' type='bool llvm::TypeInfer::EnforceVectorEltTypeIs(llvm::TypeSetByHwMode &amp; Vec, llvm::TypeSetByHwMode &amp; Elem)'/>
<def f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='555' ll='593' type='bool llvm::TypeInfer::EnforceVectorEltTypeIs(llvm::TypeSetByHwMode &amp; Vec, llvm::TypeSetByHwMode &amp; Elem)'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='599' u='c' c='_ZN4llvm9TypeInfer22EnforceVectorEltTypeIsERNS_15TypeSetByHwModeERKNS_17ValueTypeByHwModeE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1541' u='c' c='_ZNK4llvm16SDTypeConstraint19ApplyTypeConstraintEPNS_15TreePatternNodeERKNS_10SDNodeInfoERNS_11TreePatternE'/>
<doc f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='551'>/// 1. Ensure that for each type T in Vec, T is a vector type, and that
///    for each type U in Elem, U is a scalar type.
/// 2. Ensure that for each (scalar) type U in Elem, there exists a (vector)
///    type T in Vec, such that U is the element type of T.</doc>
<doc f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='306'>/// 1. Ensure that for each type T in \p Vec, T is a vector type, and that
  ///    for each type U in \p Elem, U is a scalar type.
  /// 2. Ensure that for each (scalar) type U in \p Elem, there exists a
  ///    (vector) type T in \p Vec, such that U is the element type of T.</doc>
