<def f='llvm/llvm/include/llvm/MC/MCContext.h' l='698' ll='701' type='void * operator new(size_t Bytes, llvm::MCContext &amp; C, size_t Alignment = 8)'/>
<doc f='llvm/llvm/include/llvm/MC/MCContext.h' l='674'>// operator new and delete aren&apos;t allowed inside namespaces.
// The throw specifications are mandated by the standard.
/// Placement new for using the MCContext&apos;s allocator.
///
/// This placement form of operator new uses the MCContext&apos;s allocator for
/// obtaining memory. It is a non-throwing new, which means that it returns
/// null on error. (If that is what the allocator does. The current does, so if
/// this ever changes, this operator will have to be changed, too.)
/// Usage looks like this (assuming there&apos;s an MCContext &apos;Context&apos; in scope):
/// \code
/// // Default alignment (8)
/// IntegerLiteral *Ex = new (Context) IntegerLiteral(arguments);
/// // Specific alignment
/// IntegerLiteral *Ex2 = new (Context, 4) IntegerLiteral(arguments);
/// \endcode
/// Please note that you cannot use delete on the pointer; it must be
/// deallocated using an explicit destructor call followed by
/// \c Context.Deallocate(Ptr).
///
/// \param Bytes The number of bytes to allocate. Calculated by the compiler.
/// \param C The MCContext that provides the allocator.
/// \param Alignment The alignment of the allocated memory (if the underlying
///                  allocator supports it).
/// \return The allocated memory. Could be NULL.</doc>
