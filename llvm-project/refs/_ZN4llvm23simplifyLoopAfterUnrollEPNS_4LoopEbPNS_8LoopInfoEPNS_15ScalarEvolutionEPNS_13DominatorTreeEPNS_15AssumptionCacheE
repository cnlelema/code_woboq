<dec f='llvm/llvm/include/llvm/Transforms/Utils/UnrollLoop.h' l='124' type='void llvm::simplifyLoopAfterUnroll(llvm::Loop * L, bool SimplifyIVs, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE, llvm::DominatorTree * DT, llvm::AssumptionCache * AC)'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='197' ll='233' type='void llvm::simplifyLoopAfterUnroll(llvm::Loop * L, bool SimplifyIVs, llvm::LoopInfo * LI, llvm::ScalarEvolution * SE, llvm::DominatorTree * DT, llvm::AssumptionCache * AC)'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='780' u='c' c='_ZN4llvm10UnrollLoopEPNS_4LoopENS_17UnrollLoopOptionsEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPNS_25OptimizationRemarkEmitterEbPS1_'/>
<doc f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='194'>/// Perform some cleanup and simplifications on loops after unrolling. It is
/// useful to simplify the IV&apos;s in the new loop, as well as do a quick
/// simplify/dce pass of the instructions.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='562' u='c' c='_ZN4llvm16UnrollAndJamLoopEPNS_4LoopEjjjbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPNS_25OptimizationRemarkEmitterEPS1_'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollAndJam.cpp' l='563' u='c' c='_ZN4llvm16UnrollAndJamLoopEPNS_4LoopEjjjbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPNS_25OptimizationRemarkEmitterEPS1_'/>
