<dec f='llvm/llvm/include/llvm/Analysis/CallGraph.h' l='95' type='void llvm::CallGraph::spliceFunction(const llvm::Function * From, const llvm::Function * To)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CallGraph.h' l='90'>/// Replace the function represented by this node by another.
  ///
  /// This does not rescan the body of the function, so it is suitable when
  /// splicing the body of one function to another while also updating all
  /// callers from the old function to the new.</doc>
<def f='llvm/llvm/lib/Analysis/CallGraph.cpp' l='134' ll='142' type='void llvm::CallGraph::spliceFunction(const llvm::Function * From, const llvm::Function * To)'/>
<doc f='llvm/llvm/lib/Analysis/CallGraph.cpp' l='130'>/// spliceFunction - Replace the function represented by this node by another.
/// This does not rescan the body of the function, so it is suitable when
/// splicing the body of the old function to the new while also updating all
/// callers from old to new.</doc>
