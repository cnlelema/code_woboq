<dec f='llvm/llvm/include/llvm/MC/MCExpr.h' l='119' type='bool llvm::MCExpr::evaluateAsValue(llvm::MCValue &amp; Res, const llvm::MCAsmLayout &amp; Layout) const'/>
<doc f='llvm/llvm/include/llvm/MC/MCExpr.h' l='114'>/// Try to evaluate the expression to the form (a - b + constant) where
  /// neither a nor b are variables.
  ///
  /// This is a more aggressive variant of evaluateAsRelocatable. The intended
  /// use is for when relocations are not available, like the .size directive.</doc>
<use f='llvm/llvm/lib/MC/MCAssembler.cpp' l='346' u='c' c='_ZNK4llvm11MCAssembler19computeFragmentSizeERKNS_11MCAsmLayoutERKNS_10MCFragmentE'/>
<def f='llvm/llvm/lib/MC/MCExpr.cpp' l='663' ll='667' type='bool llvm::MCExpr::evaluateAsValue(llvm::MCValue &amp; Res, const llvm::MCAsmLayout &amp; Layout) const'/>
<use f='llvm/llvm/lib/MC/MCFragment.cpp' l='103' u='c' c='_ZL19getSymbolOffsetImplRKN4llvm11MCAsmLayoutERKNS_8MCSymbolEbRm'/>
<use f='llvm/llvm/lib/MC/MCFragment.cpp' l='145' u='c' c='_ZNK4llvm11MCAsmLayout13getBaseSymbolERKNS_8MCSymbolE'/>
