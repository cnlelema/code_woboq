<dec f='llvm/clang/include/clang/AST/Expr.h' l='1691' type='static clang::StringLiteral * clang::StringLiteral::Create(const clang::ASTContext &amp; Ctx, llvm::StringRef Str, clang::StringLiteral::StringKind Kind, bool Pascal, clang::QualType Ty, const clang::SourceLocation * Loc, unsigned int NumConcatenated)'/>
<use f='llvm/clang/include/clang/AST/Expr.h' l='1700' u='c' c='_ZN5clang13StringLiteral6CreateERKNS_10ASTContextEN4llvm9StringRefENS0_10StringKindEbNS_8QualTypeENS_14SourceLocationE'/>
<doc f='llvm/clang/include/clang/AST/Expr.h' l='1689'>/// This is the &quot;fully general&quot; constructor that allows representation of
  /// strings formed from multiple concatenated tokens.</doc>
<use f='llvm/clang/lib/AST/ASTImporter.cpp' l='6312' u='c' c='_ZN5clang15ASTNodeImporter18VisitStringLiteralEPNS_13StringLiteralE'/>
<def f='llvm/clang/lib/AST/Expr.cpp' l='983' ll='992' type='static clang::StringLiteral * clang::StringLiteral::Create(const clang::ASTContext &amp; Ctx, llvm::StringRef Str, clang::StringLiteral::StringKind Kind, bool Pascal, clang::QualType Ty, const clang::SourceLocation * Loc, unsigned int NumConcatenated)'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='1704' u='c' c='_ZN5clang4Sema18ActOnStringLiteralEN4llvm8ArrayRefINS_5TokenEEEPNS_5ScopeE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='3484' u='c' c='_ZN5clang4Sema20ActOnNumericConstantERKNS_5TokenEPNS_5ScopeE'/>
<use f='llvm/clang/lib/Sema/SemaExprObjC.cpp' l='72' u='c' c='_ZN5clang4Sema22ParseObjCStringLiteralEPNS_14SourceLocationEN4llvm8ArrayRefIPNS_4ExprEEE'/>
