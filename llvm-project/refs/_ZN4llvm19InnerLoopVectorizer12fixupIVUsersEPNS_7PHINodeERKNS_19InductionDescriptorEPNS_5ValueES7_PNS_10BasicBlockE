<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='478' type='void llvm::InnerLoopVectorizer::fixupIVUsers(llvm::PHINode * OrigPhi, const llvm::InductionDescriptor &amp; II, llvm::Value * CountRoundDown, llvm::Value * EndValue, llvm::BasicBlock * MiddleBlock)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2962' ll='3021' type='void llvm::InnerLoopVectorizer::fixupIVUsers(llvm::PHINode * OrigPhi, const llvm::InductionDescriptor &amp; II, llvm::Value * CountRoundDown, llvm::Value * EndValue, llvm::BasicBlock * MiddleBlock)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='3302' u='c' c='_ZN4llvm19InnerLoopVectorizer17fixVectorizedLoopEv'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='477'>/// Set up the values of the IVs correctly when exiting the vector loop.</doc>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2958'>// Fix up external users of the induction variable. At this point, we are
// in LCSSA form, with all external PHIs that use the IV having one input value,
// coming from the remainder loop. We need those PHIs to also have a correct
// value for the IV when arriving directly from the middle block.</doc>
