<def f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='146' ll='148' type='const uint32_t * llvm::TargetRegisterClass::getSubClassMask() const'/>
<use f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='1039' u='c' c='_ZN4llvm21SuperRegClassIteratorC1EPKNS_19TargetRegisterClassEPKNS_18TargetRegisterInfoEb'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='130'>/// Returns a bit vector of subclasses, including this one.
  /// The vector is indexed by class IDs.
  ///
  /// To use it, consider the returned array as a chunk of memory that
  /// contains an array of bits of size NumRegClasses. Each 32-bit chunk
  /// contains a bitset of the ID of the subclasses in big-endian style.

  /// I.e., the representation of the memory from left to right at the
  /// bit level looks like:
  /// [31 30 ... 1 0] [ 63 62 ... 33 32] ...
  ///                     [ XXX NumRegClasses NumRegClasses - 1 ... ]
  /// Where the number represents the class ID and XXX bits that
  /// should be ignored.
  ///
  /// See the implementation of hasSubClassEq for an example of how it
  /// can be used.</doc>
<use f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='178' u='c' c='_ZNK4llvm18TargetRegisterInfo19getAllocatableClassEPKNS_19TargetRegisterClassE'/>
<use f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='267' u='c' c='_ZNK4llvm18TargetRegisterInfo17getCommonSubClassEPKNS_19TargetRegisterClassES3_NS_3MVT15SimpleValueTypeE'/>
<use f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='267' u='c' c='_ZNK4llvm18TargetRegisterInfo17getCommonSubClassEPKNS_19TargetRegisterClassES3_NS_3MVT15SimpleValueTypeE'/>
<use f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='282' u='c' c='_ZNK4llvm18TargetRegisterInfo24getMatchingSuperRegClassEPKNS_19TargetRegisterClassES3_j'/>
