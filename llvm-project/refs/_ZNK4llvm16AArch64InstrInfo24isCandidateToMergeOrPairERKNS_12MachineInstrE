<dec f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='104' type='bool llvm::AArch64InstrInfo::isCandidateToMergeOrPair(const llvm::MachineInstr &amp; MI) const'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.h' l='103'>/// Return true if this is a load/store that can be potentially paired/merged.</doc>
<def f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='1904' ll='1944' type='bool llvm::AArch64InstrInfo::isCandidateToMergeOrPair(const llvm::MachineInstr &amp; MI) const'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='2296' u='c' c='_ZNK4llvm16AArch64InstrInfo19shouldClusterMemOpsERKNS_14MachineOperandES3_j'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='2297' u='c' c='_ZNK4llvm16AArch64InstrInfo19shouldClusterMemOpsERKNS_14MachineOperandES3_j'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp' l='1902'>// Is this a candidate for ld/st merging or pairing?  For example, we don&apos;t
// touch volatiles or load/stores that have a hint to avoid pair formation.</doc>
<use f='llvm/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp' l='1568' u='c' c='_ZN12_GLOBAL__N_119AArch64LoadStoreOpt20tryToMergeZeroStInstERN4llvm26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp' l='1592' u='c' c='_ZN12_GLOBAL__N_119AArch64LoadStoreOpt17tryToPairLdStInstERN4llvm26MachineInstrBundleIteratorINS1_12MachineInstrELb0EEE'/>
