<dec f='llvm/llvm/include/llvm/Transforms/Utils/VNCoercion.h' l='49' type='llvm::Value * llvm::VNCoercion::coerceAvailableValueToLoadType(llvm::Value * StoredVal, llvm::Type * LoadedTy, IRBuilder&lt;&gt; &amp; IRB, const llvm::DataLayout &amp; DL)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/VNCoercion.h' l='43'>/// If we saw a store of a value to memory, and then a load from a must-aliased
/// pointer of a different type, try to coerce the stored value to the loaded
/// type.  LoadedTy is the type of the load we want to replace.  IRB is
/// IRBuilder used to insert new instructions.
///
/// If we can&apos;t do it, return null.</doc>
<def f='llvm/llvm/lib/Transforms/Utils/VNCoercion.cpp' l='160' ll='163' type='llvm::Value * llvm::VNCoercion::coerceAvailableValueToLoadType(llvm::Value * StoredVal, llvm::Type * LoadedTy, IRBuilder&lt;&gt; &amp; IRB, const llvm::DataLayout &amp; DL)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/VNCoercion.cpp' l='154'>/// If we saw a store of a value to memory, and
/// then a load from a must-aliased pointer of a different type, try to coerce
/// the stored value.  LoadedTy is the type of the load we want to replace.
/// IRB is IRBuilder used to insert new instructions.
///
/// If we can&apos;t do it, return null.</doc>
