<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='322' type='bool llvm::ConstantFP::isExactlyValue(const llvm::APFloat &amp; V) const'/>
<use f='llvm/llvm/include/llvm/IR/Constants.h' l='328' u='c' c='_ZNK4llvm10ConstantFP14isExactlyValueEd'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='316'>/// We don&apos;t rely on operator== working on double values, as it returns true
  /// for things that are clearly not equal, like -0.0 and 0.0.
  /// As such, this method can be used to do an exact bit-for-bit comparison of
  /// two floating point values.  The version with a double operand is retained
  /// because it&apos;s so convenient to write isExactlyValue(2.0), but please use
  /// it only for simple constants.</doc>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='833' ll='835' type='bool llvm::ConstantFP::isExactlyValue(const llvm::APFloat &amp; V) const'/>
<use f='llvm/llvm/lib/Target/SystemZ/SystemZTDC.cpp' l='141' u='c' c='_ZN12_GLOBAL__N_114SystemZTDCPass11convertFCmpERN4llvm7CmpInstE'/>
<use f='llvm/llvm/lib/Target/SystemZ/SystemZTDC.cpp' l='147' u='c' c='_ZN12_GLOBAL__N_114SystemZTDCPass11convertFCmpERN4llvm7CmpInstE'/>
