<dec f='llvm/clang/include/clang/Sema/IdentifierResolver.h' l='155' type='bool clang::IdentifierResolver::isDeclInScope(clang::Decl * D, clang::DeclContext * Ctx, clang::Scope * S = nullptr, bool AllowInlineNamespace = false) const'/>
<doc f='llvm/clang/include/clang/Sema/IdentifierResolver.h' l='145'>/// isDeclInScope - If &apos;Ctx&apos; is a function/method, isDeclInScope returns true
  /// if &apos;D&apos; is in Scope &apos;S&apos;, otherwise &apos;S&apos; is ignored and isDeclInScope returns
  /// true if &apos;D&apos; belongs to the given declaration context.
  ///
  /// \param AllowInlineNamespace If \c true, we are checking whether a prior
  ///        declaration is in scope in a declaration that requires a prior
  ///        declaration (because it is either explicitly qualified or is a
  ///        template instantiation or specialization). In this case, a
  ///        declaration is in scope if it&apos;s in the inline namespace set of the
  ///        context.</doc>
<def f='llvm/clang/lib/Sema/IdentifierResolver.cpp' l='99' ll='141' type='bool clang::IdentifierResolver::isDeclInScope(clang::Decl * D, clang::DeclContext * Ctx, clang::Scope * S = nullptr, bool AllowInlineNamespace = false) const'/>
<doc f='llvm/clang/lib/Sema/IdentifierResolver.cpp' l='96'>/// isDeclInScope - If &apos;Ctx&apos; is a function/method, isDeclInScope returns true
/// if &apos;D&apos; is in Scope &apos;S&apos;, otherwise &apos;S&apos; is ignored and isDeclInScope returns
/// true if &apos;D&apos; belongs to the given declaration context.</doc>
