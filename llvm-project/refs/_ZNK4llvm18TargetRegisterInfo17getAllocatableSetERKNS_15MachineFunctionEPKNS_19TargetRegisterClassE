<dec f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='364' type='llvm::BitVector llvm::TargetRegisterInfo::getAllocatableSet(const llvm::MachineFunction &amp; MF, const llvm::TargetRegisterClass * RC = nullptr) const'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='134' u='c' c='_ZN4llvm24AggressiveAntiDepBreakerC1ERNS_15MachineFunctionERKNS_17RegisterClassInfoERNS_15SmallVectorImplIPKNS_19TargetRegisterClassEEE'/>
<use f='llvm/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp' l='536' u='c' c='_ZN4llvm24AggressiveAntiDepBreaker18GetRenameRegistersEj'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='361'>/// Returns a bitset indexed by register number indicating if a register is
  /// allocatable or not. If a register class is specified, returns the subset
  /// for the class.</doc>
<use f='llvm/llvm/lib/CodeGen/RegisterScavenging.cpp' l='540' u='c' c='_ZN4llvm12RegScavenger16scavengeRegisterEPKNS_19TargetRegisterClassENS_26MachineInstrBundleIteratorINS_12MachineInstrELb0EEEib'/>
<def f='llvm/llvm/lib/CodeGen/TargetRegisterInfo.cpp' l='217' ll='236' type='llvm::BitVector llvm::TargetRegisterInfo::getAllocatableSet(const llvm::MachineFunction &amp; MF, const llvm::TargetRegisterClass * RC = nullptr) const'/>
<use f='llvm/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp' l='336' u='c' c='_ZL13addLiveInRegsN4llvm26MachineInstrBundleIteratorINS_12MachineInstrELb0EEERNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp' l='407' u='c' c='_ZN12_GLOBAL__N_111RegDefsUses20setUnallocatableRegsERKN4llvm15MachineFunctionE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='2111' u='c' c='_ZNK4llvm16PPCFrameLowering27assignCalleeSavedSpillSlotsERNS_15MachineFunctionEPKNS_18TargetRegisterInfoERSt6vectorINS_15CalleeSavedInfoESaIS7_EE'/>
