<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='927' type='bool llvm::DependenceInfo::tryDelinearize(llvm::Instruction * Src, llvm::Instruction * Dst, SmallVectorImpl&lt;llvm::DependenceInfo::Subscript&gt; &amp; Pair)'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3264' ll='3363' type='bool llvm::DependenceInfo::tryDelinearize(llvm::Instruction * Src, llvm::Instruction * Dst, SmallVectorImpl&lt;llvm::DependenceInfo::Subscript&gt; &amp; Pair)'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3460' u='c' c='_ZN4llvm14DependenceInfo7dependsEPNS_11InstructionES2_b'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3861' u='c' c='_ZN4llvm14DependenceInfo17getSplitIterationERKNS_10DependenceEj'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='3260'>/// Check if we can delinearize the subscripts. If the SCEVs representing the
/// source and destination array references are recurrences on a nested loop,
/// this function flattens the nested recurrences into separate recurrences
/// for each loop level.</doc>
