<def f='llvm/llvm/include/llvm/Testing/Support/Annotations.h' l='46' ll='83'/>
<size>96</size>
<doc f='llvm/llvm/include/llvm/Testing/Support/Annotations.h' l='19'>/// Annotations lets you mark points and ranges inside source code, for tests:
///
///    Annotations Example(R&quot;cpp(
///       int complete() { x.pri^ }         // ^ indicates a point
///       void err() { [[&quot;hello&quot; == 42]]; } // [[this is a range]]
///       $definition^class Foo{};          // points can be named: &quot;definition&quot;
///       $fail[[static_assert(false, &quot;&quot;)]] // ranges can be named too: &quot;fail&quot;
///    )cpp&quot;);
///
///    StringRef Code = Example.code();             // annotations stripped.
///    std::vector&lt;size_t&gt; PP = Example.points();   // all unnamed points
///    size_t P = Example.point();                  // there must be exactly one
///    llvm::Range R = Example.range(&quot;fail&quot;);       // find named ranges
///
/// Points/ranges are coordinated into `code()` which is stripped of
/// annotations.
///
/// Ranges may be nested (and points can be inside ranges), but there&apos;s no way
/// to define general overlapping ranges.
///
/// FIXME: the choice of the marking syntax makes it impossible to represent
///        some of the C++ and Objective C constructs (including common ones
///        like C++ attributes). We can fix this by:
///          1. introducing an escaping mechanism for the special characters,
///          2. making characters for marking points and ranges configurable,
///          3. changing the syntax to something less commonly used,
///          4. ...</doc>
<fun r='_ZN4llvm11AnnotationsC1ENS_9StringRefE'/>
<fun r='_ZNK4llvm11Annotations4codeEv'/>
<fun r='_ZNK4llvm11Annotations5pointENS_9StringRefE'/>
<fun r='_ZNK4llvm11Annotations6pointsENS_9StringRefE'/>
<fun r='_ZNK4llvm11Annotations5rangeENS_9StringRefE'/>
<fun r='_ZNK4llvm11Annotations6rangesENS_9StringRefE'/>
<mbr r='llvm::Annotations::Code' o='0' t='std::string'/>
<mbr r='llvm::Annotations::Points' o='256' t='llvm::StringMap&lt;llvm::SmallVector&lt;size_t, 1&gt; &gt;'/>
<mbr r='llvm::Annotations::Ranges' o='512' t='llvm::StringMap&lt;llvm::SmallVector&lt;Range, 1&gt; &gt;'/>
