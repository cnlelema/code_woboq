<dec f='llvm/llvm/lib/TableGen/TGLexer.h' l='271' type='tgtok::TokKind llvm::TGLexer::lexPreprocessor(tgtok::TokKind Kind, bool ReturnNextLiveToken = true)'/>
<doc f='llvm/llvm/lib/TableGen/TGLexer.h' l='243'>// The main &quot;exit&quot; point from the token parsing to preprocessor.
  //
  // The method is called for CurPtr, when prepIsDirective() returns
  // true.  The first parameter matches the result of prepIsDirective(),
  // denoting the actual preprocessor directive to be processed.
  //
  // If the preprocessing directive disables the tokens processing, e.g.:
  //     #ifdef NAME // NAME is undefined
  // then lexPreprocessor() enters the lines-skipping mode.
  // In this mode, it does not parse any tokens, because the code under
  // the #ifdef may not even be a correct tablegen code.  The preprocessor
  // looks for lines containing other preprocessing directives, which
  // may be prepended with whitespaces and C-style comments.  If the line
  // does not contain a preprocessing directive, it is skipped completely.
  // Otherwise, the preprocessing directive is processed by recursively
  // calling lexPreprocessor().  The processing of the encountered
  // preprocessing directives includes updating preprocessing control stack
  // and adding new macros into DefinedMacros set.
  //
  // The second parameter controls whether lexPreprocessor() is called from
  // LexToken() (true) or recursively from lexPreprocessor() (false).
  //
  // If ReturnNextLiveToken is true, the method returns the next
  // LEX token following the current directive or following the end
  // of the disabled preprocessing region corresponding to this directive.
  // If ReturnNextLiveToken is false, the method returns the first parameter,
  // unless there were errors encountered in the disabled preprocessing
  // region - in this case, it returns tgtok::Error.</doc>
<use f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='178' u='c' c='_ZN4llvm7TGLexer8LexTokenEb'/>
<def f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='672' ll='804' type='tgtok::TokKind llvm::TGLexer::lexPreprocessor(tgtok::TokKind Kind, bool ReturnNextLiveToken = true)'/>
<use f='llvm/llvm/lib/TableGen/TGLexer.cpp' l='835' u='c' c='_ZN4llvm7TGLexer14prepSkipRegionEb'/>
