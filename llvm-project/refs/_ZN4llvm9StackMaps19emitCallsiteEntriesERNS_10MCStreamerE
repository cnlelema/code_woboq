<dec f='llvm/llvm/include/llvm/CodeGen/StackMaps.h' l='329' type='void llvm::StackMaps::emitCallsiteEntries(llvm::MCStreamer &amp; OS)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/StackMaps.h' l='328'>/// Emit the callsite info for each stackmap/patchpoint intrinsic call.</doc>
<def f='llvm/llvm/lib/CodeGen/StackMaps.cpp' l='492' ll='545' type='void llvm::StackMaps::emitCallsiteEntries(llvm::MCStreamer &amp; OS)'/>
<use f='llvm/llvm/lib/CodeGen/StackMaps.cpp' l='574' u='c' c='_ZN4llvm9StackMaps26serializeToStackMapSectionEv'/>
<doc f='llvm/llvm/lib/CodeGen/StackMaps.cpp' l='463'>/// Emit the callsite info for each callsite.
///
/// StkMapRecord[NumRecords] {
///   uint64 : PatchPoint ID
///   uint32 : Instruction Offset
///   uint16 : Reserved (record flags)
///   uint16 : NumLocations
///   Location[NumLocations] {
///     uint8  : Register | Direct | Indirect | Constant | ConstantIndex
///     uint8  : Size in Bytes
///     uint16 : Dwarf RegNum
///     int32  : Offset
///   }
///   uint16 : Padding
///   uint16 : NumLiveOuts
///   LiveOuts[NumLiveOuts] {
///     uint16 : Dwarf RegNum
///     uint8  : Reserved
///     uint8  : Size in Bytes
///   }
///   uint32 : Padding (only if required to align to 8 byte)
/// }
///
/// Location Encoding, Type, Value:
///   0x1, Register, Reg                 (value in register)
///   0x2, Direct, Reg + Offset          (frame index)
///   0x3, Indirect, [Reg + Offset]      (spilled value)
///   0x4, Constant, Offset              (small constant)
///   0x5, ConstIndex, Constants[Offset] (large constant)</doc>
