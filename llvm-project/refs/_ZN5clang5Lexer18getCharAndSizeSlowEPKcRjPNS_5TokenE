<use f='llvm/clang/include/clang/Lex/Lexer.h' l='617' u='c' c='_ZN5clang5Lexer17getAndAdvanceCharERPKcRNS_5TokenE'/>
<use f='llvm/clang/include/clang/Lex/Lexer.h' l='634' u='c' c='_ZN5clang5Lexer11ConsumeCharEPKcjRNS_5TokenE'/>
<use f='llvm/clang/include/clang/Lex/Lexer.h' l='651' u='c' c='_ZN5clang5Lexer14getCharAndSizeEPKcRj'/>
<dec f='llvm/clang/include/clang/Lex/Lexer.h' l='656' type='char clang::Lexer::getCharAndSizeSlow(const char * Ptr, unsigned int &amp; Size, clang::Token * Tok = nullptr)'/>
<doc f='llvm/clang/include/clang/Lex/Lexer.h' l='654'>/// getCharAndSizeSlow - Handle the slow/uncommon case of the getCharAndSize
  /// method.</doc>
<def f='llvm/clang/lib/Lex/Lexer.cpp' l='1308' ll='1358' type='char clang::Lexer::getCharAndSizeSlow(const char * Ptr, unsigned int &amp; Size, clang::Token * Tok = nullptr)'/>
<use f='llvm/clang/lib/Lex/Lexer.cpp' l='1333' u='c' c='_ZN5clang5Lexer18getCharAndSizeSlowEPKcRjPNS_5TokenE'/>
<doc f='llvm/clang/lib/Lex/Lexer.cpp' l='1293'>/// getCharAndSizeSlow - Peek a single &apos;character&apos; from the specified buffer,
/// get its size, and return it.  This is tricky in several cases:
///   1. If currently at the start of a trigraph, we warn about the trigraph,
///      then either return the trigraph (skipping 3 chars) or the &apos;?&apos;,
///      depending on whether trigraphs are enabled or not.
///   2. If this is an escaped newline (potentially with whitespace between
///      the backslash and newline), implicitly skip the newline and return
///      the char after it.
///
/// This handles the slow/uncommon case of the getCharAndSize method.  Here we
/// know that we can accumulate into Size, and that we have already incremented
/// Ptr by Size bytes.
///
/// NOTE: When this method is updated, getCharAndSizeSlowNoWarn (below) should
/// be updated to match.</doc>
