<def f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2370' ll='2383' type='llvm::CallInst * llvm::IRBuilder::CreateAlignmentAssumption(const llvm::DataLayout &amp; DL, llvm::Value * PtrValue, unsigned int Alignment, llvm::Value * OffsetValue = nullptr, llvm::Value ** TheCheck = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/IRBuilder.h' l='2361'>/// Create an assume intrinsic call that represents an alignment
  /// assumption on the provided pointer.
  ///
  /// An optional offset can be provided, and if it is provided, the offset
  /// must be subtracted from the provided pointer to get the pointer with the
  /// specified alignment.
  ///
  /// It may be sometimes useful to do some other logic
  /// based on this alignment check, thus it can be stored into &apos;TheCheck&apos;.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.cpp' l='2095' u='c' c='_ZN5clang7CodeGen15CodeGenFunction23EmitAlignmentAssumptionEPN4llvm5ValueENS_8QualTypeENS_14SourceLocationES6_jS4_'/>
<use f='llvm/llvm/lib/Transforms/Utils/InlineFunction.cpp' l='1169' u='c' c='_ZL23AddAlignmentAssumptionsN4llvm8CallSiteERNS_18InlineFunctionInfoE'/>
