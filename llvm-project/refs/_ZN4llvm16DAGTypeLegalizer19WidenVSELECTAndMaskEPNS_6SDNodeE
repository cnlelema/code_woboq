<dec f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='825' type='llvm::SDValue llvm::DAGTypeLegalizer::WidenVSELECTAndMask(llvm::SDNode * N)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp' l='1366' u='c' c='_ZN4llvm16DAGTypeLegalizer19PromoteIntOp_SELECTEPNS_6SDNodeEj'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp' l='537' u='c' c='_ZN4llvm16DAGTypeLegalizer15SplitRes_SELECTEPNS_6SDNodeERNS_7SDValueES4_'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp' l='3817' ll='3921' type='llvm::SDValue llvm::DAGTypeLegalizer::WidenVSELECTAndMask(llvm::SDNode * N)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp' l='3930' u='c' c='_ZN4llvm16DAGTypeLegalizer18WidenVecRes_SELECTEPNS_6SDNodeE'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp' l='3813'>// This method tries to handle VSELECT and its mask by legalizing operands
// (which may require widening) and if needed adjusting the mask vector type
// to match that of the VSELECT. Without it, many cases end up with
// scalarization of the SETCC, with many unnecessary instructions.</doc>
