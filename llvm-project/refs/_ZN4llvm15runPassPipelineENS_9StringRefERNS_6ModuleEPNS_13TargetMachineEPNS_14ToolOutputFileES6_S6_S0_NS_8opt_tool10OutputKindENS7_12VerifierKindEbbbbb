<dec f='llvm/llvm/tools/opt/NewPMDriver.h' l='60' type='bool llvm::runPassPipeline(llvm::StringRef Arg0, llvm::Module &amp; M, llvm::TargetMachine * TM, llvm::ToolOutputFile * Out, llvm::ToolOutputFile * ThinLinkOut, llvm::ToolOutputFile * OptRemarkFile, llvm::StringRef PassPipeline, opt_tool::OutputKind OK, opt_tool::VerifierKind VK, bool ShouldPreserveAssemblyUseListOrder, bool ShouldPreserveBitcodeUseListOrder, bool EmitSummaryIndex, bool EmitModuleHash, bool EnableDebugify)'/>
<def f='llvm/llvm/tools/opt/NewPMDriver.cpp' l='211' ll='372' type='bool llvm::runPassPipeline(llvm::StringRef Arg0, llvm::Module &amp; M, llvm::TargetMachine * TM, llvm::ToolOutputFile * Out, llvm::ToolOutputFile * ThinLTOLinkOut, llvm::ToolOutputFile * OptRemarkFile, llvm::StringRef PassPipeline, llvm::opt_tool::OutputKind OK, llvm::opt_tool::VerifierKind VK, bool ShouldPreserveAssemblyUseListOrder, bool ShouldPreserveBitcodeUseListOrder, bool EmitSummaryIndex, bool EmitModuleHash, bool EnableDebugify)'/>
<doc f='llvm/llvm/tools/opt/NewPMDriver.h' l='51'>/// Driver function to run the new pass manager over a module.
///
/// This function only exists factored away from opt.cpp in order to prevent
/// inclusion of the new pass manager headers and the old headers into the same
/// file. It&apos;s interface is consequentially somewhat ad-hoc, but will go away
/// when the transition finishes.
///
/// ThinLTOLinkOut is only used when OK is OK_OutputThinLTOBitcode, and can be
/// nullptr.</doc>
<use f='llvm/llvm/tools/opt/opt.cpp' l='693' u='c' c='main'/>
