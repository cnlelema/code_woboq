<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='785' type='static llvm::Constant * llvm::ConstantDataVector::getFP(llvm::LLVMContext &amp; Context, ArrayRef&lt;uint16_t&gt; Elts)'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='780'>/// getFP() constructors - Return a constant with vector type with an element
  /// count and element type of float with the precision matching the number of
  /// bits in the ArrayRef passed in.  (i.e. half for 16bits, float for 32bits,
  /// double for 64bits) Note that this can return a ConstantAggregateZero
  /// object.</doc>
<use f='llvm/llvm/lib/Bitcode/Reader/BitcodeReader.cpp' l='2348' u='c' c='_ZN12_GLOBAL__N_113BitcodeReader14parseConstantsEv'/>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='2638' ll='2643' type='static llvm::Constant * llvm::ConstantDataVector::getFP(llvm::LLVMContext &amp; Context, ArrayRef&lt;uint16_t&gt; Elts)'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='2682' u='c' c='_ZN4llvm18ConstantDataVector8getSplatEjPNS_8ConstantE'/>
<doc f='llvm/llvm/lib/IR/Constants.cpp' l='2633'>/// getFP() constructors - Return a constant with vector type with an element
/// count and element type of float with the precision matching the number of
/// bits in the ArrayRef passed in.  (i.e. half for 16bits, float for 32bits,
/// double for 64bits) Note that this can return a ConstantAggregateZero
/// object.</doc>
