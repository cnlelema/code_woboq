<dec f='llvm/llvm/include/llvm/Support/FileSystem.h' l='951' type='Expected&lt;file_t&gt; llvm::sys::fs::openNativeFile(const llvm::Twine &amp; Name, llvm::sys::fs::CreationDisposition Disp, llvm::sys::fs::FileAccess Access, llvm::sys::fs::OpenFlags Flags, unsigned int Mode = 438)'/>
<use f='llvm/llvm/include/llvm/Support/FileSystem.h' l='994' u='c' c='_ZN4llvm3sys2fs22openNativeFileForWriteERKNS_5TwineENS1_19CreationDispositionENS1_9OpenFlagsEj'/>
<use f='llvm/llvm/include/llvm/Support/FileSystem.h' l='1036' u='c' c='_ZN4llvm3sys2fs26openNativeFileForReadWriteERKNS_5TwineENS1_19CreationDispositionENS1_9OpenFlagsEj'/>
<doc f='llvm/llvm/include/llvm/Support/FileSystem.h' l='937'>/// @brief Opens a file with the specified creation disposition, access mode,
/// and flags and returns a platform-specific file object.
///
/// The caller is responsible for closing the file object once they are
/// finished with it.
///
/// @param Name The path of the file to open, relative or absolute.
/// @param Disp Value specifying the existing-file behavior.
/// @param Access Value specifying whether to open the file in read, write, or
///               read-write mode.
/// @param Flags Additional flags.
/// @param Mode The access permissions of the file, represented in octal.
/// @returns errc::success if \a Name has been opened, otherwise a
///          platform-specific error_code.</doc>
<def f='llvm/llvm/lib/Support/Unix/Path.inc' l='920' ll='929' type='Expected&lt;int&gt; llvm::sys::fs::openNativeFile(const llvm::Twine &amp; Name, llvm::sys::fs::CreationDisposition Disp, llvm::sys::fs::FileAccess Access, llvm::sys::fs::OpenFlags Flags, unsigned int Mode = 438)'/>
