<dec f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-matchers.h' l='332' type='void testing::Matcher::Matcher&lt;T&gt;(T value)'/>
<def f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-matchers.h' l='3762' ll='3763' type='void testing::Matcher::Matcher&lt;T&gt;(T value)'/>
<doc f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-matchers.h' l='330'>// Implicit constructor here allows people to write
  // EXPECT_CALL(foo, Bar(5)) instead of EXPECT_CALL(foo, Bar(Eq(5))) sometimes</doc>
<doc f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-matchers.h' l='332'>// NOLINT</doc>
<doc f='llvm/llvm/utils/unittest/googlemock/include/gmock/gmock-matchers.h' l='3760'>// Constructs a Matcher&lt;T&gt; from a &apos;value&apos; of type T.  The constructed
// matcher matches any value that&apos;s equal to &apos;value&apos;.</doc>
