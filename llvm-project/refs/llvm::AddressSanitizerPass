<inh f='llvm/llvm/include/llvm/IR/PassManager.h' l='372' c='llvm::PassInfoMixin'/>
<def f='llvm/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h' l='99' ll='110'/>
<size>3</size>
<doc f='llvm/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h' l='92'>/// Public interface to the address sanitizer pass for instrumenting code to
/// check for various memory errors at runtime.
///
/// The sanitizer itself is a function pass that works by inserting various
/// calls to the ASan runtime library functions. The runtime library essentially
/// replaces malloc() and free() with custom implementations that allow regions
/// surrounding requested memory to be checked for invalid accesses.</doc>
<fun r='_ZN4llvm20AddressSanitizerPassC1Ebbb'/>
<fun r='_ZN4llvm20AddressSanitizerPass3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<mbr r='llvm::AddressSanitizerPass::CompileKernel' o='0' t='bool'/>
<mbr r='llvm::AddressSanitizerPass::Recover' o='8' t='bool'/>
<mbr r='llvm::AddressSanitizerPass::UseAfterScope' o='16' t='bool'/>
