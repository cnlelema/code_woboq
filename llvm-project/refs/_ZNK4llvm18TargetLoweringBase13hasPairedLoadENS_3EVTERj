<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2429' ll='2432' type='bool llvm::TargetLoweringBase::hasPairedLoad(llvm::EVT , unsigned int &amp; ) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2408'>/// Return true if the target supplies and combines to a paired load
  /// two loaded values of type LoadedType next to each other in memory.
  /// RequiredAlignment gives the minimal alignment constraints that must be met
  /// to be able to select this paired load.
  ///
  /// This information is *not* used to generate actual paired loads, but it is
  /// used to generate a sequence of loads that is easier to combine into a
  /// paired load.
  /// For instance, something like this:
  /// a = load i64* addr
  /// b = trunc i64 a to i32
  /// c = lshr i64 a, 32
  /// d = trunc i64 c to i32
  /// will be optimized into:
  /// b = load i32* addr1
  /// d = load i32* addr2
  /// Where addr1 = addr2 +/- sizeof(i32).
  ///
  /// In other words, unless the target performs a post-isel load combining,
  /// this information should not be provided because it will generate more
  /// loads.</doc>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2429'>/*LoadedType*/</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='14404' u='c' c='_ZL20adjustCostForPairingRN4llvm15SmallVectorImplIN12_GLOBAL__N_111LoadedSliceEEERNS2_4CostE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='15647' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner22MergeConsecutiveStoresEPN4llvm11StoreSDNodeE'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='8403' c='_ZNK4llvm21AArch64TargetLowering13hasPairedLoadENS_3EVTERj'/>
