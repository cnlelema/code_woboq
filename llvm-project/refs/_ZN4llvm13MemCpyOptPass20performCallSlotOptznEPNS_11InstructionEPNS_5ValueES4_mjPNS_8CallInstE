<dec f='llvm/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h' l='64' type='bool llvm::MemCpyOptPass::performCallSlotOptzn(llvm::Instruction * cpy, llvm::Value * cpyDst, llvm::Value * cpySrc, uint64_t cpyLen, unsigned int cpyAlign, llvm::CallInst * C)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='733' u='c' c='_ZN4llvm13MemCpyOptPass12processStoreEPNS_9StoreInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb1ELb0EvEELb0ELb0EEE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='807' ll='1008' type='bool llvm::MemCpyOptPass::performCallSlotOptzn(llvm::Instruction * cpy, llvm::Value * cpyDest, llvm::Value * cpySrc, uint64_t cpyLen, unsigned int cpyAlign, llvm::CallInst * C)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='1272' u='c' c='_ZN4llvm13MemCpyOptPass13processMemCpyEPNS_10MemCpyInstE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='804'>/// Takes a memcpy and a call that it depends on,
/// and checks for the possibility of a call slot optimization by having
/// the call write its result directly into the destination of the memcpy.</doc>
