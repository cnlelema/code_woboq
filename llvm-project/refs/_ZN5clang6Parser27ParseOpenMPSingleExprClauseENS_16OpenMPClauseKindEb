<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2890' type='clang::OMPClause * clang::Parser::ParseOpenMPSingleExprClause(clang::OpenMPClauseKind Kind, bool ParseOnly)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='2884'>/// Parses clause with a single expression of a kind \a Kind.
  ///
  /// \param Kind Kind of current clause.
  /// \param ParseOnly true to skip the clause&apos;s semantic actions and return
  /// nullptr.
  ///</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1627' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseENS_19OpenMPDirectiveKindENS_16OpenMPClauseKindEb'/>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1788' ll='1802' type='clang::OMPClause * clang::Parser::ParseOpenMPSingleExprClause(clang::OpenMPClauseKind Kind, bool ParseOnly)'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1754'>/// Parsing of OpenMP clauses with single expressions like &apos;final&apos;,
/// &apos;collapse&apos;, &apos;safelen&apos;, &apos;num_threads&apos;, &apos;simdlen&apos;, &apos;num_teams&apos;,
/// &apos;thread_limit&apos;, &apos;simdlen&apos;, &apos;priority&apos;, &apos;grainsize&apos;, &apos;num_tasks&apos; or &apos;hint&apos;.
///
///    final-clause:
///      &apos;final&apos; &apos;(&apos; expression &apos;)&apos;
///
///    num_threads-clause:
///      &apos;num_threads&apos; &apos;(&apos; expression &apos;)&apos;
///
///    safelen-clause:
///      &apos;safelen&apos; &apos;(&apos; expression &apos;)&apos;
///
///    simdlen-clause:
///      &apos;simdlen&apos; &apos;(&apos; expression &apos;)&apos;
///
///    collapse-clause:
///      &apos;collapse&apos; &apos;(&apos; expression &apos;)&apos;
///
///    priority-clause:
///      &apos;priority&apos; &apos;(&apos; expression &apos;)&apos;
///
///    grainsize-clause:
///      &apos;grainsize&apos; &apos;(&apos; expression &apos;)&apos;
///
///    num_tasks-clause:
///      &apos;num_tasks&apos; &apos;(&apos; expression &apos;)&apos;
///
///    hint-clause:
///      &apos;hint&apos; &apos;(&apos; expression &apos;)&apos;
///
///    allocator-clause:
///      &apos;allocator&apos; &apos;(&apos; expression &apos;)&apos;
///</doc>
