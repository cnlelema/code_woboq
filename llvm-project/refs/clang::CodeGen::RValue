<def f='llvm/clang/lib/CodeGen/CGValue.h' l='38' ll='124'/>
<size>16</size>
<doc f='llvm/clang/lib/CodeGen/CGValue.h' l='34'>/// RValue - This trivial value class is used to represent the result of an
/// expression that is evaluated.  It can be one of three things: either a
/// simple LLVM SSA value, a pair of SSA values for complex numbers, or the
/// address of an aggregate value in memory.</doc>
<mbr r='clang::CodeGen::RValue::V1' o='0' t='llvm::PointerIntPair&lt;llvm::Value *, 2, Flavor&gt;'/>
<mbr r='clang::CodeGen::RValue::V2' o='64' t='llvm::PointerIntPair&lt;llvm::Value *, 1, bool&gt;'/>
<fun r='_ZNK5clang7CodeGen6RValue8isScalarEv'/>
<fun r='_ZNK5clang7CodeGen6RValue9isComplexEv'/>
<fun r='_ZNK5clang7CodeGen6RValue11isAggregateEv'/>
<fun r='_ZNK5clang7CodeGen6RValue19isVolatileQualifiedEv'/>
<fun r='_ZNK5clang7CodeGen6RValue12getScalarValEv'/>
<fun r='_ZN5clang7CodeGen6RValue12getAlignmentEv'/>
<fun r='_ZNK5clang7CodeGen6RValue13getComplexValEv'/>
<fun r='_ZNK5clang7CodeGen6RValue19getAggregateAddressEv'/>
<fun r='_ZNK5clang7CodeGen6RValue19getAggregatePointerEv'/>
<fun r='_ZN5clang7CodeGen6RValue10getIgnoredEv'/>
<fun r='_ZN5clang7CodeGen6RValue3getEPN4llvm5ValueEj'/>
<fun r='_ZN5clang7CodeGen6RValue10getComplexEPN4llvm5ValueES4_'/>
<fun r='_ZN5clang7CodeGen6RValue10getComplexERKSt4pairIPN4llvm5ValueES5_E'/>
<fun r='_ZN5clang7CodeGen6RValue12getAggregateENS0_7AddressEb'/>
