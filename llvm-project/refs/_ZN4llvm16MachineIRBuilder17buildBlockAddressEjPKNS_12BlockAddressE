<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='1132' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildBlockAddress(unsigned int Res, const llvm::BlockAddress * BA)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='1124'>/// Build and insert \p Res = G_BLOCK_ADDR \p BA
  ///
  /// G_BLOCK_ADDR computes the address of a basic block.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res must be a generic virtual register of a pointer type.
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='1786' u='c' c='_ZN4llvm12IRTranslator9translateERKNS_8ConstantEj'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='842' ll='849' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildBlockAddress(unsigned int Res, const llvm::BlockAddress * BA)'/>
