<dec f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='489' type='bool llvm::TargetInstrInfo::getExtractSubregInputs(const llvm::MachineInstr &amp; MI, unsigned int DefIdx, llvm::TargetInstrInfo::RegSubRegPairAndIdx &amp; InputReg) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='474'>/// Build the equivalent inputs of a EXTRACT_SUBREG for the given \p MI
  /// and \p DefIdx.
  /// \p [out] InputReg of the equivalent EXTRACT_SUBREG.
  /// E.g., EXTRACT_SUBREG %1:sub1, sub0, sub1 would produce:
  /// - %1:sub1, sub0
  ///
  /// \returns true if it is possible to build such an input sequence
  /// with the pair \p MI, \p DefIdx and the operand has no undef flag set.
  /// False otherwise.
  ///
  /// \pre MI.isExtractSubreg() or MI.isExtractSubregLike().
  ///
  /// \note The generic implementation does not provide any support for
  /// MI.isExtractSubregLike(). In other words, one has to override
  /// getExtractSubregLikeInputs for target specific instructions.</doc>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='1983' u='c' c='_ZN12_GLOBAL__N_112ValueTracker30getNextSourceFromExtractSubregEv'/>
<def f='llvm/llvm/lib/CodeGen/TargetInstrInfo.cpp' l='1172' ll='1195' type='bool llvm::TargetInstrInfo::getExtractSubregInputs(const llvm::MachineInstr &amp; MI, unsigned int DefIdx, llvm::TargetInstrInfo::RegSubRegPairAndIdx &amp; InputReg) const'/>
