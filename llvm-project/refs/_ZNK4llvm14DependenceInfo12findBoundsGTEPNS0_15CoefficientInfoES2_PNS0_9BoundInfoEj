<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='842' type='void llvm::DependenceInfo::findBoundsGT(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2651' u='c' c='_ZNK4llvm14DependenceInfo17exploreDirectionsEjPNS0_15CoefficientInfoES2_PNS0_9BoundInfoERKNS_14SmallBitVectorERjPKNS_4SCEVE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2868' ll='2894' type='void llvm::DependenceInfo::findBoundsGT(llvm::DependenceInfo::CoefficientInfo * A, llvm::DependenceInfo::CoefficientInfo * B, llvm::DependenceInfo::BoundInfo * Bound, unsigned int K) const'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2855'>// Computes the upper and lower bounds for level K
// using the &gt; direction. Records them in Bound.
// Wolfe gives the equations
//
//    LB^&gt;_k = (A_k - B^+_k)^- (U_k - L_k - N_k) + (A_k - B_k)L_k + A_k N_k
//    UB^&gt;_k = (A_k - B^-_k)^+ (U_k - L_k - N_k) + (A_k - B_k)L_k + A_k N_k
//
// Since we normalize loops, we can simplify these equations to
//
//    LB^&gt;_k = (A_k - B^+_k)^- (U_k - 1) + A_k
//    UB^&gt;_k = (A_k - B^-_k)^+ (U_k - 1) + A_k
//
// We must be careful to handle the case where the upper bound is unknown.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='840'>/// findBoundsGT - Computes the upper and lower bounds for level K
    /// using the &gt; direction. Records them in Bound.</doc>
