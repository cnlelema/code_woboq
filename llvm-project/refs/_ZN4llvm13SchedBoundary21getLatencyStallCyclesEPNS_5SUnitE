<dec f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='745' type='unsigned int llvm::SchedBoundary::getLatencyStallCycles(llvm::SUnit * SU)'/>
<def f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='1932' ll='1940' type='unsigned int llvm::SchedBoundary::getLatencyStallCycles(llvm::SUnit * SU)'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3038' u='c' c='_ZNK4llvm16GenericScheduler12tryCandidateERNS_20GenericSchedulerBase14SchedCandidateES3_PNS_13SchedBoundaryE'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3039' u='c' c='_ZNK4llvm16GenericScheduler12tryCandidateERNS_20GenericSchedulerBase14SchedCandidateES3_PNS_13SchedBoundaryE'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3369' u='c' c='_ZN4llvm20PostGenericScheduler12tryCandidateERNS_20GenericSchedulerBase14SchedCandidateES3_'/>
<use f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='3370' u='c' c='_ZN4llvm20PostGenericScheduler12tryCandidateERNS_20GenericSchedulerBase14SchedCandidateES3_'/>
<doc f='llvm/llvm/lib/CodeGen/MachineScheduler.cpp' l='1925'>/// Compute the stall cycles based on this SUnit&apos;s ready time. Heuristics treat
/// these &quot;soft stalls&quot; differently than the hard stall cycles based on CPU
/// resources and computed by checkHazard(). A fully in-order model
/// (MicroOpBufferSize==0) will not make use of this since instructions are not
/// available for scheduling until they are ready. However, a weaker in-order
/// model may use this for heuristics. For example, if a processor has in-order
/// behavior when reading certain resources, this may come into play.</doc>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineScheduler.h' l='743'>/// Get the difference between the given SUnit&apos;s ready time and the current
  /// cycle.</doc>
