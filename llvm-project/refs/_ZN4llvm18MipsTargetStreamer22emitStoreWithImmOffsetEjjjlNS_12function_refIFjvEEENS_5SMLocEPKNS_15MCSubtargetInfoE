<dec f='llvm/llvm/lib/Target/Mips/MipsTargetStreamer.h' l='156' type='void llvm::MipsTargetStreamer::emitStoreWithImmOffset(unsigned int Opcode, unsigned int SrcReg, unsigned int BaseReg, int64_t Offset, function_ref&lt;unsigned int ()&gt; GetATReg, llvm::SMLoc IDLoc, const llvm::MCSubtargetInfo * STI)'/>
<doc f='llvm/llvm/lib/Target/Mips/MipsTargetStreamer.h' l='149'>/// Emit a store instruction with an offset. If the offset is out of range
  /// then it will be synthesized using the assembler temporary.
  ///
  /// GetATReg() is a callback that can be used to obtain the current assembler
  /// temporary and is only called when the assembler temporary is required. It
  /// must handle the case where no assembler temporary is available (typically
  /// by reporting an error).</doc>
<def f='llvm/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp' l='286' ll='317' type='void llvm::MipsTargetStreamer::emitStoreWithImmOffset(unsigned int Opcode, unsigned int SrcReg, unsigned int BaseReg, int64_t Offset, function_ref&lt;unsigned int ()&gt; GetATReg, llvm::SMLoc IDLoc, const llvm::MCSubtargetInfo * STI)'/>
<doc f='llvm/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp' l='285'>/// Emit a store instruction with an immediate offset.</doc>
