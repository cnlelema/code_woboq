<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1759' type='Optional&lt;llvm::APInt&gt; llvm::ScalarEvolution::computeConstantDifference(const llvm::SCEV * LHS, const llvm::SCEV * RHS)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1752'>/// Compute \p LHS - \p RHS and returns the result as an APInt if it is a
  /// constant, and None if it isn&apos;t.
  ///
  /// This is intended to be a cheaper version of getMinusSCEV.  We can be
  /// frugal here since we just bail out of actually constructing and
  /// canonicalizing an expression in the cases where the result isn&apos;t going
  /// to be a constant.</doc>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9815' ll='9868' type='Optional&lt;llvm::APInt&gt; llvm::ScalarEvolution::computeConstantDifference(const llvm::SCEV * More, const llvm::SCEV * Less)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9924' u='c' c='_ZN4llvm15ScalarEvolution34isImpliedCondOperandsViaNoOverflowENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9925' u='c' c='_ZN4llvm15ScalarEvolution34isImpliedCondOperandsViaNoOverflowENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10365' u='c' c='_ZN4llvm15ScalarEvolution30isImpliedCondOperandsViaRangesENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_'/>
