<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='242' type='llvm::AllocaInst * llvm::DemoteRegToStack(llvm::Instruction &amp; X, bool VolatileLoads = false, llvm::Instruction * AllocaPoint = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='237'>/// This function takes a virtual register computed by an Instruction and
/// replaces it with a slot in the stack frame, allocated via alloca.
/// This allows the CFG to be changed around without fear of invalidating the
/// SSA information for the value. It returns the pointer to the alloca inserted
/// to create a stack slot for X.</doc>
<use f='llvm/llvm/lib/CodeGen/SjLjEHPrepare.cpp' l='323' u='c' c='_ZN12_GLOBAL__N_113SjLjEHPrepare22lowerAcrossUnwindEdgesERN4llvm8FunctionENS1_8ArrayRefIPNS1_10InvokeInstEEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/Reg2Mem.cpp' l='104' u='c' c='_ZN12_GLOBAL__N_18RegToMem13runOnFunctionERN4llvm8FunctionE'/>
<def f='llvm/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp' l='23' ll='105' type='llvm::AllocaInst * llvm::DemoteRegToStack(llvm::Instruction &amp; I, bool VolatileLoads = false, llvm::Instruction * AllocaPoint = nullptr)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp' l='18'>/// DemoteRegToStack - This function takes a virtual register computed by an
/// Instruction and replaces it with a slot in the stack frame, allocated via
/// alloca.  This allows the CFG to be changed around without fear of
/// invalidating the SSA information for the value.  It returns the pointer to
/// the alloca inserted to create a stack slot for I.</doc>
