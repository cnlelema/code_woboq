<def f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2230' ll='2232' type='bool llvm::TargetLoweringBase::isVectorShiftByScalarCheap(llvm::Type * Ty) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='2226'>/// Return true if it&apos;s significantly cheaper to shift a vector by a uniform
  /// scalar than by an amount which will vary across each lane. On x86, for
  /// example, there is a &quot;psllw&quot; instruction for the former case, but no simple
  /// instruction for a general &quot;a &lt;&lt; b&quot; operation on vectors.</doc>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6110' u='c' c='_ZN12_GLOBAL__N_114CodeGenPrepare25optimizeShuffleVectorInstEPN4llvm17ShuffleVectorInstE'/>
<ovr f='llvm/llvm/lib/Target/X86/X86ISelLowering.cpp' l='28412' c='_ZNK4llvm17X86TargetLowering26isVectorShiftByScalarCheapEPNS_4TypeE'/>
