<dec f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='162' type='llvm::Constant * llvm::createBitMaskForGaps(IRBuilder&lt;&gt; &amp; Builder, unsigned int VF, const InterleaveGroup&lt;llvm::Instruction&gt; &amp; Group)'/>
<doc f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='151'>/// Create a mask that filters the members of an interleave group where there
/// are gaps.
///
/// For example, the mask for \p Group with interleave-factor 3
/// and \p VF 4, that has only its first member present is:
///
///   &lt;1,0,0,1,0,0,1,0,0,1,0,0&gt;
///
/// Note: The result is a mask of 0&apos;s and 1&apos;s, as opposed to the other
/// create[*]Mask() utilities which create a shuffle mask (mask that
/// consists of indices).</doc>
<def f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='633' ll='651' type='llvm::Constant * llvm::createBitMaskForGaps(IRBuilder&lt;&gt; &amp; Builder, unsigned int VF, const InterleaveGroup&lt;llvm::Instruction&gt; &amp; Group)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='2100' u='c' c='_ZN4llvm19InnerLoopVectorizer24vectorizeInterleaveGroupEPNS_11InstructionEPNS_11SmallVectorIPNS_5ValueELj2EEE'/>
