<dec f='llvm/clang/lib/AST/Linkage.h' l='111' type='void clang::LinkageComputer::mergeTemplateLV(clang::LinkageInfo &amp; LV, const clang::FunctionDecl * fn, const clang::FunctionTemplateSpecializationInfo * specInfo, clang::LVComputationKind computation)'/>
<def f='llvm/clang/lib/AST/Decl.cpp' l='386' ll='403' type='void clang::LinkageComputer::mergeTemplateLV(clang::LinkageInfo &amp; LV, const clang::FunctionDecl * fn, const clang::FunctionTemplateSpecializationInfo * specInfo, clang::LVComputationKind computation)'/>
<use f='llvm/clang/lib/AST/Decl.cpp' l='838' u='c' c='_ZN5clang15LinkageComputer26getLVForNamespaceScopeDeclEPKNS_9NamedDeclENS_17LVComputationKindEb'/>
<doc f='llvm/clang/lib/AST/Decl.cpp' l='379'>/// Merge in template-related linkage and visibility for the given
/// function template specialization.
///
/// We don&apos;t need a computation kind here because we can assume
/// LVForValue.
///
/// \param[out] LV the computation to use for the parent</doc>
