<dec f='llvm/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h' l='84' type='bool llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(llvm::Instruction * I)'/>
<use f='llvm/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h' l='86' u='c' c='_ZN4llvm20UnrolledInstAnalyzer16visitInstructionERNS_11InstructionE'/>
<def f='llvm/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp' l='27' ll='61' type='bool llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(llvm::Instruction * I)'/>
<doc f='llvm/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp' l='19'>/// Try to simplify instruction \param I using its SCEV expression.
///
/// The idea is that some AddRec expressions become constants, which then
/// could trigger folding of other instructions. However, that only happens
/// for expressions whose start value is also constant, which isn&apos;t always the
/// case. In another common and important case the start value is just some
/// address (i.e. SCEVUnknown) - in this case we compute the offset and save
/// it along with the base address instead.</doc>
