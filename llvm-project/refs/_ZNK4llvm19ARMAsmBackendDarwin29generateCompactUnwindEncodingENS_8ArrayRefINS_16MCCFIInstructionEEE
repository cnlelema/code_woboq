<dec f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackendDarwin.h' l='31' type='uint32_t llvm::ARMAsmBackendDarwin::generateCompactUnwindEncoding(ArrayRef&lt;llvm::MCCFIInstruction&gt; Instrs) const'/>
<inh f='llvm/llvm/include/llvm/MC/MCAsmBackend.h' l='179' c='_ZNK4llvm12MCAsmBackend29generateCompactUnwindEncodingENS_8ArrayRefINS_16MCCFIInstructionEEE'/>
<def f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp' l='1097' ll='1277' type='uint32_t llvm::ARMAsmBackendDarwin::generateCompactUnwindEncoding(ArrayRef&lt;llvm::MCCFIInstruction&gt; Instrs) const'/>
<doc f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp' l='1093'>/// Generate compact unwind encoding for the function based on the CFI
/// instructions. If the CFI instructions describe a frame that cannot be
/// encoded in compact unwind, the method returns UNWIND_ARM_MODE_DWARF which
/// tells the runtime to fallback and unwind using dwarf.</doc>
