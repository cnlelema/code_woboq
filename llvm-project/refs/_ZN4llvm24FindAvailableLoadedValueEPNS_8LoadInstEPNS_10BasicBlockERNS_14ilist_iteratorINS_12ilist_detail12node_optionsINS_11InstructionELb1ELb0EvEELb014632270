<dec f='llvm/llvm/include/llvm/Analysis/Loads.h' l='91' type='llvm::Value * llvm::FindAvailableLoadedValue(llvm::LoadInst * Load, llvm::BasicBlock * ScanBB, BasicBlock::iterator &amp; ScanFrom, unsigned int MaxInstsToScan = DefMaxInstsToScan, AliasAnalysis * AA = nullptr, bool * IsLoadCSE = nullptr, unsigned int * NumScanedInst = nullptr)'/>
<use f='llvm/llvm/lib/Analysis/Lint.cpp' l='682' u='c' c='_ZNK12_GLOBAL__N_14Lint13findValueImplEPN4llvm5ValueEbRNS1_15SmallPtrSetImplIS3_EE'/>
<doc f='llvm/llvm/include/llvm/Analysis/Loads.h' l='67'>/// Scan backwards to see if we have the value of the given load available
/// locally within a small number of instructions.
///
/// You can use this function to scan across multiple blocks: after you call
/// this function, if ScanFrom points at the beginning of the block, it&apos;s safe
/// to continue scanning the predecessors.
///
/// Note that performing load CSE requires special care to make sure the
/// metadata is set appropriately.  In particular, aliasing metadata needs
/// to be merged.  (This doesn&apos;t matter for store-to-load forwarding because
/// the only relevant load gets deleted.)
///
/// \param Load The load we want to replace.
/// \param ScanBB The basic block to scan.
/// \param [in,out] ScanFrom The location to start scanning from. When this
/// function returns, it points at the last instruction scanned.
/// \param MaxInstsToScan The maximum number of instructions to scan. If this
/// is zero, the whole block will be scanned.
/// \param AA Optional pointer to alias analysis, to make the scan more
/// precise.
/// \param [out] IsLoadCSE Whether the returned value is a load from the same
/// location in memory, as opposed to the value operand of a store.
///
/// \returns The found value, or nullptr if no value is found.</doc>
<def f='llvm/llvm/lib/Analysis/Loads.cpp' l='328' ll='341' type='llvm::Value * llvm::FindAvailableLoadedValue(llvm::LoadInst * Load, llvm::BasicBlock * ScanBB, BasicBlock::iterator &amp; ScanFrom, unsigned int MaxInstsToScan = DefMaxInstsToScan, AliasAnalysis * AA = nullptr, bool * IsLoad = nullptr, unsigned int * NumScanedInst = nullptr)'/>
<use f='llvm/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp' l='1293' u='c' c='_ZN4llvm14AMDGPULibCalls11fold_sincosEPNS_8CallInstERNS_9IRBuilderINS_14ConstantFolderENS_24IRBuilderDefaultInserterEEEPNS_9AAResultsE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp' l='1025' u='c' c='_ZN4llvm12InstCombiner13visitLoadInstERNS_8LoadInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1303' u='c' c='_ZN4llvm17JumpThreadingPass30SimplifyPartiallyRedundantLoadEPNS_8LoadInstE'/>
