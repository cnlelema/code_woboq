<def f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='741' ll='747' type='const llvm::TargetRegisterClass * llvm::TargetRegisterInfo::getLargestLegalSuperClass(const llvm::TargetRegisterClass * RC, const llvm::MachineFunction &amp; ) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetRegisterInfo.h' l='737'>/// Returns the largest super class of RC that is legal to use in the current
  /// sub-target and has the same spill size.
  /// The returned register class can be used to create virtual registers which
  /// means that all its registers can be copied and spilled.</doc>
<use f='llvm/llvm/lib/CodeGen/MachineRegisterInfo.cpp' l='126' u='c' c='_ZN4llvm19MachineRegisterInfo17recomputeRegClassEj'/>
<use f='llvm/llvm/lib/CodeGen/MachineVerifier.cpp' l='1643' u='c' c='_ZN12_GLOBAL__N_115MachineVerifier19visitMachineOperandEPKN4llvm14MachineOperandEj'/>
<use f='llvm/llvm/lib/CodeGen/RegAllocGreedy.cpp' l='2106' u='c' c='_ZN12_GLOBAL__N_18RAGreedy19tryInstructionSplitERN4llvm12LiveIntervalERNS1_15AllocationOrderERNS1_15SmallVectorImplIjEE'/>
<use f='llvm/llvm/lib/CodeGen/RegisterClassInfo.cpp' l='146' u='c' c='_ZNK4llvm17RegisterClassInfo7computeEPKNS_19TargetRegisterClassE'/>
