<dec f='llvm/llvm/include/llvm/AsmParser/Parser.h' l='44' type='std::unique_ptr&lt;Module&gt; llvm::parseAssemblyFile(llvm::StringRef Filename, llvm::SMDiagnostic &amp; Err, llvm::LLVMContext &amp; Context, llvm::SlotMapping * Slots = nullptr, bool UpgradeDebugInfo = true, llvm::StringRef DataLayoutString = &quot;&quot;)'/>
<def f='llvm/llvm/lib/AsmParser/Parser.cpp' l='54' ll='68' type='std::unique_ptr&lt;Module&gt; llvm::parseAssemblyFile(llvm::StringRef Filename, llvm::SMDiagnostic &amp; Err, llvm::LLVMContext &amp; Context, llvm::SlotMapping * Slots = nullptr, bool UpgradeDebugInfo = true, llvm::StringRef DataLayoutString = &quot;&quot;)'/>
<doc f='llvm/llvm/include/llvm/AsmParser/Parser.h' l='28'>/// This function is a main interface to the LLVM Assembly Parser. It parses
/// an ASCII file that (presumably) contains LLVM Assembly code. It returns a
/// Module (intermediate representation) with the corresponding features. Note
/// that this does not verify that the generated Module is valid, so you should
/// run the verifier after parsing the file to check that it is okay.
/// Parse LLVM Assembly from a file
/// \param Filename The name of the file to parse
/// \param Err Error result info.
/// \param Context Context in which to allocate globals info.
/// \param Slots The optional slot mapping that will be initialized during
///              parsing.
/// \param UpgradeDebugInfo Run UpgradeDebugInfo, which runs the Verifier.
///                         This option should only be set to false by llvm-as
///                         for use inside the LLVM testuite!
/// \param DataLayoutString Override datalayout in the llvm assembly.</doc>
<use f='llvm/llvm/tools/verify-uselistorder/verify-uselistorder.cpp' l='173' u='c' c='_ZNK12_GLOBAL__N_18TempFile12readAssemblyERN4llvm11LLVMContextE'/>
