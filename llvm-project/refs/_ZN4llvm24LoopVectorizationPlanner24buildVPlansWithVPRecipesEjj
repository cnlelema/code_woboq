<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h' l='282' type='void llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(unsigned int MinVF, unsigned int MaxVF)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6203' u='c' c='_ZN4llvm24LoopVectorizationPlanner4planEbj'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6221' u='c' c='_ZN4llvm24LoopVectorizationPlanner4planEbj'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6794' ll='6831' type='void llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(unsigned int MinVF, unsigned int MaxVF)'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h' l='279'>/// Build VPlans for power-of-2 VF&apos;s between \p MinVF and \p MaxVF inclusive,
  /// according to the information gathered by Legal when it checked if it is
  /// legal to vectorize the loop. This method creates VPlans using VPRecipes.</doc>
