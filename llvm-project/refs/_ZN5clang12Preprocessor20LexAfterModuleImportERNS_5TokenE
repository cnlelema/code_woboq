<dec f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1364' type='bool clang::Preprocessor::LexAfterModuleImport(clang::Token &amp; Result)'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='641' u='c' c='_ZN5clang12Preprocessor23SkipTokensWhileUsingPCHEv'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='896' u='c' c='_ZN5clang12Preprocessor3LexERNS_5TokenE'/>
<def f='llvm/clang/lib/Lex/Preprocessor.cpp' l='1112' ll='1278' type='bool clang::Preprocessor::LexAfterModuleImport(clang::Token &amp; Result)'/>
<doc f='llvm/clang/lib/Lex/Preprocessor.cpp' l='1093'>/// Lex a token following the &apos;import&apos; contextual keyword.
///
///     pp-import: [C++20]
///           import header-name pp-import-suffix[opt] ;
///           import header-name-tokens pp-import-suffix[opt] ;
/// [ObjC]    @ import module-name ;
/// [Clang]   import module-name ;
///
///     header-name-tokens:
///           string-literal
///           &lt; [any sequence of preprocessing-tokens other than &gt;] &gt;
///
///     module-name:
///           module-name-qualifier[opt] identifier
///
///     module-name-qualifier
///           module-name-qualifier[opt] identifier .
///
/// We respond to a pp-import by importing macros from the named module.</doc>
