<dec f='llvm/llvm/lib/Target/AMDGPU/R600ISelLowering.h' l='93' type='llvm::SDValue llvm::R600TargetLowering::stackPtrToRegIndex(llvm::SDValue Ptr, unsigned int StackWidth, llvm::SelectionDAG &amp; DAG) const'/>
<def f='llvm/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp' l='1089' ll='1109' type='llvm::SDValue llvm::R600TargetLowering::stackPtrToRegIndex(llvm::SDValue Ptr, unsigned int StackWidth, llvm::SelectionDAG &amp; DAG) const'/>
<doc f='llvm/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp' l='1084'>/// LLVM generates byte-addressed pointers.  For indirect addressing, we need to
/// convert these pointers to a register index.  Each register holds
/// 16 bytes, (4 x 32bit sub-register), but we need to take into account the
/// \p StackWidth, which tells us how many of the 4 sub-registrers will be used
/// for indirect addressing.</doc>
