<def f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='154' type='bool llvm::LPMUpdater::skipCurrentLoop() const'/>
<use f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='355' u='c' c='_ZN4llvm25FunctionToLoopPassAdaptor3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='364' u='c' c='_ZN4llvm25FunctionToLoopPassAdaptor3runERNS_8FunctionERNS_15AnalysisManagerIS1_JEEE'/>
<doc f='llvm/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h' l='148'>/// This can be queried by loop passes which run other loop passes (like pass
  /// managers) to know whether the loop needs to be skipped due to updates to
  /// the loop nest.
  ///
  /// If this returns true, the loop object may have been deleted, so passes
  /// should take care not to touch the object.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopPassManager.cpp' l='47' u='c' c='_ZN4llvm11PassManager3runERT_RT0_DpT1_'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopPassManager.cpp' l='53' u='c' c='_ZN4llvm11PassManager3runERT_RT0_DpT1_'/>
