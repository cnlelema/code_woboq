<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='406' type='bool llvm::removeUnreachableBlocks(llvm::Function &amp; F, llvm::LazyValueInfo * LVI = nullptr, llvm::DomTreeUpdater * DTU = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='403'>/// Remove all blocks that can not be reached from the function&apos;s entry.
///
/// Returns true if any basic block was removed.</doc>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='1017' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare23cleanupPreparedFuncletsERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='1039' u='c' c='_ZN12_GLOBAL__N_112WinEHPrepare17prepareExplicitEHERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='424' u='c' c='_ZL16postSplitCleanupRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Coroutines/CoroSplit.cpp' l='518' u='c' c='_ZL24addMustTailToCoroResumesRN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='2290' u='c' c='_ZL17OptimizeFunctionsRN4llvm6ModuleEPNS_17TargetLibraryInfoENS_12function_refIFRNS_19TargetTransformInfoERNS_8FunctionEEEENS4_IFRNS_18BlockFrequencyI9729831'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp' l='928' u='c' c='_ZN12_GLOBAL__N_117DataFlowSanitizer11runOnModuleERN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp' l='1272' u='c' c='_ZN12_GLOBAL__N_122MemorySanitizerVisitor13runOnFunctionEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/FlattenCFGPass.cpp' l='75' u='c' c='_ZN12_GLOBAL__N_114FlattenCFGPass13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp' l='489' u='c' c='_ZN12_GLOBAL__N_115PlaceSafepoints13runOnFunctionERN4llvm8FunctionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp' l='2533' u='c' c='_ZN4llvm23RewriteStatepointsForGC13runOnFunctionERNS_8FunctionERNS_13DominatorTreeERNS_19TargetTransformInfoERKNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp' l='175' u='c' c='_ZL19simplifyFunctionCFGRN4llvm8FunctionERKNS_19TargetTransformInfoERKNS_18SimplifyCFGOptionsE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp' l='187' u='c' c='_ZL19simplifyFunctionCFGRN4llvm8FunctionERKNS_19TargetTransformInfoERKNS_18SimplifyCFGOptionsE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp' l='192' u='c' c='_ZL19simplifyFunctionCFGRN4llvm8FunctionERKNS_19TargetTransformInfoERKNS_18SimplifyCFGOptionsE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2230' ll='2301' type='bool llvm::removeUnreachableBlocks(llvm::Function &amp; F, llvm::LazyValueInfo * LVI = nullptr, llvm::DomTreeUpdater * DTU = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2226'>/// removeUnreachableBlocks - Remove blocks that are not reachable, even
/// if they are in a dead cycle.  Return true if a change was made, false
/// otherwise. If `LVI` is passed, this function preserves LazyValueInfo
/// after modifying the CFG.</doc>
<use f='llvm/llvm/unittests/Transforms/Utils/LocalTest.cpp' l='875' u='c' c='_ZN34Local_RemoveUnreachableBlocks_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/LocalTest.cpp' l='883' u='c' c='_ZN34Local_RemoveUnreachableBlocks_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/LocalTest.cpp' l='912' u='c' c='_ZN34Local_RemoveUnreachableBlocks_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Transforms/Utils/LocalTest.cpp' l='913' u='c' c='_ZN34Local_RemoveUnreachableBlocks_Test8TestBodyEv'/>
