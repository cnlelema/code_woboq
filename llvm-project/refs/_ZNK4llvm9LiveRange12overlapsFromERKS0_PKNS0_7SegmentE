<use f='llvm/llvm/include/llvm/CodeGen/LiveInterval.h' l='438' u='c' c='_ZNK4llvm9LiveRange8overlapsERKS0_'/>
<dec f='llvm/llvm/include/llvm/CodeGen/LiveInterval.h' l='456' type='bool llvm::LiveRange::overlapsFrom(const llvm::LiveRange &amp; Other, const_iterator StartPos) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/LiveInterval.h' l='453'>/// overlapsFrom - Return true if the intersection of the two live ranges
    /// is not empty.  The specified iterator is a hint that we can begin
    /// scanning the Other range starting at I.</doc>
<def f='llvm/llvm/lib/CodeGen/LiveInterval.cpp' l='404' ll='443' type='bool llvm::LiveRange::overlapsFrom(const llvm::LiveRange &amp; other, const_iterator StartPos) const'/>
<doc f='llvm/llvm/lib/CodeGen/LiveInterval.cpp' l='386'>// overlaps - Return true if the intersection of the two live ranges is
// not empty.
//
// An example for overlaps():
//
// 0: A = ...
// 4: B = ...
// 8: C = A + B ;; last use of A
//
// The live ranges should look like:
//
// A = [3, 11)
// B = [7, x)
// C = [11, y)
//
// A-&gt;overlaps(C) should return false since we want to be able to join
// A and C.
//</doc>
