<dec f='llvm/llvm/include/llvm/IR/OptBisect.h' l='67' type='bool llvm::OptBisect::shouldRunPass(const llvm::Pass * P, llvm::StringRef IRDescription)'/>
<doc f='llvm/llvm/include/llvm/IR/OptBisect.h' l='56'>/// Checks the bisect limit to determine if the specified pass should run.
  ///
  /// If the bisect limit is set to -1, the function prints a message describing
  /// the pass and the bisect number assigned to it and return true.  Otherwise,
  /// the function prints a message with the bisect number assigned to the
  /// pass and indicating whether or not the pass will be run and return true if
  /// the bisect limit has not yet been exceeded or false if it has.
  ///
  /// Most passes should not call this routine directly. Instead, they are
  /// called through helper routines provided by the pass base classes.  For
  /// instance, function passes should call FunctionPass::skipFunction().</doc>
<inh f='llvm/llvm/include/llvm/IR/OptBisect.h' l='31' c='_ZN4llvm11OptPassGate13shouldRunPassEPKNS_4PassENS_9StringRefE'/>
<def f='llvm/llvm/lib/IR/OptBisect.cpp' l='42' ll='46' type='bool llvm::OptBisect::shouldRunPass(const llvm::Pass * P, llvm::StringRef IRDescription)'/>
