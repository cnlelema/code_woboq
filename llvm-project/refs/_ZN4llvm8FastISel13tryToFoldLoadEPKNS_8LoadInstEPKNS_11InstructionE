<dec f='llvm/llvm/include/llvm/CodeGen/FastISel.h' l='296' type='bool llvm::FastISel::tryToFoldLoad(const llvm::LoadInst * LI, const llvm::Instruction * FoldInst)'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp' l='2327' ll='2381' type='bool llvm::FastISel::tryToFoldLoad(const llvm::LoadInst * LI, const llvm::Instruction * FoldInst)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/FastISel.h' l='284'>/// We&apos;re checking to see if we can fold \p LI into \p FoldInst. Note
  /// that we could have a sequence where multiple LLVM IR instructions are
  /// folded into the same machineinstr.  For example we could have:
  ///
  ///   A: x = load i32 *P
  ///   B: y = icmp A, 42
  ///   C: br y, ...
  ///
  /// In this scenario, \p LI is &quot;A&quot;, and \p FoldInst is &quot;C&quot;.  We know about &quot;B&quot;
  /// (and any other folded instructions) because it is between A and C.
  ///
  /// If we succeed folding, return true.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp' l='1484' u='c' c='_ZN4llvm16SelectionDAGISel20SelectAllBasicBlocksERKNS_8FunctionE'/>
