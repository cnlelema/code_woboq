<dec f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='139' type='static llvm::RecurrenceDescriptor::InstDesc llvm::RecurrenceDescriptor::isRecurrenceInstr(llvm::Instruction * I, llvm::RecurrenceDescriptor::RecurrenceKind Kind, llvm::RecurrenceDescriptor::InstDesc &amp; Prev, bool HasFunNoNaNAttr)'/>
<use f='llvm/llvm/lib/Analysis/IVDescriptors.cpp' l='300' u='c' c='_ZN4llvm20RecurrenceDescriptor15AddReductionVarEPNS_7PHINodeENS0_14RecurrenceKindEPNS_4LoopEbRS0_PNS_12DemandedBitsEPNS_15AssumptionCacheEPNS_13DominatorTreeE'/>
<def f='llvm/llvm/lib/Analysis/IVDescriptors.cpp' l='555' ll='594' type='static RecurrenceDescriptor::InstDesc llvm::RecurrenceDescriptor::isRecurrenceInstr(llvm::Instruction * I, llvm::RecurrenceDescriptor::RecurrenceKind Kind, llvm::RecurrenceDescriptor::InstDesc &amp; Prev, bool HasFunNoNaNAttr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='134'>/// Returns a struct describing if the instruction &apos;I&apos; can be a recurrence
  /// variable of type &apos;Kind&apos;. If the recurrence is a min/max pattern of
  /// select(icmp()) this function advances the instruction pointer &apos;I&apos; from the
  /// compare instruction to the select instruction and stores this pointer in
  /// &apos;PatternLastInst&apos; member of the returned struct.</doc>
