<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='402' type='bool llvm::LLParser::ParseStructBody(SmallVectorImpl&lt;llvm::Type *&gt; &amp; Body)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2658' u='c' c='_ZN4llvm8LLParser19ParseAnonStructTypeERPNS_4TypeEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2711' u='c' c='_ZN4llvm8LLParser21ParseStructDefinitionENS_5SMLocENS_9StringRefERSt4pairIPNS_4TypeES1_ERS5_'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2726' ll='2753' type='bool llvm::LLParser::ParseStructBody(SmallVectorImpl&lt;llvm::Type *&gt; &amp; Body)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2720'>/// ParseStructType: Handles packed and unpacked types.  &lt;/&gt; parsed elsewhere.
///   StructType
///     ::= &apos;{&apos; &apos;}&apos;
///     ::= &apos;{&apos; Type (&apos;,&apos; Type)* &apos;}&apos;
///     ::= &apos;&lt;&apos; &apos;{&apos; &apos;}&apos; &apos;&gt;&apos;
///     ::= &apos;&lt;&apos; &apos;{&apos; Type (&apos;,&apos; Type)* &apos;}&apos; &apos;&gt;&apos;</doc>
