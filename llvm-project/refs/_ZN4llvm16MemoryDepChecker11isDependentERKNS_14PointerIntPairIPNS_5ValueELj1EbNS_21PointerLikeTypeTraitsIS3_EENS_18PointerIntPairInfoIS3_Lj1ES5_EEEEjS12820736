<dec f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='315' type='Dependence::DepType llvm::MemoryDepChecker::isDependent(const MemAccessInfo &amp; A, unsigned int AIdx, const MemAccessInfo &amp; B, unsigned int BIdx, const ValueToValueMap &amp; Strides)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='303'>/// Check whether there is a plausible dependence between the two
  /// accesses.
  ///
  /// Access \p A must happen before \p B in program order. The two indices
  /// identify the index into the program order map.
  ///
  /// This function checks  whether there is a plausible dependence (or the
  /// absence of such can&apos;t be proved) between the two accesses. If there is a
  /// plausible dependence but the dependence distance is bigger than one
  /// element access it records this distance in \p MaxSafeDepDistBytes (if this
  /// distance is smaller than any other distance encountered so far).
  /// Otherwise, this function returns true signaling a possible dependence.</doc>
<def f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='1428' ll='1619' type='MemoryDepChecker::Dependence::DepType llvm::MemoryDepChecker::isDependent(const MemAccessInfo &amp; A, unsigned int AIdx, const MemAccessInfo &amp; B, unsigned int BIdx, const ValueToValueMap &amp; Strides)'/>
<use f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='1659' u='c' c='_ZN4llvm16MemoryDepChecker11areDepsSafeERNS_18EquivalenceClassesINS_14PointerIntPairIPNS_5ValueELj1EbNS_21PointerLikeTypeTraitsIS4_EENS_18PointerIntPa10177573'/>
