<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='485' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildSExt(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='473'>/// Build and insert \p Res = G_SEXT \p Op
  ///
  /// G_SEXT produces a register of the specified width, with bits 0 to
  /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are duplicated from the
  /// high bit of \p Op (i.e. 2s-complement sign extended).
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p Res must be a generic virtual register with scalar or vector type.
  /// \pre \p Op must be a generic virtual register with scalar or vector type.
  /// \pre \p Op must be smaller than \p Res
  ///
  /// \return The newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp' l='216' u='c' c='_ZN4llvm12CallLowering12ValueHandler14extendRegisterEjRNS_11CCValAssignE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='628' u='c' c='_ZN4llvm15LegalizerHelper12narrowScalarERNS_12MachineInstrEjNS_3LLTE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='1529' u='c' c='_ZN4llvm15LegalizerHelper5lowerERNS_12MachineInstrEjNS_3LLTE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='385' ll='388' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildSExt(const llvm::DstOp &amp; Res, const llvm::SrcOp &amp; Op)'/>
<use f='llvm/llvm/lib/Target/Mips/MipsCallLowering.cpp' l='323' u='c' c='_ZN12_GLOBAL__N_120OutgoingValueHandler14extendRegisterEjRKN4llvm11CCValAssignE'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/PatternMatchTest.cpp' l='362' u='c' c='_ZN12_GLOBAL__N_140PatternMatchInstr_MatchExtendsTrunc_Test8TestBodyEv'/>
