<dec f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.h' l='113' type='llvm::MCSymbol * llvm::EHStreamer::emitExceptionTable()'/>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/ARMException.cpp' l='86' u='c' c='_ZN4llvm12ARMException11endFunctionEPKNS_15MachineFunctionE'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.h' l='92'>/// Emit landing pads and actions.
  ///
  /// The general organization of the table is complex, but the basic concepts
  /// are easy.  First there is a header which describes the location and
  /// organization of the three components that follow.
  ///  1. The landing pad site information describes the range of code covered
  ///     by the try.  In our case it&apos;s an accumulation of the ranges covered
  ///     by the invokes in the try.  There is also a reference to the landing
  ///     pad that handles the exception once processed.  Finally an index into
  ///     the actions table.
  ///  2. The action table, in our case, is composed of pairs of type ids
  ///     and next action offset.  Starting with the action index from the
  ///     landing pad site, each type Id is checked for a match to the current
  ///     exception.  If it matches then the exception and type id are passed
  ///     on to the landing pad.  Otherwise the next action is looked up.  This
  ///     chain is terminated with a next action of zero.  If no type id is
  ///     found the frame is unwound and handling continues.
  ///  3. Type id table contains references to all the C++ typeinfo for all
  ///     catches in the function.  This tables is reversed indexed base 1.
  ///
  /// Returns the starting symbol of an exception table.</doc>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/DwarfCFIException.cpp' l='170' u='c' c='_ZN4llvm17DwarfCFIException11endFunctionEPKNS_15MachineFunctionE'/>
<def f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp' l='349' ll='610' type='llvm::MCSymbol * llvm::EHStreamer::emitExceptionTable()'/>
<doc f='llvm/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp' l='327'>/// Emit landing pads and actions.
///
/// The general organization of the table is complex, but the basic concepts are
/// easy.  First there is a header which describes the location and organization
/// of the three components that follow.
///
///  1. The landing pad site information describes the range of code covered by
///     the try.  In our case it&apos;s an accumulation of the ranges covered by the
///     invokes in the try.  There is also a reference to the landing pad that
///     handles the exception once processed.  Finally an index into the actions
///     table.
///  2. The action table, in our case, is composed of pairs of type IDs and next
///     action offset.  Starting with the action index from the landing pad
///     site, each type ID is checked for a match to the current exception.  If
///     it matches then the exception and type id are passed on to the landing
///     pad.  Otherwise the next action is looked up.  This chain is terminated
///     with a next action of zero.  If no type id is found then the frame is
///     unwound and handling continues.
///  3. Type ID table contains references to all the C++ typeinfo for all
///     catches in the function.  This tables is reverse indexed base 1.
///
/// Returns the starting symbol of an exception table.</doc>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/WasmException.cpp' l='54' u='c' c='_ZN4llvm13WasmException11endFunctionEPKNS_15MachineFunctionE'/>
<use f='llvm/llvm/lib/CodeGen/AsmPrinter/WinException.cpp' l='162' u='c' c='_ZN4llvm12WinException11endFunctionEPKNS_15MachineFunctionE'/>
