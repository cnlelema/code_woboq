<dec f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='181' type='void llvm::LLVMContext::setInlineAsmDiagnosticHandler(InlineAsmDiagHandlerTy DiagHandler, void * DiagContext = nullptr)'/>
<doc f='llvm/llvm/include/llvm/IR/LLVMContext.h' l='174'>/// setInlineAsmDiagnosticHandler - This method sets a handler that is invoked
  /// when problems with inline asm are detected by the backend.  The first
  /// argument is a function pointer and the second is a context pointer that
  /// gets passed into the DiagHandler.
  ///
  /// LLVMContext doesn&apos;t take ownership or interpret either of these
  /// pointers.</doc>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='259' u='c' c='_ZN5clang15BackendConsumer21HandleTranslationUnitERNS_10ASTContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='305' u='c' c='_ZN5clang15BackendConsumer21HandleTranslationUnitERNS_10ASTContextE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='1071' u='c' c='_ZN5clang13CodeGenAction13ExecuteActionEv'/>
<def f='llvm/llvm/lib/IR/LLVMContext.cpp' l='116' ll='121' type='void llvm::LLVMContext::setInlineAsmDiagnosticHandler(InlineAsmDiagHandlerTy DiagHandler, void * DiagContext = nullptr)'/>
<doc f='llvm/llvm/lib/IR/LLVMContext.cpp' l='112'>//===----------------------------------------------------------------------===//
// Recoverable Backend Errors
//===----------------------------------------------------------------------===//</doc>
<use f='llvm/llvm/tools/llc/llc.cpp' l='328' u='c' c='main'/>
