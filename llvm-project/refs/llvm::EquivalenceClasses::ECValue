<def f='llvm/llvm/include/llvm/ADT/EquivalenceClasses.h' l='69' ll='115'/>
<doc f='llvm/llvm/include/llvm/ADT/EquivalenceClasses.h' l='59'>/// ECValue - The EquivalenceClasses data structure is just a set of these.
  /// Each of these represents a relation for a value.  First it stores the
  /// value itself, which provides the ordering that the set queries.  Next, it
  /// provides a &quot;next pointer&quot;, which is used to enumerate all of the elements
  /// in the unioned set.  Finally, it defines either a &quot;end of list pointer&quot; or
  /// &quot;leader pointer&quot; depending on whether the value itself is a leader.  A
  /// &quot;leader pointer&quot; points to the node that is the leader for this element,
  /// if the node is not a leader.  A &quot;end of list pointer&quot; points to the last
  /// node in the list of members of this list.  Whether or not a node is a
  /// leader is determined by a bit stolen from one of the pointers.</doc>
<mbr r='llvm::EquivalenceClasses::ECValue::Leader' t='const llvm::EquivalenceClasses::ECValue *'/>
<mbr r='llvm::EquivalenceClasses::ECValue::Next' t='const llvm::EquivalenceClasses::ECValue *'/>
<mbr r='llvm::EquivalenceClasses::ECValue::Data' t='ElemTy'/>
<fun r='_ZN4llvm18EquivalenceClasses7ECValueC1ERKT_'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue9getLeaderEv'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue12getEndOfListEv'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue7setNextEPKS1_'/>
<fun r='_ZN4llvm18EquivalenceClasses7ECValueC1ERKS1_'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValueltERKS1_'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue8isLeaderEv'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue7getDataEv'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValue7getNextEv'/>
<fun r='_ZNK4llvm18EquivalenceClasses7ECValueltERKT_'/>
