<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='133' type='llvm::MachineInstr * llvm::getOpcodeDef(unsigned int Opcode, unsigned int Reg, const llvm::MachineRegisterInfo &amp; MRI)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='130'>/// See if Reg is defined by an single def instruction that is
/// Opcode. Also try to do trivial folding if it&apos;s a COPY with
/// same types. Returns null otherwise.</doc>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h' l='139' u='c' c='_ZN4llvm28LegalizationArtifactCombiner18tryFoldImplicitDefERNS_12MachineInstrERNS_15SmallVectorImplIPS1_EE'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h' l='189' u='c' c='_ZN4llvm28LegalizationArtifactCombiner16tryCombineMergesERNS_12MachineInstrERNS_15SmallVectorImplIPS1_EE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='2383' u='c' c='_ZN4llvm15LegalizerHelper17narrowScalarShiftERNS_12MachineInstrEjNS_3LLTE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/Utils.cpp' l='284' ll='298' type='llvm::MachineInstr * llvm::getOpcodeDef(unsigned int Opcode, unsigned int Reg, const llvm::MachineRegisterInfo &amp; MRI)'/>
