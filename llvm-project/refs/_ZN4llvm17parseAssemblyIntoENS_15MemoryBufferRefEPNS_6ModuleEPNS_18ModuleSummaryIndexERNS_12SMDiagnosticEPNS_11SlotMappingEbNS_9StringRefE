<dec f='llvm/llvm/include/llvm/AsmParser/Parser.h' l='170' type='bool llvm::parseAssemblyInto(llvm::MemoryBufferRef F, llvm::Module * M, llvm::ModuleSummaryIndex * Index, llvm::SMDiagnostic &amp; Err, llvm::SlotMapping * Slots = nullptr, bool UpgradeDebugInfo = true, llvm::StringRef DataLayoutString = &quot;&quot;)'/>
<def f='llvm/llvm/lib/AsmParser/Parser.cpp' l='25' ll='38' type='bool llvm::parseAssemblyInto(llvm::MemoryBufferRef F, llvm::Module * M, llvm::ModuleSummaryIndex * Index, llvm::SMDiagnostic &amp; Err, llvm::SlotMapping * Slots = nullptr, bool UpgradeDebugInfo = true, llvm::StringRef DataLayoutString = &quot;&quot;)'/>
<use f='llvm/llvm/lib/AsmParser/Parser.cpp' l='47' u='c' c='_ZN4llvm13parseAssemblyENS_15MemoryBufferRefERNS_12SMDiagnosticERNS_11LLVMContextEPNS_11SlotMappingEbNS_9StringRefE'/>
<use f='llvm/llvm/lib/AsmParser/Parser.cpp' l='78' u='c' c='_ZN4llvm22parseAssemblyWithIndexENS_15MemoryBufferRefERNS_12SMDiagnosticERNS_11LLVMContextEPNS_11SlotMappingEbNS_9StringRefE'/>
<doc f='llvm/llvm/include/llvm/AsmParser/Parser.h' l='154'>/// This function is the low-level interface to the LLVM Assembly Parser.
/// This is kept as an independent function instead of being inlined into
/// parseAssembly for the convenience of interactive users that want to add
/// recently parsed bits to an existing module.
///
/// \param F The MemoryBuffer containing assembly
/// \param M The module to add data to.
/// \param Index The index to add data to.
/// \param Err Error result info.
/// \param Slots The optional slot mapping that will be initialized during
///              parsing.
/// \return true on error.
/// \param UpgradeDebugInfo Run UpgradeDebugInfo, which runs the Verifier.
///                         This option should only be set to false by llvm-as
///                         for use inside the LLVM testuite!
/// \param DataLayoutString Override datalayout in the llvm assembly.</doc>
