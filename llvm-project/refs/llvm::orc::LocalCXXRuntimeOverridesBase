<def f='llvm/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h' l='160' ll='177'/>
<ovr f='llvm/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h' l='179' c='llvm::orc::LegacyLocalCXXRuntimeOverrides'/>
<ovr f='llvm/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h' l='204' c='llvm::orc::LocalCXXRuntimeOverrides'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h' l='145'>/// Support class for static dtor execution. For hosted (in-process) JITs
///        only!
///
///   If a __cxa_atexit function isn&apos;t found C++ programs that use static
/// destructors will fail to link. However, we don&apos;t want to use the host
/// process&apos;s __cxa_atexit, because it will schedule JIT&apos;d destructors to run
/// after the JIT has been torn down, which is no good. This class makes it easy
/// to override __cxa_atexit (and the related __dso_handle).
///
///   To use, clients should manually call searchOverrides from their symbol
/// resolver. This should generally be done after attempting symbol resolution
/// inside the JIT, but before searching the host process&apos;s symbol table. When
/// the client determines that destructors should be run (generally at JIT
/// teardown or after a return from main), the runDestructors method should be
/// called.</doc>
<fun r='_ZN4llvm3orc28LocalCXXRuntimeOverridesBase14runDestructorsEv'/>
<fun r='_ZN4llvm3orc28LocalCXXRuntimeOverridesBase15toTargetAddressEPT_'/>
<mbr r='llvm::orc::LocalCXXRuntimeOverridesBase::DSOHandleOverride' o='0' t='CXXDestructorDataPairList'/>
<fun r='_ZN4llvm3orc28LocalCXXRuntimeOverridesBase17CXAAtExitOverrideEPFvPvES2_S2_'/>
<fun r='_ZN4llvm3orc28LocalCXXRuntimeOverridesBase14runDestructorsEv'/>
<fun r='_ZN4llvm3orc28LocalCXXRuntimeOverridesBase17CXAAtExitOverrideEPFvPvES2_S2_'/>
