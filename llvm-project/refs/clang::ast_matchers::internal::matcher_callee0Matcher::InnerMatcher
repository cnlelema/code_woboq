<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3136' u='w' c='_ZN5clang12ast_matchers8internal22matcher_callee0MatcherC1ERKNS1_7MatcherINS_4StmtEEE'/>
<dec f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3136' type='const internal::Matcher&lt;Stmt&gt;'/>
<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3139' u='m' c='_ZNK5clang12ast_matchers8internal22matcher_callee0Matcher7matchesERKNS_8CallExprEPNS1_14ASTMatchFinderEPNS1_21BoundNodesTreeBuilderE'/>
<offset>128</offset>
<doc f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3119'>/// Matches if the call expression&apos;s callee expression matches.
///
/// Given
/// \code
///   class Y { void x() { this-&gt;x(); x(); Y y; y.x(); } };
///   void f() { f(); }
/// \endcode
/// callExpr(callee(expr()))
///   matches this-&gt;x(), x(), y.x(), f()
/// with callee(...)
///   matching this-&gt;x, x, y.x, f respectively
///
/// Note: Callee cannot take the more general internal::Matcher&lt;Expr&gt;
/// because this introduces ambiguous overloads with calls to Callee taking a
/// internal::Matcher&lt;Decl&gt;, as the matcher hierarchy is purely
/// implemented in terms of implicit casts.</doc>
