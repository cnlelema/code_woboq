<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='152' ll='155' type='void clang::threadSafety::ThreadSafetyHandler::handleMutexHeldEndOfScope(llvm::StringRef Kind, Name LockName, clang::SourceLocation LocLocked, clang::SourceLocation LocEndOfScope, clang::threadSafety::LockErrorKind LEK)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='868' u='c' c='_ZNK12_GLOBAL__N_117LockableFactEntry29handleRemovalFromIntersectionERKNS_7FactSetERNS_11FactManagerEN5clang14SourceLocationENS6_12threadSafety13LockE12285615'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='935' u='c' c='_ZNK12_GLOBAL__N_123ScopedLockableFactEntry29handleRemovalFromIntersectionERKNS_7FactSetERNS_11FactManagerEN5clang14SourceLocationENS6_12threadSafety19787251'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='139'>/// Warn about situations where a mutex is sometimes held and sometimes not.
  /// The three situations are:
  /// 1. a mutex is locked on an &quot;if&quot; branch but not the &quot;else&quot; branch,
  /// 2, or a mutex is only held at the start of some loop iterations,
  /// 3. or when a mutex is locked but not unlocked inside a function.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param LockName -- A StringRef name for the lock expression, to be printed
  /// in the error message.
  /// \param LocLocked -- The location of the lock expression where the mutex is
  ///               locked
  /// \param LocEndOfScope -- The location of the end of the scope where the
  ///               mutex is no longer held
  /// \param LEK -- which of the three above cases we should warn for</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1712' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter25handleMutexHeldEndOfScopeEN4llvm9StringRefES4_NS_14SourceLocationES5_NS0_13LockErrorKindE'/>
