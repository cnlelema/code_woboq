<inh f='llvm/llvm/include/llvm/Pass.h' l='284' c='llvm::FunctionPass'/>
<def f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='50' ll='106'/>
<size>40</size>
<doc f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='28'>/// This is an alternative analysis pass to
/// BranchProbabilityInfoWrapperPass.  The difference is that with this pass the
/// branch probabilities are not computed when the analysis pass is executed but
/// rather when the BPI results is explicitly requested by the analysis client.
///
/// There are some additional requirements for any client pass that wants to use
/// the analysis:
///
/// 1. The pass needs to initialize dependent passes with:
///
///   INITIALIZE_PASS_DEPENDENCY(LazyBPIPass)
///
/// 2. Similarly, getAnalysisUsage should call:
///
///   LazyBranchProbabilityInfoPass::getLazyBPIAnalysisUsage(AU)
///
/// 3. The computed BPI should be requested with
///    getAnalysis&lt;LazyBranchProbabilityInfoPass&gt;().getBPI() before LoopInfo
///    could be invalidated for example by changing the CFG.
///
/// Note that it is expected that we wouldn&apos;t need this functionality for the
/// new PM since with the new PM, analyses are executed on demand.</doc>
<mbr r='llvm::LazyBranchProbabilityInfoPass::LBPI' o='256' t='std::unique_ptr&lt;LazyBranchProbabilityInfo&gt;'/>
<smbr r='llvm::LazyBranchProbabilityInfoPass::ID' t='char'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPassC1Ev'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass6getBPIEv'/>
<fun r='_ZNK4llvm29LazyBranchProbabilityInfoPass6getBPIEv'/>
<fun r='_ZNK4llvm29LazyBranchProbabilityInfoPass16getAnalysisUsageERNS_13AnalysisUsageE'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass23getLazyBPIAnalysisUsageERNS_13AnalysisUsageE'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass13runOnFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm29LazyBranchProbabilityInfoPass13releaseMemoryEv'/>
<fun r='_ZNK4llvm29LazyBranchProbabilityInfoPass5printERNS_11raw_ostreamEPKNS_6ModuleE'/>
