<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='723' type='bool llvm::DependenceInfo::weakZeroDstSIVtest(const llvm::SCEV * SrcCoeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurrentLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1812' ll='1887' type='bool llvm::DependenceInfo::weakZeroDstSIVtest(const llvm::SCEV * SrcCoeff, const llvm::SCEV * SrcConst, const llvm::SCEV * DstConst, const llvm::Loop * CurLoop, unsigned int Level, llvm::FullDependence &amp; Result, llvm::DependenceInfo::Constraint &amp; NewConstraint) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2189' u='c' c='_ZNK4llvm14DependenceInfo7testSIVEPKNS_4SCEVES3_RjRNS_14FullDependenceERNS0_10ConstraintERS3_'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='1781'>// weakZeroDstSIVtest -
// From the paper, Practical Dependence Testing, Section 4.2.2
//
// When we have a pair of subscripts of the form [c1 + a*i] and [c2],
// where i is an induction variable, c1 and c2 are loop invariant,
// and a is a constant, we can solve it exactly using the
// Weak-Zero SIV test.
//
// Given
//
//    c1 + a*i = c2
//
// we get
//
//    i = (c2 - c1)/a
//
// If i is not an integer, there&apos;s no dependence.
// If i &lt; 0 or &gt; UB, there&apos;s no dependence.
// If i = 0, the direction is &lt;= and peeling the
// 1st iteration will break the dependence.
// If i = UB, the direction is &gt;= and peeling the
// last iteration will break the dependence.
// Otherwise, the direction is *.
//
// Can prove independence. Failing that, we can sometimes refine
// the directions. Can sometimes show that first or last
// iteration carries all the dependences (so worth peeling).
//
// (see also weakZeroSrcSIVtest)
//
// Return true if dependence disproved.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='713'>/// weakZeroDstSIVtest - Tests the weak-zero SIV subscript pair
    /// (Src and Dst) for dependence.
    /// Things of the form [c1 + a*i] and [c2],
    /// where i is an induction variable, c1 and c2 are loop invariant,
    /// and a is a constant. See also weakZeroSrcSIVtest.
    /// Returns true if any possible dependence is disproved.
    /// If there might be a dependence, returns false.
    /// Sets appropriate direction entry.
    /// Set consistent to false.
    /// If loop peeling will break the dependence, mark appropriately.</doc>
