<dec f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.h' l='380' type='bool llvm::HexagonInstrInfo::isJumpWithinBranchRange(const llvm::MachineInstr &amp; MI, unsigned int offset) const'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp' l='176' u='c' c='_ZN12_GLOBAL__N_123HexagonBranchRelaxation16isJumpOutOfRangeERN4llvm12MachineInstrERNS1_8DenseMapIPNS1_17MachineBasicBlockEjNS1_12DenseMapInfoIS6_EENS15141014'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp' l='189' u='c' c='_ZN12_GLOBAL__N_123HexagonBranchRelaxation16isJumpOutOfRangeERN4llvm12MachineInstrERNS1_8DenseMapIPNS1_17MachineBasicBlockEjNS1_12DenseMapInfoIS6_EENS15141014'/>
<def f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='2260' ll='2300' type='bool llvm::HexagonInstrInfo::isJumpWithinBranchRange(const llvm::MachineInstr &amp; MI, unsigned int offset) const'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='2256'>// Return true if a given MI can accommodate given offset.
// Use abs estimate as oppose to the exact number.
// TODO: This will need to be changed to use MC level
// definition of instruction extendable field size.</doc>
