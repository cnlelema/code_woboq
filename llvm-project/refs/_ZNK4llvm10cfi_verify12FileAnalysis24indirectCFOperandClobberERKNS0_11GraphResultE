<dec f='llvm/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h' l='164' type='uint64_t llvm::cfi_verify::FileAnalysis::indirectCFOperandClobber(const llvm::cfi_verify::GraphResult &amp; Graph) const'/>
<use f='llvm/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.cpp' l='300' u='c' c='_ZNK4llvm10cfi_verify12FileAnalysis21validateCFIProtectionERKNS0_11GraphResultE'/>
<def f='llvm/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.cpp' l='306' ll='362' type='uint64_t llvm::cfi_verify::FileAnalysis::indirectCFOperandClobber(const llvm::cfi_verify::GraphResult &amp; Graph) const'/>
<doc f='llvm/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h' l='156'>// Returns the first place the operand register is clobbered between the CFI-
  // check and the indirect CF instruction execution. We do this by walking
  // backwards from the indirect CF and ensuring there is at most one load
  // involving the operand register (which is the indirect CF itself on x86).
  // If the register is not modified, returns the address of the indirect CF
  // instruction. The result is undefined if the provided graph does not fall
  // under either the FAIL_REGISTER_CLOBBERED or PROTECTED status (see
  // CFIProtectionStatus).</doc>
