<dec f='llvm/llvm/include/llvm/Transforms/Utils/ModuleUtils.h' l='96' type='void llvm::filterDeadComdatFunctions(llvm::Module &amp; M, SmallVectorImpl&lt;llvm::Function *&gt; &amp; DeadComdatFunctions)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/ModuleUtils.h' l='83'>/// Filter out potentially dead comdat functions where other entries keep the
/// entire comdat group alive.
///
/// This is designed for cases where functions appear to become dead but remain
/// alive due to other live entries in their comdat group.
///
/// The \p DeadComdatFunctions container should only have pointers to
/// `Function`s which are members of a comdat group and are believed to be
/// dead.
///
/// After this routine finishes, the only remaining `Function`s in \p
/// DeadComdatFunctions are those where every member of the comdat is listed
/// and thus removing them is safe (provided *all* are removed).</doc>
<use f='llvm/llvm/lib/Transforms/IPO/AlwaysInliner.cpp' l='77' u='c' c='_ZN4llvm17AlwaysInlinerPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='833' u='c' c='_ZN4llvm17LegacyInlinerBase19removeDeadFunctionsERNS_9CallGraphEb'/>
<def f='llvm/llvm/lib/Transforms/Utils/ModuleUtils.cpp' l='198' ll='260' type='void llvm::filterDeadComdatFunctions(llvm::Module &amp; M, SmallVectorImpl&lt;llvm::Function *&gt; &amp; DeadComdatFunctions)'/>
