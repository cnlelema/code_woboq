<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='1211' ll='1213' type='llvm::CmpInst::Predicate llvm::ICmpInst::getSignedPredicate() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='1207'>/// For example, EQ-&gt;EQ, SLE-&gt;SLE, UGT-&gt;SGT, etc.
  /// @returns the predicate that would be the result if the operand were
  /// regarded as signed.
  /// Return the signed version of the predicate</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='1508' u='c' c='_ZN4llvm12InstCombiner19foldICmpXorConstantERNS_8ICmpInstEPNS_14BinaryOperatorERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='1515' u='c' c='_ZN4llvm12InstCombiner19foldICmpXorConstantERNS_8ICmpInstEPNS_14BinaryOperatorERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='3504' u='c' c='_ZN4llvm12InstCombiner13foldICmpBinOpERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='3511' u='c' c='_ZN4llvm12InstCombiner13foldICmpBinOpERNS_8ICmpInstE'/>
