<dec f='llvm/llvm/include/llvm/IR/Constants.h' l='278' type='static llvm::Constant * llvm::ConstantFP::getZeroValueForNegation(llvm::Type * Ty)'/>
<doc f='llvm/llvm/include/llvm/IR/Constants.h' l='275'>/// Floating point negation must be implemented with f(x) = -0.0 - x. This
  /// method returns the negative zero constant for floating point or vector
  /// floating point types; for all other types, it returns the null value.</doc>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='1930' u='c' c='_ZN5clang7CodeGen15CodeGenFunction15EmitBuiltinExprENS_10GlobalDeclEjPKNS_8CallExprENS0_15ReturnValueSlotE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='12784' u='c' c='_ZN5clang7CodeGen15CodeGenFunction18EmitPPCBuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='13257' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22EmitSystemZBuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='13267' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22EmitSystemZBuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='13277' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22EmitSystemZBuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGBuiltin.cpp' l='13293' u='c' c='_ZN5clang7CodeGen15CodeGenFunction22EmitSystemZBuiltinExprEjPKNS_8CallExprE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='3023' u='c' c='_ZN12_GLOBAL__N_117ScalarExprEmitter15VisitUnaryMinusEPKN5clang13UnaryOperatorE'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='3771' u='c' c='_ZL12buildFMulAddPN4llvm14BinaryOperatorEPNS_5ValueERKN5clang7CodeGen15CodeGenFunctionERNS5_11CGBuilderTyEbb'/>
<use f='llvm/clang/lib/CodeGen/CGExprScalar.cpp' l='3776' u='c' c='_ZL12buildFMulAddPN4llvm14BinaryOperatorEPNS_5ValueERKN5clang7CodeGen15CodeGenFunctionERNS5_11CGBuilderTyEbb'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp' l='306' u='c' c='_ZN4llvm12IRTranslator13translateFSubERKNS_4UserERNS_16MachineIRBuilderE'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='1462' u='c' c='_ZN4llvm15LegalizerHelper5lowerERNS_12MachineInstrEjNS_3LLTE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp' l='2975' u='c' c='_ZN4llvm19SelectionDAGBuilder9visitFSubERKNS_4UserE'/>
<def f='llvm/llvm/lib/IR/Constants.cpp' l='780' ll='785' type='static llvm::Constant * llvm::ConstantFP::getZeroValueForNegation(llvm::Type * Ty)'/>
<use f='llvm/llvm/lib/IR/Constants.cpp' l='2241' u='c' c='_ZN4llvm12ConstantExpr6getNegEPNS_8ConstantEbb'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2345' u='c' c='_ZN4llvm14BinaryOperator9CreateNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2353' u='c' c='_ZN4llvm14BinaryOperator9CreateNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2361' u='c' c='_ZN4llvm14BinaryOperator12CreateNSWNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2367' u='c' c='_ZN4llvm14BinaryOperator12CreateNSWNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2373' u='c' c='_ZN4llvm14BinaryOperator12CreateNUWNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2379' u='c' c='_ZN4llvm14BinaryOperator12CreateNUWNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2385' u='c' c='_ZN4llvm14BinaryOperator10CreateFNegEPNS_5ValueERKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='2392' u='c' c='_ZN4llvm14BinaryOperator10CreateFNegEPNS_5ValueERKNS_5TwineEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='666' u='c' c='_ZN12_GLOBAL__N_111FAddCombine10createFNegEPN4llvm5ValueE'/>
