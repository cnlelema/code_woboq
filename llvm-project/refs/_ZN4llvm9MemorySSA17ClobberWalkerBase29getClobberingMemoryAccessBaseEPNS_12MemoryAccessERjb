<dec f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='999' type='llvm::MemoryAccess * llvm::MemorySSA::ClobberWalkerBase::getClobberingMemoryAccessBase(llvm::MemoryAccess * , unsigned int &amp; , bool )'/>
<def f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='2316' ll='2392' type='llvm::MemoryAccess * llvm::MemorySSA::ClobberWalkerBase::getClobberingMemoryAccessBase(llvm::MemoryAccess * MA, unsigned int &amp; UpwardWalkLimit, bool SkipSelf)'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='993'>// Third argument (bool), defines whether the clobber search should skip the
  // original queried access. If true, there will be a follow-up query searching
  // for a clobber access past &quot;self&quot;. Note that the Optimized access is not
  // updated if a new clobber is found by this SkipSelf search. If this
  // additional query becomes heavily used we may decide to cache the result.
  // Walker instantiations will decide how to set the SkipSelf bool.</doc>
