<dec f='llvm/llvm/include/llvm/ADT/APInt.h' l='1913' type='static int llvm::APInt::tcDivide(WordType * lhs, const WordType * rhs, WordType * remainder, WordType * scratch, unsigned int parts)'/>
<doc f='llvm/llvm/include/llvm/ADT/APInt.h' l='1904'>/// If RHS is zero LHS and REMAINDER are left unchanged, return one.
  /// Otherwise set LHS to LHS / RHS with the fractional part discarded, set
  /// REMAINDER to the remainder, return zero.  i.e.
  ///
  ///  OLD_LHS = RHS * LHS + REMAINDER
  ///
  /// SCRATCH is a bignum of the same size as the operands and result for use by
  /// the routine; its contents need not be initialized and are destroyed.  LHS,
  /// REMAINDER and SCRATCH must be distinct.</doc>
<def f='llvm/llvm/lib/Support/APInt.cpp' l='2548' ll='2586' type='static int llvm::APInt::tcDivide(WordType * lhs, const WordType * rhs, WordType * remainder, WordType * srhs, unsigned int parts)'/>
<doc f='llvm/llvm/lib/Support/APInt.cpp' l='2538'>/* If RHS is zero LHS and REMAINDER are left unchanged, return one.
   Otherwise set LHS to LHS / RHS with the fractional part discarded,
   set REMAINDER to the remainder, return zero.  i.e.

   OLD_LHS = RHS * LHS + REMAINDER

   SCRATCH is a bignum of the same size as the operands and result for
   use by the routine; its contents need not be initialized and are
   destroyed.  LHS, REMAINDER and SCRATCH must be distinct.
*/</doc>
