<dec f='llvm/clang/lib/CodeGen/VarBypassDetector.h' l='63' type='bool clang::CodeGen::VarBypassDetector::BuildScopeInformation(const clang::Stmt * S, unsigned int &amp; origParentScope)'/>
<use f='llvm/clang/lib/CodeGen/VarBypassDetector.cpp' l='26' u='c' c='_ZN5clang7CodeGen17VarBypassDetector4InitEPKNS_4StmtE'/>
<use f='llvm/clang/lib/CodeGen/VarBypassDetector.cpp' l='44' u='c' c='_ZN5clang7CodeGen17VarBypassDetector21BuildScopeInformationEPKNS_4DeclERj'/>
<def f='llvm/clang/lib/CodeGen/VarBypassDetector.cpp' l='53' ll='133' type='bool clang::CodeGen::VarBypassDetector::BuildScopeInformation(const clang::Stmt * S, unsigned int &amp; origParentScope)'/>
<doc f='llvm/clang/lib/CodeGen/VarBypassDetector.cpp' l='49'>/// Walk through the statements, adding any labels or gotos to
/// LabelAndGotoScopes and recursively walking the AST as needed.
/// Returns false if we failed to build scope information and can&apos;t tell for
/// which vars are being bypassed.</doc>
