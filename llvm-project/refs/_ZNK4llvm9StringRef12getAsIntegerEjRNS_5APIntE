<dec f='llvm/llvm/include/llvm/ADT/StringRef.h' l='542' type='bool llvm::StringRef::getAsInteger(unsigned int Radix, llvm::APInt &amp; Result) const'/>
<doc f='llvm/llvm/include/llvm/ADT/StringRef.h' l='532'>/// Parse the current string as an integer of the specified \p Radix, or of
    /// an autosensed radix if the \p Radix given is 0.  The current value in
    /// \p Result is discarded, and the storage is changed to be wide enough to
    /// store the parsed integer.
    ///
    /// \returns true if the string does not solely consist of a valid
    /// non-empty number in the appropriate base.
    ///
    /// APInt::fromString is superficially similar but assumes the
    /// string is well-formed in the given radix.</doc>
<use f='llvm/clang/lib/AST/ExprConstant.cpp' l='11014' u='c' c='_ZL21TryEvaluateBuiltinNaNRKN5clang10ASTContextENS_8QualTypeEPKNS_4ExprEbRN4llvm7APFloatE'/>
<use f='llvm/clang/lib/Sema/SemaDeclAttr.cpp' l='4164' u='c' c='_ZN5clang4Sema11AddModeAttrENS_11SourceRangeEPNS_4DeclEPNS_14IdentifierInfoEjb'/>
<use f='llvm/llvm/lib/MC/MCParser/AsmLexer.cpp' l='312' u='c' c='_ZN4llvm8AsmLexer8LexDigitEv'/>
<use f='llvm/llvm/lib/MC/MCParser/AsmLexer.cpp' l='340' u='c' c='_ZN4llvm8AsmLexer8LexDigitEv'/>
<use f='llvm/llvm/lib/MC/MCParser/AsmLexer.cpp' l='374' u='c' c='_ZN4llvm8AsmLexer8LexDigitEv'/>
<use f='llvm/llvm/lib/MC/MCParser/AsmLexer.cpp' l='400' u='c' c='_ZN4llvm8AsmLexer8LexDigitEv'/>
<use f='llvm/llvm/lib/MC/MCParser/AsmLexer.cpp' l='419' u='c' c='_ZN4llvm8AsmLexer8LexDigitEv'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='1487' u='c' c='_ZN12_GLOBAL__N_123parseSimplifyCFGOptionsEN4llvm9StringRefE'/>
<def f='llvm/llvm/lib/Support/StringRef.cpp' l='508' ll='581' type='bool llvm::StringRef::getAsInteger(unsigned int Radix, llvm::APInt &amp; Result) const'/>
<use f='llvm/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp' l='1712' u='c' c='_ZN12_GLOBAL__N_112X86AsmParser21ParseIntelDotOperatorERNS0_21IntelExprStateMachineERN4llvm5SMLocE'/>
