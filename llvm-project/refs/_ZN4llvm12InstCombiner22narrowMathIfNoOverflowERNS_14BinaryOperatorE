<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='541' type='llvm::Instruction * llvm::InstCombiner::narrowMathIfNoOverflow(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1268' u='c' c='_ZN4llvm12InstCombiner8visitAddERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp' l='1831' u='c' c='_ZN4llvm12InstCombiner8visitSubERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='329' u='c' c='_ZN4llvm12InstCombiner8visitMulERNS_14BinaryOperatorE'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1527' ll='1578' type='llvm::Instruction * llvm::InstCombiner::narrowMathIfNoOverflow(llvm::BinaryOperator &amp; BO)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1524'>/// Try to narrow the width of a binop if at least 1 operand is an extend of
/// of a value. This requires a potentially expensive known bits check to make
/// sure the narrow op does not overflow.</doc>
