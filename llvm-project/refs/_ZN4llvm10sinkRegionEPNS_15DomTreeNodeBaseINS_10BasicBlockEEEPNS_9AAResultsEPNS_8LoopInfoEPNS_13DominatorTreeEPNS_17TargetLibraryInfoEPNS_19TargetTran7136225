<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='119' type='bool llvm::sinkRegion(DomTreeNode * , AliasAnalysis * , llvm::LoopInfo * , llvm::DominatorTree * , llvm::TargetLibraryInfo * , llvm::TargetTransformInfo * , llvm::Loop * , llvm::AliasSetTracker * , llvm::MemorySSAUpdater * , llvm::ICFLoopSafetyInfo * , llvm::SinkAndHoistLICMFlags &amp; , llvm::OptimizationRemarkEmitter * )'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='111'>/// Walk the specified region of the CFG (defined by all blocks
/// dominated by the specified block, and that are in the current loop) in
/// reverse depth first order w.r.t the DominatorTree. This allows us to visit
/// uses before definitions, allowing us to sink a loop body in one pass without
/// iteration. Takes DomTreeNode, AliasAnalysis, LoopInfo, DominatorTree,
/// DataLayout, TargetLibraryInfo, Loop, AliasSet information for all
/// instructions of the loop and loop safety information as
/// arguments. Diagnostics is emitted via \p ORE. It returns changed status.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='381' u='c' c='_ZN12_GLOBAL__N_123LoopInvariantCodeMotion9runOnLoopEPN4llvm4LoopEPNS1_9AAResultsEPNS1_8LoopInfoEPNS1_13DominatorTreeEPNS1_17TargetLibraryInfoEPNS1_1914145461'/>
<def f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='485' ll='550' type='bool llvm::sinkRegion(DomTreeNode * N, AliasAnalysis * AA, llvm::LoopInfo * LI, llvm::DominatorTree * DT, llvm::TargetLibraryInfo * TLI, llvm::TargetTransformInfo * TTI, llvm::Loop * CurLoop, llvm::AliasSetTracker * CurAST, llvm::MemorySSAUpdater * MSSAU, llvm::ICFLoopSafetyInfo * SafetyInfo, llvm::SinkAndHoistLICMFlags &amp; Flags, llvm::OptimizationRemarkEmitter * ORE)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='480'>/// Walk the specified region of the CFG (defined by all blocks dominated by
/// the specified block, and that are in the current loop) in reverse depth
/// first order w.r.t the DominatorTree.  This allows us to visit uses before
/// definitions, allowing us to sink a loop body in one pass without iteration.
///</doc>
