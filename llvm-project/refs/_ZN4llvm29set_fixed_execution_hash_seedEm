<dec f='llvm/llvm/include/llvm/ADT/Hashing.h' l='135' type='void llvm::set_fixed_execution_hash_seed(uint64_t fixed_value)'/>
<doc f='llvm/llvm/include/llvm/ADT/Hashing.h' l='121'>/// Override the execution seed with a fixed value.
///
/// This hashing library uses a per-execution seed designed to change on each
/// run with high probability in order to ensure that the hash codes are not
/// attackable and to ensure that output which is intended to be stable does
/// not rely on the particulars of the hash codes produced.
///
/// That said, there are use cases where it is important to be able to
/// reproduce *exactly* a specific behavior. To that end, we provide a function
/// which will forcibly set the seed to a fixed value. This must be done at the
/// start of the program, before any hashes are computed. Also, it cannot be
/// undone. This makes it thread-hostile and very hard to use outside of
/// immediately on start of a simple program designed for reproducible
/// behavior.</doc>
<def f='llvm/llvm/lib/Support/Hashing.cpp' l='26' ll='28' type='void llvm::set_fixed_execution_hash_seed(uint64_t fixed_value)'/>
<doc f='llvm/llvm/lib/Support/Hashing.cpp' l='24'>// Implement the function for forced setting of the fixed seed.
// FIXME: Use atomic operations here so that there is no data race.</doc>
