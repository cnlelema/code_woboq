<dec f='llvm/clang/include/clang/Sema/Sema.h' l='3403' type='clang::TypoExpr * clang::Sema::CorrectTypoDelayed(const clang::DeclarationNameInfo &amp; Typo, Sema::LookupNameKind LookupKind, clang::Scope * S, clang::CXXScopeSpec * SS, clang::CorrectionCandidateCallback &amp; CCC, TypoDiagnosticGenerator TDG, TypoRecoveryCallback TRC, clang::Sema::CorrectTypoKind Mode, clang::DeclContext * MemberContext = nullptr, bool EnteringContext = false, const clang::ObjCObjectPointerType * OPT = nullptr)'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='2020' u='c' c='_ZN5clang4Sema19DiagnoseEmptyLookupEPNS_5ScopeERNS_12CXXScopeSpecERNS_12LookupResultERNS_27CorrectionCandidateCallbackEPNS_24TemplateArgumentListInfoE5867693'/>
<def f='llvm/clang/lib/Sema/SemaLookup.cpp' l='4988' ll='5020' type='clang::TypoExpr * clang::Sema::CorrectTypoDelayed(const clang::DeclarationNameInfo &amp; TypoName, Sema::LookupNameKind LookupKind, clang::Scope * S, clang::CXXScopeSpec * SS, clang::CorrectionCandidateCallback &amp; CCC, TypoDiagnosticGenerator TDG, TypoRecoveryCallback TRC, clang::Sema::CorrectTypoKind Mode, clang::DeclContext * MemberContext = nullptr, bool EnteringContext = false, const clang::ObjCObjectPointerType * OPT = nullptr)'/>
<doc f='llvm/clang/lib/Sema/SemaLookup.cpp' l='4950'>/// Try to &quot;correct&quot; a typo in the source code by finding
/// visible declarations whose names are similar to the name that was
/// present in the source code.
///
/// \param TypoName the \c DeclarationNameInfo structure that contains
/// the name that was present in the source code along with its location.
///
/// \param LookupKind the name-lookup criteria used to search for the name.
///
/// \param S the scope in which name lookup occurs.
///
/// \param SS the nested-name-specifier that precedes the name we&apos;re
/// looking for, if present.
///
/// \param CCC A CorrectionCandidateCallback object that provides further
/// validation of typo correction candidates. It also provides flags for
/// determining the set of keywords permitted.
///
/// \param TDG A TypoDiagnosticGenerator functor that will be used to print
/// diagnostics when the actual typo correction is attempted.
///
/// \param TRC A TypoRecoveryCallback functor that will be used to build an
/// Expr from a typo correction candidate.
///
/// \param MemberContext if non-NULL, the context in which to look for
/// a member access expression.
///
/// \param EnteringContext whether we&apos;re entering the context described by
/// the nested-name-specifier SS.
///
/// \param OPT when non-NULL, the search for visible declarations will
/// also walk the protocols in the qualified interfaces of \p OPT.
///
/// \returns a new \c TypoExpr that will later be replaced in the AST with an
/// Expr representing the result of performing typo correction, or nullptr if
/// typo correction is not possible. If nullptr is returned, no diagnostics will
/// be emitted and it is the responsibility of the caller to emit any that are
/// needed.</doc>
