<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='664' type='bool llvm::RegBankSelect::runOnMachineFunction(llvm::MachineFunction &amp; MF)'/>
<inh f='llvm/llvm/include/llvm/CodeGen/MachineFunctionPass.h' l='46' c='_ZN4llvm19MachineFunctionPass20runOnMachineFunctionERNS_15MachineFunctionE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='652' ll='717' type='bool llvm::RegBankSelect::runOnMachineFunction(llvm::MachineFunction &amp; MF)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='641'>/// Walk through \p MF and assign a register bank to every virtual register
  /// that are still mapped to nothing.
  /// The target needs to provide a RegisterBankInfo and in particular
  /// override RegisterBankInfo::getInstrMapping.
  ///
  /// Simplified algo:
  /// \code
  ///   RBI = MF.subtarget.getRegBankInfo()
  ///   MIRBuilder.setMF(MF)
  ///   for each bb in MF
  ///     for each inst in bb
  ///       MIRBuilder.setInstr(inst)
  ///       MappingCosts = RBI.getMapping(inst);
  ///       Idx = findIdxOfMinCost(MappingCosts)
  ///       CurRegBank = MappingCosts[Idx].RegBank
  ///       MRI.setRegBank(inst.getOperand(0).getReg(), CurRegBank)
  ///       for each argument in inst
  ///         if (CurRegBank != argument.RegBank)
  ///           ArgReg = argument.getReg()
  ///           Tmp = MRI.createNewVirtual(MRI.getSize(ArgReg), CurRegBank)
  ///           MIRBuilder.buildInstr(COPY, Tmp, ArgReg)
  ///           inst.getOperand(argument.getOperandNo()).setReg(Tmp)
  /// \endcode</doc>
