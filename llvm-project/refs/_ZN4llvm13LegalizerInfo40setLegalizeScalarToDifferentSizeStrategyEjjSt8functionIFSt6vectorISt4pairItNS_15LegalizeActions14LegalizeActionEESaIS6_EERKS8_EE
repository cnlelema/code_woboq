<def f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h' l='955' ll='962' type='void llvm::LegalizerInfo::setLegalizeScalarToDifferentSizeStrategy(const unsigned int Opcode, const unsigned int TypeIdx, SizeChangeStrategy S)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h' l='939'>/// The setAction calls record the non-size-changing legalization actions
  /// to take on specificly-sized types. The SizeChangeStrategy defines what
  /// to do when the size of the type needs to be changed to reach a legally
  /// sized type (i.e., one that was defined through a setAction call).
  /// e.g.
  /// setAction ({G_ADD, 0, LLT::scalar(32)}, Legal);
  /// setLegalizeScalarToDifferentSizeStrategy(
  ///   G_ADD, 0, widenToLargerTypesAndNarrowToLargest);
  /// will end up defining getAction({G_ADD, 0, T}) to return the following
  /// actions for different scalar types T:
  ///  LLT::scalar(1)..LLT::scalar(31): {WidenScalar, 0, LLT::scalar(32)}
  ///  LLT::scalar(32):                 {Legal, 0, LLT::scalar(32)}
  ///  LLT::scalar(33)..:               {NarrowScalar, 0, LLT::scalar(32)}
  ///
  /// If no SizeChangeAction gets defined, through this function,
  /// the default is unsupportedForDifferentSizes.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='239' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='241' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='243' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='245' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='247' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='250' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='252' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='254' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='256' u='c' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/Target/ARM/ARMLegalizerInfo.cpp' l='108' u='c' c='_ZN4llvm16ARMLegalizerInfoC1ERKNS_12ARMSubtargetE'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='72' u='c' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='74' u='c' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='76' u='c' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='78' u='c' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='80' u='c' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='54' u='c' c='_ZN12_GLOBAL__N_133LegalizerInfoTest_ScalarRISC_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='133' u='c' c='_ZN12_GLOBAL__N_136LegalizerInfoTest_MultipleTypes_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='157' u='c' c='_ZN12_GLOBAL__N_136LegalizerInfoTest_MultipleSteps_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='176' u='c' c='_ZN12_GLOBAL__N_141LegalizerInfoTest_SizeChangeStrategy_Test8TestBodyEv'/>
