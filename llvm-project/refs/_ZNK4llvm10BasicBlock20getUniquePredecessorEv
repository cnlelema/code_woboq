<dec f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='233' type='const llvm::BasicBlock * llvm::BasicBlock::getUniquePredecessor() const'/>
<use f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='236' u='c' c='_ZN4llvm10BasicBlock20getUniquePredecessorEv'/>
<doc f='llvm/llvm/include/llvm/IR/BasicBlock.h' l='227'>/// Return the predecessor of this block if it has a unique predecessor
  /// block. Otherwise return a null pointer.
  ///
  /// Note that unique predecessor doesn&apos;t mean single edge, there can be
  /// multiple edges from the unique predecessor to this block (for example a
  /// switch statement with multiple cases having the same destination).</doc>
<use f='llvm/llvm/include/llvm/IR/Statepoint.h' l='348' u='c' c='_ZNK4llvm16GCProjectionInst13getStatepointEv'/>
<def f='llvm/llvm/lib/IR/BasicBlock.cpp' l='246' ll='258' type='const llvm::BasicBlock * llvm::BasicBlock::getUniquePredecessor() const'/>
<doc f='llvm/llvm/lib/IR/BasicBlock.cpp' l='241'>/// If this basic block has a unique predecessor block,
/// return the block, otherwise return a null pointer.
/// Note that unique predecessor doesn&apos;t mean single edge, there can be
/// multiple edges from the unique predecessor to this block (for example
/// a switch statement with multiple cases having the same destination).</doc>
