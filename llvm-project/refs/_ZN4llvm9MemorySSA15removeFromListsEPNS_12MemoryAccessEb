<dec f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='827' type='void llvm::MemorySSA::removeFromLists(llvm::MemoryAccess * , bool ShouldDelete = true)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1643' u='c' c='_ZN4llvm9MemorySSA16prepareForMoveToEPNS_12MemoryAccessEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1812' ll='1837' type='void llvm::MemorySSA::removeFromLists(llvm::MemoryAccess * MA, bool ShouldDelete = true)'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1806'>/// Properly remove \p MA from all of MemorySSA&apos;s lists.
///
/// Because of the way the intrusive list and use lists work, it is important to
/// do removal in the right order.
/// ShouldDelete defaults to true, and will cause the memory access to also be
/// deleted, not just removed.</doc>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1210' u='c' c='_ZN4llvm16MemorySSAUpdater18removeMemoryAccessEPNS_12MemoryAccessEb'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1256' u='c' c='_ZN4llvm16MemorySSAUpdater12removeBlocksERKNS_15SmallPtrSetImplIPNS_10BasicBlockEEE'/>
