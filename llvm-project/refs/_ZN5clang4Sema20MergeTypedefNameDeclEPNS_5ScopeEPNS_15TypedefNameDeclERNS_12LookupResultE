<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2633' type='void clang::Sema::MergeTypedefNameDecl(clang::Scope * S, clang::TypedefNameDecl * New, clang::LookupResult &amp; OldDecls)'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='2138' ll='2307' type='void clang::Sema::MergeTypedefNameDecl(clang::Scope * S, clang::TypedefNameDecl * New, clang::LookupResult &amp; OldDecls)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='5841' u='c' c='_ZN5clang4Sema20ActOnTypedefNameDeclEPNS_5ScopeEPNS_11DeclContextEPNS_15TypedefNameDeclERNS_12LookupResultERb'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='2133'>/// MergeTypedefNameDecl - We just parsed a typedef &apos;New&apos; which has the
/// same name and scope as a previous declaration &apos;Old&apos;.  Figure out
/// how to resolve this situation, merging decls or emitting
/// diagnostics as appropriate. If there was an error, set New to be invalid.
///</doc>
