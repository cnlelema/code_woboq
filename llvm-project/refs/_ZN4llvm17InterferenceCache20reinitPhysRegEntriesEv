<dec f='llvm/llvm/lib/CodeGen/InterferenceCache.h' l='168' type='void llvm::InterferenceCache::reinitPhysRegEntries()'/>
<def f='llvm/llvm/lib/CodeGen/InterferenceCache.cpp' l='46' ll='52' type='void llvm::InterferenceCache::reinitPhysRegEntries()'/>
<use f='llvm/llvm/lib/CodeGen/InterferenceCache.cpp' l='62' u='c' c='_ZN4llvm17InterferenceCache4initEPNS_15MachineFunctionEPNS_17LiveIntervalUnionEPNS_11SlotIndexesEPNS_13LiveIntervalsEPKNS_18TargetRegisterInfoE'/>
<doc f='llvm/llvm/lib/CodeGen/InterferenceCache.cpp' l='38'>// Initializes PhysRegEntries (instead of a SmallVector, PhysRegEntries is a
// buffer of size NumPhysRegs to speed up alloc/clear for targets with large
// reg files). Calloced memory is used for good form, and quites tools like
// Valgrind too, but zero initialized memory is not required by the algorithm:
// this is because PhysRegEntries works like a SparseSet and its entries are
// only valid when there is a corresponding CacheEntries assignment. There is
// also support for when pass managers are reused for targets with different
// numbers of PhysRegs: in this case PhysRegEntries is freed and reinitialized.</doc>
