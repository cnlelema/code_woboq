<dec f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='506' type='void llvm::maybeMarkSanitizerLibraryCallNoBuiltin(llvm::CallInst * CI, const llvm::TargetLibraryInfo * TLI)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/Local.h' l='498'>//===----------------------------------------------------------------------===//
//  Sanitizer utilities
//

/// Given a CallInst, check if it calls a string function known to CodeGen,
/// and mark it with NoBuiltin if so.  To be used by sanitizers that intend
/// to intercept string functions and want to avoid converting them to target
/// specific instructions.</doc>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='2675' u='c' c='_ZN12_GLOBAL__N_116AddressSanitizer18instrumentFunctionERN4llvm8FunctionEPKNS1_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp' l='3265' u='c' c='_ZN12_GLOBAL__N_122MemorySanitizerVisitor13visitCallSiteEN4llvm8CallSiteE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp' l='460' u='c' c='_ZN12_GLOBAL__N_115ThreadSanitizer16sanitizeFunctionERN4llvm8FunctionERKNS1_17TargetLibraryInfoE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2858' ll='2866' type='void llvm::maybeMarkSanitizerLibraryCallNoBuiltin(llvm::CallInst * CI, const llvm::TargetLibraryInfo * TLI)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2853'>// CodeGen has special handling for some string functions that may replace
// them with target-specific intrinsics.  Since that&apos;d skip our interceptors
// in ASan/MSan/TSan/DFSan, and thus make us miss some memory accesses,
// we mark affected calls as NoBuiltin, which will disable optimization
// in CodeGen.</doc>
