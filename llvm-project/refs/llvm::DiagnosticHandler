<def f='llvm/llvm/include/llvm/IR/DiagnosticHandler.h' l='24' ll='71'/>
<size>24</size>
<doc f='llvm/llvm/include/llvm/IR/DiagnosticHandler.h' l='20'>/// This is the base class for diagnostic handling in LLVM.
/// The handleDiagnostics method must be overriden by the subclasses to handle
/// diagnostic. The *RemarkEnabled methods can be overriden to control
/// which remarks are enabled.</doc>
<mbr r='llvm::DiagnosticHandler::DiagnosticContext' o='64' t='void *'/>
<fun r='_ZN4llvm17DiagnosticHandlerC1EPv'/>
<fun r='_ZN4llvm17DiagnosticHandlerD1Ev'/>
<mbr r='llvm::DiagnosticHandler::DiagHandlerCallback' o='128' t='DiagnosticHandlerTy'/>
<fun r='_ZN4llvm17DiagnosticHandler17handleDiagnosticsERKNS_14DiagnosticInfoE'/>
<fun r='_ZNK4llvm17DiagnosticHandler23isAnalysisRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler24isMissedOptRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler24isPassedOptRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler18isAnyRemarkEnabledENS_9StringRefE'/>
<fun r='_ZNK4llvm17DiagnosticHandler18isAnyRemarkEnabledEv'/>
<ovr f='llvm/llvm/include/llvm/LTO/Config.h' l='200' c='llvm::lto::LTOLLVMDiagnosticHandler'/>
<ovr f='llvm/clang/lib/CodeGen/CodeGenAction.cpp' l='51' c='clang::ClangDiagnosticHandler'/>
<ovr f='llvm/llvm/lib/LTO/LTOCodeGenerator.cpp' l='666' c='(anonymousnamespace)::LTODiagnosticHandler'/>
<ovr f='llvm/llvm/tools/llc/llc.cpp' l='249' c='LLCDiagnosticHandler'/>
<ovr f='llvm/llvm/tools/llvm-dis/llvm-dis.cpp' l='123' c='(anonymousnamespace)::LLVMDisDiagnosticHandler'/>
<ovr f='llvm/llvm/tools/llvm-link/llvm-link.cpp' l='185' c='(anonymousnamespace)::LLVMLinkDiagnosticHandler'/>
<ovr f='llvm/llvm/tools/llvm-lto/llvm-lto.cpp' l='257' c='(anonymousnamespace)::LLVMLTODiagnosticHandler'/>
<ovr f='llvm/llvm/tools/lto/lto.cpp' l='78' c='LTOToolDiagnosticHandler'/>
