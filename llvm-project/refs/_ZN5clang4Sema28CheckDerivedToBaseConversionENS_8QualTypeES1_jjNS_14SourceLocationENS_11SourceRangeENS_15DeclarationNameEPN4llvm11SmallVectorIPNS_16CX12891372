<dec f='llvm/clang/include/clang/Sema/Sema.h' l='6187' type='bool clang::Sema::CheckDerivedToBaseConversion(clang::QualType Derived, clang::QualType Base, unsigned int InaccessibleBaseID, unsigned int AmbigiousBaseConvID, clang::SourceLocation Loc, clang::SourceRange Range, clang::DeclarationName Name, CXXCastPath * BasePath, bool IgnoreAccess = false)'/>
<def f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='2629' ll='2709' type='bool clang::Sema::CheckDerivedToBaseConversion(clang::QualType Derived, clang::QualType Base, unsigned int InaccessibleBaseID, unsigned int AmbigiousBaseConvID, clang::SourceLocation Loc, clang::SourceRange Range, clang::DeclarationName Name, CXXCastPath * BasePath, bool IgnoreAccess = false)'/>
<doc f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='2617'>/// CheckDerivedToBaseConversion - Check whether the Derived-to-Base
/// conversion (where Derived and Base are class types) is
/// well-formed, meaning that the conversion is unambiguous (and
/// that all of the base classes are accessible). Returns true
/// and emits a diagnostic if the code is ill-formed, returns false
/// otherwise. Loc is the location where this routine should point to
/// if there is an error, and Range is the source range to highlight
/// if there is an error.
///
/// If either InaccessibleBaseID or AmbigiousBaseConvID are 0, then the
/// diagnostic for the respective type of error will be suppressed, but the
/// check for ill-formed code will still be performed.</doc>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='2943' u='c' c='_ZN5clang4Sema22CheckPointerConversionEPNS_4ExprENS_8QualTypeERNS_8CastKindERN4llvm11SmallVectorIPNS_16CXXBaseSpecifierELj4EEEbb'/>
