<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2713' type='clang::CodeGen::Address'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2734' u='w' c='_ZN5clang7CodeGen15CodeGenFunction15AutoVarEmissionC1ENS2_7InvalidE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2738' u='w' c='_ZN5clang7CodeGen15CodeGenFunction15AutoVarEmissionC1ERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2742' u='m' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission18wasEmittedAsGlobalEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2759' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission19getAllocatedAddressEv'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2769' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission16getObjectAddressERS1_'/>
<use f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2771' u='r' c='_ZNK5clang7CodeGen15CodeGenFunction15AutoVarEmission16getObjectAddressERS1_'/>
<offset>64</offset>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2709'>/// The address of the alloca for languages with explicit address space
    /// (e.g. OpenCL) or alloca casted to generic pointer for address space
    /// agnostic languages (e.g. C++). Invalid if the variable was emitted
    /// as a global constant.</doc>
<use f='llvm/clang/lib/CodeGen/CGBlocks.cpp' l='2838' u='r' c='_ZN5clang7CodeGen15CodeGenFunction22emitByrefStructureInitERKNS1_15AutoVarEmissionE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1450' u='w' c='_ZN5clang7CodeGen15CodeGenFunction17EmitAutoVarAllocaERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1576' u='w' c='_ZN5clang7CodeGen15CodeGenFunction17EmitAutoVarAllocaERKNS_7VarDeclE'/>
<use f='llvm/clang/lib/CodeGen/CGDecl.cpp' l='1722' u='r' c='_ZN5clang7CodeGen15CodeGenFunction15EmitAutoVarInitERKNS1_15AutoVarEmissionE'/>
