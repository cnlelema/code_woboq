<dec f='llvm/lld/ELF/ScriptLexer.h' l='44' type='void lld::elf::ScriptLexer::maybeSplitExpr()'/>
<def f='llvm/lld/ELF/ScriptLexer.cpp' l='215' ll='224' type='void lld::elf::ScriptLexer::maybeSplitExpr()'/>
<use f='llvm/lld/ELF/ScriptLexer.cpp' l='227' u='c' c='_ZN3lld3elf11ScriptLexer4nextEv'/>
<doc f='llvm/lld/ELF/ScriptLexer.cpp' l='206'>// In contexts where expressions are expected, the lexer should apply
// different tokenization rules than the default one. By default,
// arithmetic operator characters are regular characters, but in the
// expression context, they should be independent tokens.
//
// For example, &quot;foo*3&quot; should be tokenized to &quot;foo&quot;, &quot;*&quot; and &quot;3&quot; only
// in the expression context.
//
// This function may split the current token into multiple tokens.</doc>
