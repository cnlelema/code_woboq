<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='562' type='bool llvm::RegBankSelect::repairReg(llvm::MachineOperand &amp; MO, const RegisterBankInfo::ValueMapping &amp; ValMapping, RegBankSelect::RepairingPlacement &amp; RepairPt, const iterator_range&lt;SmallVectorImpl&lt;unsigned int&gt;::const_iterator&gt; &amp; NewVRegs)'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='134' ll='235' type='bool llvm::RegBankSelect::repairReg(llvm::MachineOperand &amp; MO, const RegisterBankInfo::ValueMapping &amp; ValMapping, RegBankSelect::RepairingPlacement &amp; RepairPt, const iterator_range&lt;SmallVectorImpl&lt;unsigned int&gt;::const_iterator&gt; &amp; NewVRegs)'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='608' u='c' c='_ZN4llvm13RegBankSelect12applyMappingERNS_12MachineInstrERKNS_16RegisterBankInfo18InstructionMappingERNS_15SmallVectorImplINS0_18RepairingPlacementEEE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h' l='530'>/// Insert repairing code for \p Reg as specified by \p ValMapping.
  /// The repairing placement is specified by \p RepairPt.
  /// \p NewVRegs contains all the registers required to remap \p Reg.
  /// In other words, the number of registers in NewVRegs must be equal
  /// to ValMapping.BreakDown.size().
  ///
  /// The transformation could be sketched as:
  /// \code
  /// ... = op Reg
  /// \endcode
  /// Becomes
  /// \code
  /// &lt;NewRegs&gt; = COPY or extract Reg
  /// ... = op Reg
  /// \endcode
  ///
  /// and
  /// \code
  /// Reg = op ...
  /// \endcode
  /// Becomes
  /// \code
  /// Reg = op ...
  /// Reg = COPY or build_sequence &lt;NewRegs&gt;
  /// \endcode
  ///
  /// \pre NewVRegs.size() == ValMapping.BreakDown.size()
  ///
  /// \note The caller is supposed to do the rewriting of op if need be.
  /// I.e., Reg = op ... =&gt; &lt;NewRegs&gt; = NewOp ...
  ///
  /// \return True if the repairing worked, false otherwise.</doc>
