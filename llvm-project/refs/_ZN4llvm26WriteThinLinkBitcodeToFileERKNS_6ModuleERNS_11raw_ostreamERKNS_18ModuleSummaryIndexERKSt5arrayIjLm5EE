<dec f='llvm/llvm/include/llvm/Bitcode/BitcodeWriter.h' l='141' type='void llvm::WriteThinLinkBitcodeToFile(const llvm::Module &amp; M, llvm::raw_ostream &amp; Out, const llvm::ModuleSummaryIndex &amp; Index, const ModuleHash &amp; ModHash)'/>
<doc f='llvm/llvm/include/llvm/Bitcode/BitcodeWriter.h' l='134'>/// Write the specified thin link bitcode file (i.e., the minimized bitcode
  /// file) to the given raw output stream, where it will be written in a new
  /// bitcode block. The thin link bitcode file is used for thin link, and it
  /// only contains the necessary information for thin link.
  ///
  /// ModHash is for use in ThinLTO incremental build, generated while the IR
  /// bitcode file writing.</doc>
<def f='llvm/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp' l='4564' ll='4576' type='void llvm::WriteThinLinkBitcodeToFile(const llvm::Module &amp; M, llvm::raw_ostream &amp; Out, const llvm::ModuleSummaryIndex &amp; Index, const ModuleHash &amp; ModHash)'/>
<doc f='llvm/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp' l='4561'>// Write the specified thin link bitcode file to the given raw output stream,
// where it will be written in a new bitcode block. This is used when
// writing the per-module index file for ThinLTO.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp' l='459' u='c' c='_ZN12_GLOBAL__N_119writeThinLTOBitcodeERN4llvm11raw_ostreamEPS1_NS0_12function_refIFRNS0_9AAResultsERNS0_8FunctionEEEERNS0_6ModuleEPKNS0_18ModuleSummaryIndexE'/>
