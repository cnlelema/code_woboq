<def f='llvm/clang/lib/Format/FormatTokenLexer.h' l='37' ll='118'/>
<size>1592</size>
<fun r='_ZN5clang6format16FormatTokenLexerC1ERKNS_13SourceManagerENS_6FileIDEjRKNS0_11FormatStyleENS0_8encoding8EncodingE'/>
<fun r='_ZN5clang6format16FormatTokenLexer3lexEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer11getKeywordsEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer22tryMergePreviousTokensEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer16tryMergeLessLessEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer23tryMergeNSStringLiteralEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer27tryMergeJSPrivateIdentifierEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer35tryMergeCSharpVerbatimStringLiteralEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer30tryMergeCSharpKeywordVariablesEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer30tryMergeCSharpNullConditionalsEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer28tryMergeCSharpDoubleQuestionEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer14tryMergeTokensEN4llvm8ArrayRefINS_3tok9TokenKindEEENS0_9TokenTypeE'/>
<fun r='_ZN5clang6format16FormatTokenLexer15precedesOperandEPNS0_11FormatTokenE'/>
<fun r='_ZN5clang6format16FormatTokenLexer22canPrecedeRegexLiteralEPNS0_11FormatTokenE'/>
<fun r='_ZN5clang6format16FormatTokenLexer22tryParseJSRegexLiteralEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer21handleTemplateStringsEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer21tryParsePythonCommentEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer15tryMerge_TMacroEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer23tryMergeConflictMarkersEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer15getStashedTokenEv'/>
<fun r='_ZN5clang6format16FormatTokenLexer12getNextTokenEv'/>
<mbr r='clang::format::FormatTokenLexer::FormatTok' o='0' t='clang::format::FormatToken *'/>
<mbr r='clang::format::FormatTokenLexer::IsFirstToken' o='64' t='bool'/>
<mbr r='clang::format::FormatTokenLexer::StateStack' o='128' t='std::stack&lt;LexerState&gt;'/>
<mbr r='clang::format::FormatTokenLexer::Column' o='768' t='unsigned int'/>
<mbr r='clang::format::FormatTokenLexer::TrailingWhitespace' o='800' t='unsigned int'/>
<mbr r='clang::format::FormatTokenLexer::Lex' o='832' t='std::unique_ptr&lt;Lexer&gt;'/>
<mbr r='clang::format::FormatTokenLexer::SourceMgr' o='896' t='const clang::SourceManager &amp;'/>
<mbr r='clang::format::FormatTokenLexer::ID' o='960' t='clang::FileID'/>
<mbr r='clang::format::FormatTokenLexer::Style' o='1024' t='const clang::format::FormatStyle &amp;'/>
<mbr r='clang::format::FormatTokenLexer::IdentTable' o='1088' t='clang::IdentifierTable'/>
<mbr r='clang::format::FormatTokenLexer::Keywords' o='2176' t='clang::format::AdditionalKeywords'/>
<mbr r='clang::format::FormatTokenLexer::Encoding' o='8000' t='encoding::Encoding'/>
<mbr r='clang::format::FormatTokenLexer::Allocator' o='8064' t='llvm::SpecificBumpPtrAllocator&lt;FormatToken&gt;'/>
<mbr r='clang::format::FormatTokenLexer::FirstInLineIndex' o='8896' t='unsigned int'/>
<mbr r='clang::format::FormatTokenLexer::Tokens' o='8960' t='SmallVector&lt;clang::format::FormatToken *, 16&gt;'/>
<mbr r='clang::format::FormatTokenLexer::Macros' o='10112' t='llvm::SmallMapVector&lt;IdentifierInfo *, TokenType, 8&gt;'/>
<mbr r='clang::format::FormatTokenLexer::FormattingDisabled' o='12416' t='bool'/>
<mbr r='clang::format::FormatTokenLexer::MacroBlockBeginRegex' o='12480' t='llvm::Regex'/>
<mbr r='clang::format::FormatTokenLexer::MacroBlockEndRegex' o='12608' t='llvm::Regex'/>
<fun r='_ZN5clang6format16FormatTokenLexer12readRawTokenERNS0_11FormatTokenE'/>
<fun r='_ZN5clang6format16FormatTokenLexer10resetLexerEj'/>
