<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='516' type='bool llvm::Loop::makeLoopInvariant(llvm::Instruction * I, bool &amp; Changed, llvm::Instruction * InsertPt = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='507'>/// If the given instruction is inside of the loop and it can be hoisted, do
  /// so to make it trivially loop-invariant.
  /// Return true if the instruction after any hoisting is loop invariant. This
  /// function can be used as a slightly more aggressive replacement for
  /// isLoopInvariant.
  ///
  /// If InsertPt is specified, it is the point to hoist instructions to.
  /// If null, the terminator of the loop preheader is used.
  ///</doc>
<use f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='74' u='c' c='_ZNK4llvm4Loop17makeLoopInvariantEPNS_5ValueERbPNS_11InstructionEPNS_16MemorySSAUpdaterE'/>
<def f='llvm/llvm/lib/Analysis/LoopInfo.cpp' l='78' ll='118' type='bool llvm::Loop::makeLoopInvariant(llvm::Instruction * I, bool &amp; Changed, llvm::Instruction * InsertPt = nullptr, llvm::MemorySSAUpdater * MSSAU = nullptr) const'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDeletion.cpp' l='69' u='c' c='_ZL10isLoopDeadPN4llvm4LoopERNS_15ScalarEvolutionERNS_15SmallVectorImplIPNS_10BasicBlockEEES6_RbS6_'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='644' u='c' c='_ZL15simplifyOneLoopPN4llvm4LoopERNS_15SmallVectorImplIS1_EEPNS_13DominatorTreeEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_15AssumptionCacheEPNS_16MemorySSAUpdaterEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp' l='580' u='c' c='_ZN12_GLOBAL__N_114SimplifyIndvar14eliminateTruncEPN4llvm9TruncInstE'/>
