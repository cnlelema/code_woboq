<def f='llvm/llvm/include/llvm/IR/Instruction.h' l='180' ll='182' type='bool llvm::Instruction::isBitwiseLogicOp() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='179'>/// Return true if this is and/or/xor.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='84' u='c' c='_ZL13SimplifyBSwapRN4llvm14BinaryOperatorERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='1389' u='c' c='_ZN4llvm12InstCombiner22foldCastedBitwiseLogicERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='1012' u='c' c='_ZL16canEvaluateZExtdPN4llvm5ValueEPNS_4TypeERjRNS_12InstCombinerEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp' l='2068' u='c' c='_ZL23foldBitCastBitwiseLogicRN4llvm11BitCastInstERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='256' u='c' c='_ZL22simplifyAssocCastAssocPN4llvm14BinaryOperatorE'/>
