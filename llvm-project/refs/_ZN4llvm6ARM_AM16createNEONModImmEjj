<def f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='530' ll='532' type='unsigned int llvm::ARM_AM::createNEONModImm(unsigned int OpCmode, unsigned int Val)'/>
<doc f='llvm/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h' l='505'>//===--------------------------------------------------------------------===//
  // Addressing Mode #6
  //===--------------------------------------------------------------------===//
  //
  // This is used for NEON load / store instructions.
  //
  // addrmode6 := reg with optional alignment
  //
  // This is stored in two operands [regaddr, align].  The first is the
  // address register.  The second operand is the value of the alignment
  // specifier in bytes or zero if no explicit alignment.
  // Valid alignments depend on the specific instruction.

  //===--------------------------------------------------------------------===//
  // NEON Modified Immediates
  //===--------------------------------------------------------------------===//
  //
  // Several NEON instructions (e.g., VMOV) take a &quot;modified immediate&quot;
  // vector operand, where a small immediate encoded in the instruction
  // specifies a full NEON vector value.  These modified immediates are
  // represented here as encoded integers.  The low 8 bits hold the immediate
  // value; bit 12 holds the &quot;Op&quot; field of the instruction, and bits 11-8 hold
  // the &quot;Cmode&quot; field of the instruction.  The interfaces below treat the
  // Op and Cmode values as a single 5-bit value.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='4955' u='c' c='_ZNK4llvm17ARMTargetLowering14LowerFCOPYSIGNENS_7SDValueERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='4978' u='c' c='_ZNK4llvm17ARMTargetLowering14LowerFCOPYSIGNENS_7SDValueERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='5873' u='c' c='_ZL17isNEONModifiedImmmmjRN4llvm12SelectionDAGERKNS_5SDLocERNS_3EVTEbNS_14NEONModImmTypeE'/>
