<def f='llvm/llvm/include/llvm/IR/Instruction.h' l='165' ll='167' type='bool llvm::Instruction::isLogicalShift() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='164'>/// Return true if this is a logical shift left or a logical shift right.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='70' u='c' c='_ZL25simplifyValueKnownNonZeroPN4llvm5ValueERNS_12InstCombinerERNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='72' u='c' c='_ZL23canEvaluateShiftedShiftjbPN4llvm11InstructionERNS_12InstCombinerES1_'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp' l='367' u='c' c='_ZN4llvm12InstCombiner19FoldShiftByConstantEPNS_5ValueEPNS_8ConstantERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2690' u='c' c='_ZL15collectBitPartsPN4llvm5ValueEbbRSt3mapIS1_NS_8OptionalIN12_GLOBAL__N_17BitPartEEESt4lessIS1_ESaISt4pairIKS1_S6_EEEi'/>
