<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='825' type='llvm::Instruction * llvm::InstCombiner::FoldPHIArgBinOpIntoPHI(llvm::PHINode &amp; PN)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='283' ll='374' type='llvm::Instruction * llvm::InstCombiner::FoldPHIArgBinOpIntoPHI(llvm::PHINode &amp; PN)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='759' u='c' c='_ZN4llvm12InstCombiner19FoldPHIArgOpIntoPHIERNS_7PHINodeE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='281'>/// If we have something like phi [add (a,b), add(a,c)] and if a/b/c and the
/// adds all have a single use, turn this into a phi and a single binop.</doc>
