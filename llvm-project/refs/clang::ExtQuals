<inh f='llvm/clang/include/clang/AST/Type.h' l='1286' c='clang::ExtQualsTypeCommonBase'/>
<inh f='llvm/llvm/include/llvm/ADT/FoldingSet.h' l='135' c='llvm::FoldingSetBase::Node'/>
<def f='llvm/clang/include/clang/AST/Type.h' l='1315' ll='1374'/>
<size>32</size>
<doc f='llvm/clang/include/clang/AST/Type.h' l='1305'>/// We can encode up to four bits in the low bits of a
/// type pointer, but there are many more type qualifiers that we want
/// to be able to apply to an arbitrary type.  Therefore we have this
/// struct, intended to be heap-allocated and used by QualType to
/// store qualifiers.
///
/// The current design tags the &apos;const&apos;, &apos;restrict&apos;, and &apos;volatile&apos; qualifiers
/// in three low bits on the QualType pointer; a fourth bit records whether
/// the pointer is an ExtQuals node. The extended qualifiers (address spaces,
/// Objective-C GC attributes) are much more rare.</doc>
<mbr r='clang::ExtQuals::Quals' o='192' t='clang::Qualifiers'/>
<fun r='_ZN5clang8ExtQuals5this_Ev'/>
<fun r='_ZN5clang8ExtQualsC1EPKNS_4TypeENS_8QualTypeENS_10QualifiersE'/>
<fun r='_ZNK5clang8ExtQuals13getQualifiersEv'/>
<fun r='_ZNK5clang8ExtQuals13hasObjCGCAttrEv'/>
<fun r='_ZNK5clang8ExtQuals13getObjCGCAttrEv'/>
<fun r='_ZNK5clang8ExtQuals15hasObjCLifetimeEv'/>
<fun r='_ZNK5clang8ExtQuals15getObjCLifetimeEv'/>
<fun r='_ZNK5clang8ExtQuals15hasAddressSpaceEv'/>
<fun r='_ZNK5clang8ExtQuals15getAddressSpaceEv'/>
<fun r='_ZNK5clang8ExtQuals11getBaseTypeEv'/>
<fun r='_ZNK5clang8ExtQuals7ProfileERN4llvm16FoldingSetNodeIDE'/>
<fun r='_ZN5clang8ExtQuals7ProfileERN4llvm16FoldingSetNodeIDEPKNS_4TypeENS_10QualifiersE'/>
