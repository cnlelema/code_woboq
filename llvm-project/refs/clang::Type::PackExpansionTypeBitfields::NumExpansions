<dec f='llvm/clang/include/clang/AST/Type.h' l='1724' type='unsigned int'/>
<use f='llvm/clang/include/clang/AST/Type.h' l='5452' u='w' c='_ZN5clang17PackExpansionTypeC1ENS_8QualTypeES1_N4llvm8OptionalIjEE'/>
<use f='llvm/clang/include/clang/AST/Type.h' l='5465' u='r' c='_ZNK5clang17PackExpansionType16getNumExpansionsEv'/>
<use f='llvm/clang/include/clang/AST/Type.h' l='5466' u='r' c='_ZNK5clang17PackExpansionType16getNumExpansionsEv'/>
<offset>32</offset>
<doc f='llvm/clang/include/clang/AST/Type.h' l='1713'>/// The number of expansions that this pack expansion will
    /// generate when substituted (+1), which is expected to be able to
    /// hold at least 1024 according to [implimits]. However, as this limit
    /// is somewhat easy to hit with template metaprogramming we&apos;d prefer to
    /// keep it as large as possible. At the moment it has been left as a
    /// non-bitfield since this type safely fits in 64 bits as an unsigned, so
    /// there is no reason to introduce the performance impact of a bitfield.
    ///
    /// This field will only have a non-zero value when some of the parameter
    /// packs that occur within the pattern have been substituted but others
    /// have not.</doc>
