<inh f='llvm/llvm/include/llvm/Pass.h' l='80' c='llvm::Pass'/>
<def f='llvm/llvm/include/llvm/Pass.h' l='284' ll='306'/>
<size>32</size>
<doc f='llvm/llvm/include/llvm/Pass.h' l='275'>//===----------------------------------------------------------------------===//
/// FunctionPass class - This class is used to implement most global
/// optimizations.  Optimizations should subclass this class if they meet the
/// following constraints:
///
///  1. Optimizations are organized globally, i.e., a function at a time
///  2. Optimizing a function does not cause the addition or removal of any
///     functions in the module
///</doc>
<fun r='_ZN4llvm12FunctionPassC1ERc'/>
<fun r='_ZNK4llvm12FunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN4llvm12FunctionPass13runOnFunctionERNS_8FunctionE'/>
<fun r='_ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE'/>
<fun r='_ZNK4llvm12FunctionPass27getPotentialPassManagerTypeEv'/>
<fun r='_ZNK4llvm12FunctionPass12skipFunctionERKNS_8FunctionE'/>
<ovr f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='1157' c='llvm::AAResultsWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/BasicAliasAnalysis.h' l='234' c='llvm::BasicAAWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='1138' c='llvm::LoopInfoWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/IR/Dominators.h' l='259' c='llvm::DominatorTreeWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='912' c='llvm::MemorySSAPrinterLegacyPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/MemorySSA.h' l='963' c='llvm::MemorySSAWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='1937' c='llvm::ScalarEvolutionWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h' l='52' c='llvm::SCEVAAWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Transforms/InstCombine/InstCombine.h' l='42' c='llvm::InstructionCombiningPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='522' c='llvm::MemoryDependenceWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/PostDominators.h' l='66' c='llvm::PostDominatorTreeWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfo.h' l='135' c='llvm::BlockFrequencyInfoWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/OptimizationRemarkEmitter.h' l='136' c='llvm::OptimizationRemarkEmitterWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/MachineFunctionPass.h' l='30' c='llvm::MachineFunctionPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/IntervalPartition.h' l='42' c='llvm::IntervalPartition'/>
<ovr f='llvm/llvm/include/llvm/Analysis/RegionInfo.h' l='946' c='llvm::RegionInfoPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/RegionPass.h' l='88' c='llvm::RGPassManager'/>
<ovr f='llvm/llvm/include/llvm/Transforms/Utils/UnifyFunctionExitNodes.h' l='25' c='llvm::UnifyFunctionExitNodes'/>
<ovr f='llvm/llvm/lib/Analysis/AliasAnalysisEvaluator.cpp' l='395' c='llvm::AAEvalLegacyPass'/>
<ovr f='llvm/llvm/lib/Analysis/AliasSetTracker.cpp' l='733' c='(anonymousnamespace)::AliasSetPrinter'/>
<ovr f='llvm/llvm/include/llvm/Analysis/PhiValues.h' l='141' c='llvm::PhiValuesWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/BranchProbabilityInfo.h' l='230' c='llvm::BranchProbabilityInfoWrapperPass'/>
<ovr f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='35' c='(anonymousnamespace)::CFGViewerLegacyPass'/>
<ovr f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='65' c='(anonymousnamespace)::CFGOnlyViewerLegacyPass'/>
<ovr f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='112' c='(anonymousnamespace)::CFGPrinterLegacyPass'/>
<ovr f='llvm/llvm/lib/Analysis/CFGPrinter.cpp' l='142' c='(anonymousnamespace)::CFGOnlyPrinterLegacyPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h' l='33' c='llvm::DOTGraphTraitsViewer'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h' l='75' c='llvm::DOTGraphTraitsPrinter'/>
<ovr f='llvm/llvm/lib/Analysis/CostModel.cpp' l='43' c='(anonymousnamespace)::CostModelAnalysis'/>
<ovr f='llvm/llvm/lib/Analysis/Delinearization.cpp' l='38' c='(anonymousnamespace)::Delinearization'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DemandedBits.h' l='85' c='llvm::DemandedBitsWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='954' c='llvm::DependenceAnalysisWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/DominanceFrontier.h' l='156' c='llvm::DominanceFrontierWrapperPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LoopPass.h' l='96' c='llvm::LPPassManager'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LoopPass.h' l='163' c='llvm::LCSSAVerificationPass'/>
<ovr f='llvm/llvm/lib/Analysis/InstCount.cpp' l='35' c='(anonymousnamespace)::InstCount'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='723' c='llvm::LoopAccessLegacyAnalysis'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h' l='50' c='llvm::LazyBranchProbabilityInfoPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LazyBlockFrequencyInfo.h' l='100' c='llvm::LazyBlockFrequencyInfoPass'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LazyValueInfo.h' l='142' c='llvm::LazyValueInfoWrapperPass'/>
<ovr f='llvm/llvm/lib/Analysis/LazyValueInfo.cpp' l='1985' c='(anonymousnamespace)::LazyValueInfoPrinter'/>
<ovr f='llvm/llvm/include/llvm/Analysis/LegacyDivergenceAnalysis.h' l='26' c='llvm::LegacyDivergenceAnalysis'/>
<ovr f='llvm/llvm/lib/Analysis/Lint.cpp' l='90' c='(anonymousnamespace)::Lint'/>
<ovr f='llvm/llvm/lib/Analysis/MemDepPrinter.cpp' l='22' c='(anonymousnamespace)::MemDepPrinter'/>
<ovr f='llvm/llvm/lib/Analysis/MemDerefPrinter.cpp' l='21' c='(anonymousnamespace)::MemDerefPrinter'/>
<ovr f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='296' c='(anonymousnamespace)::MustExecutePrinter'/>
<ovr f='llvm/llvm/include/llvm/Analysis/StackSafetyAnalysis.h' l='60' c='llvm::StackSafetyInfoWrapperPass'/>
<ovr f='llvm/llvm/lib/CodeGen/AtomicExpandPass.cpp' l='58' c='(anonymousnamespace)::AtomicExpand'/>
<ovr f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='243' c='(anonymousnamespace)::CodeGenPrepare'/>
<ovr f='llvm/llvm/lib/CodeGen/DwarfEHPrepare.cpp' l='46' c='(anonymousnamespace)::DwarfEHPrepare'/>
<ovr f='llvm/llvm/lib/CodeGen/ExpandMemCmp.cpp' l='788' c='(anonymousnamespace)::ExpandMemCmpPass'/>
<ovr f='llvm/llvm/lib/CodeGen/ExpandReductions.cpp' l='137' c='(anonymousnamespace)::ExpandReductions'/>
<ovr f='llvm/llvm/lib/CodeGen/GCMetadata.cpp' l='31' c='(anonymousnamespace)::Printer'/>
<ovr f='llvm/llvm/lib/CodeGen/GCRootLowering.cpp' l='39' c='(anonymousnamespace)::LowerIntrinsics'/>
<ovr f='llvm/llvm/include/llvm/CodeGen/StackProtector.h' l='37' c='llvm::StackProtector'/>
<ovr f='llvm/llvm/lib/CodeGen/GlobalMerge.cpp' l='138' c='(anonymousnamespace)::GlobalMerge'/>
<ovr f='llvm/llvm/lib/CodeGen/HardwareLoops.cpp' l='79' c='(anonymousnamespace)::HardwareLoops'/>
<ovr f='llvm/llvm/lib/CodeGen/IndirectBrExpandPass.cpp' l='51' c='(anonymousnamespace)::IndirectBrExpandPass'/>
<ovr f='llvm/llvm/lib/CodeGen/InterleavedAccessPass.cpp' l='82' c='(anonymousnamespace)::InterleavedAccess'/>
<ovr f='llvm/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp' l='1303' c='(anonymousnamespace)::InterleavedLoadCombine'/>
<ovr f='llvm/llvm/lib/CodeGen/MachineModuleInfo.cpp' l='301' c='(anonymousnamespace)::FreeMachineFunction'/>
<ovr f='llvm/llvm/lib/CodeGen/SafeStack.cpp' l='845' c='(anonymousnamespace)::SafeStackLegacyPass'/>
<ovr f='llvm/llvm/lib/CodeGen/ScalarizeMaskedMemIntrin.cpp' l='43' c='(anonymousnamespace)::ScalarizeMaskedMemIntrin'/>
<ovr f='llvm/llvm/lib/CodeGen/ShadowStackGCLowering.cpp' l='50' c='(anonymousnamespace)::ShadowStackGCLowering'/>
<ovr f='llvm/llvm/lib/CodeGen/SjLjEHPrepare.cpp' l='38' c='(anonymousnamespace)::SjLjEHPrepare'/>
<ovr f='llvm/llvm/lib/CodeGen/UnreachableBlockElim.cpp' l='44' c='(anonymousnamespace)::UnreachableBlockElimLegacyPass'/>
<ovr f='llvm/llvm/lib/CodeGen/WasmEHPrepare.cpp' l='98' c='(anonymousnamespace)::WasmEHPrepare'/>
<ovr f='llvm/llvm/lib/CodeGen/WinEHPrepare.cpp' l='57' c='(anonymousnamespace)::WinEHPrepare'/>
<ovr f='llvm/llvm/lib/IR/IRPrintingPasses.cpp' l='81' c='(anonymousnamespace)::PrintFunctionPassWrapper'/>
<ovr f='llvm/llvm/lib/IR/LegacyPassManager.cpp' l='325' c='(anonymousnamespace)::BBPassManager'/>
<fun r='_ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE'/>
<ovr f='llvm/llvm/lib/IR/SafepointIRVerifier.cpp' l='213' c='(anonymousnamespace)::SafepointIRVerifier'/>
<ovr f='llvm/llvm/lib/IR/Verifier.cpp' l='5032' c='(anonymousnamespace)::VerifierLegacyPass'/>
<ovr f='llvm/llvm/include/llvm/Transforms/Utils/PredicateInfo.h' l='272' c='llvm::PredicateInfoPrinterLegacyPass'/>
<ovr f='llvm/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp' l='82' c='(anonymousnamespace)::FalkorMarkStridedAccessesLegacy'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAnnotateUniformValues.cpp' l='31' c='(anonymousnamespace)::AMDGPUAnnotateUniformValues'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUAtomicOptimizer.cpp' l='48' c='(anonymousnamespace)::AMDGPUAtomicOptimizer'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp' l='58' c='(anonymousnamespace)::AMDGPUCodeGenPrepare'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPerfHintAnalysis.h' l='22' c='llvm::AMDGPUPerfHintAnalysis'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp' l='167' c='(anonymousnamespace)::AMDGPUSimplifyLibCalls'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp' l='188' c='(anonymousnamespace)::AMDGPUUseNativeCalls'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPULowerKernelArguments.cpp' l='45' c='(anonymousnamespace)::AMDGPULowerKernelArguments'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUPromoteAlloca.cpp' l='78' c='(anonymousnamespace)::AMDGPUPromoteAlloca'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp' l='99' c='(anonymousnamespace)::AMDGPURewriteOutArguments'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/AMDGPUUnifyDivergentExitNodes.cpp' l='50' c='(anonymousnamespace)::AMDGPUUnifyDivergentExitNodes'/>
<ovr f='llvm/llvm/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp' l='53' c='(anonymousnamespace)::SIAnnotateControlFlow'/>
<ovr f='llvm/llvm/lib/Target/ARM/ARMCodeGenPrepare.cpp' l='149' c='(anonymousnamespace)::ARMCodeGenPrepare'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonCommonGEP.cpp' l='96' c='(anonymousnamespace)::HexagonCommonGEP'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonGenExtract.cpp' l='56' c='(anonymousnamespace)::HexagonGenExtract'/>
<ovr f='llvm/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp' l='31' c='(anonymousnamespace)::HexagonOptimizeSZextends'/>
<ovr f='llvm/llvm/lib/Target/Mips/CheriLoopPointerDecanonicalize.cpp' l='18' c='(anonymousnamespace)::CheriLoopPointerDecanonicalize'/>
<ovr f='llvm/llvm/lib/Target/Mips/CheriRangeChecker.cpp' l='28' c='(anonymousnamespace)::CheriRangeChecker'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXAllocaHoisting.cpp' l='23' c='(anonymousnamespace)::NVPTXAllocaHoisting'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXImageOptimizer.cpp' l='27' c='(anonymousnamespace)::NVPTXImageOptimizer'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXLowerAggrCopies.cpp' l='38' c='(anonymousnamespace)::NVPTXLowerAggrCopies'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVPTXLowerArgs.cpp' l='109' c='(anonymousnamespace)::NVPTXLowerArgs'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVVMIntrRange.cpp' l='31' c='(anonymousnamespace)::NVVMIntrRange'/>
<ovr f='llvm/llvm/lib/Target/NVPTX/NVVMReflect.cpp' l='49' c='(anonymousnamespace)::NVVMReflect'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp' l='71' c='(anonymousnamespace)::PPCBoolRetToInt'/>
<ovr f='llvm/llvm/lib/Target/PowerPC/PPCLoopPreIncPrep.cpp' l='69' c='(anonymousnamespace)::PPCLoopPreIncPrep'/>
<ovr f='llvm/llvm/lib/Target/SystemZ/SystemZTDC.cpp' l='66' c='(anonymousnamespace)::SystemZTDCPass'/>
<ovr f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyOptimizeReturned.cpp' l='24' c='(anonymousnamespace)::OptimizeReturned'/>
<ovr f='llvm/llvm/lib/Target/X86/X86WinEHState.cpp' l='39' c='(anonymousnamespace)::WinEHStatePass'/>
<ovr f='llvm/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp' l='42' c='(anonymousnamespace)::AggressiveInstCombinerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/CHERICap/PureCapABICalls.cpp' l='36' c='(anonymousnamespace)::CHERICapDirectCalls'/>
<ovr f='llvm/llvm/lib/Transforms/Coroutines/CoroCleanup.cpp' l='100' c='(anonymousnamespace)::CoroCleanup'/>
<ovr f='llvm/llvm/lib/Transforms/Coroutines/CoroEarly.cpp' l='223' c='(anonymousnamespace)::CoroEarly'/>
<ovr f='llvm/llvm/lib/Transforms/Coroutines/CoroElide.cpp' l='279' c='(anonymousnamespace)::CoroElide'/>
<ovr f='llvm/llvm/lib/Transforms/Hello/Hello.cpp' l='26' c='(anonymousnamespace)::Hello'/>
<ovr f='llvm/llvm/lib/Transforms/Hello/Hello.cpp' l='44' c='(anonymousnamespace)::Hello2'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='688' c='(anonymousnamespace)::AddressSanitizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp' l='219' c='(anonymousnamespace)::BoundsCheckingLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp' l='102' c='(anonymousnamespace)::ControlHeightReductionLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp' l='287' c='(anonymousnamespace)::HWAddressSanitizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp' l='604' c='(anonymousnamespace)::MemorySanitizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/PGOMemOPSizeOpt.cpp' l='100' c='(anonymousnamespace)::PGOMemOPSizeOptLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp' l='136' c='(anonymousnamespace)::ThreadSanitizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp' l='61' c='(anonymousnamespace)::ObjCARCContract'/>
<ovr f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCExpand.cpp' l='50' c='(anonymousnamespace)::ObjCARCExpand'/>
<ovr f='llvm/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp' l='482' c='(anonymousnamespace)::ObjCARCOpt'/>
<ovr f='llvm/llvm/lib/Transforms/ObjCARC/ProvenanceAnalysisEvaluator.cpp' l='23' c='(anonymousnamespace)::PAEval'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/ADCE.cpp' l='691' c='(anonymousnamespace)::ADCELegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp' l='47' c='(anonymousnamespace)::AlignmentFromAssumptions'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/BDCE.cpp' l='155' c='(anonymousnamespace)::BDCELegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp' l='547' c='(anonymousnamespace)::CallSiteSplittingLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp' l='99' c='(anonymousnamespace)::ConstantHoistingLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/ConstantProp.cpp' l='41' c='(anonymousnamespace)::ConstantPropagation'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp' l='73' c='(anonymousnamespace)::CorrelatedValuePropagation'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/DCE.cpp' l='146' c='(anonymousnamespace)::DCELegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp' l='1347' c='(anonymousnamespace)::DSELegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/DivRemPairs.cpp' l='168' c='(anonymousnamespace)::DivRemPairsLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/EarlyCSE.cpp' l='1296' c='(anonymousnamespace)::EarlyCSELegacyCommonPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/FlattenCFGPass.cpp' l='23' c='(anonymousnamespace)::FlattenCFGPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/Float2Int.cpp' l='53' c='(anonymousnamespace)::Float2IntLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2557' c='llvm::gvn::GVNLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/GVNHoist.cpp' l='1142' c='llvm::GVNHoistLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/GVNSink.cpp' l='878' c='(anonymousnamespace)::GVNSinkLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='846' c='(anonymousnamespace)::GuardWideningLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp' l='143' c='(anonymousnamespace)::InferAddressSpaces'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/InstSimplifyPass.cpp' l='79' c='(anonymousnamespace)::InstSimplifyLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='122' c='(anonymousnamespace)::JumpThreading'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp' l='103' c='(anonymousnamespace)::LoopDataPrefetchLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LoopDistribute.cpp' l='1006' c='(anonymousnamespace)::LoopDistributeLegacy'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LoopFuse.cpp' l='1142' c='LoopFuseLegacy'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp' l='628' c='(anonymousnamespace)::LoopLoadElimination'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LowerAtomic.cpp' l='153' c='(anonymousnamespace)::LowerAtomicLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LowerExpectIntrinsic.cpp' l='365' c='(anonymousnamespace)::LowerExpectIntrinsic'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LowerGuardIntrinsic.cpp' l='31' c='(anonymousnamespace)::LowerGuardIntrinsicLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/LowerWidenableCondition.cpp' l='31' c='(anonymousnamespace)::LowerWidenableConditionLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/MakeGuardsExplicit.cpp' l='47' c='(anonymousnamespace)::MakeGuardsExplicitLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='340' c='(anonymousnamespace)::MemCpyOptLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/MergeICmps.cpp' l='890' c='(anonymousnamespace)::MergeICmpsLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp' l='344' c='(anonymousnamespace)::MergedLoadStoreMotionLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/NaryReassociate.cpp' l='118' c='(anonymousnamespace)::NaryReassociateLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/NewGVN.cpp' l='4173' c='(anonymousnamespace)::NewGVNLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/PartiallyInlineLibCalls.cpp' l='144' c='(anonymousnamespace)::PartiallyInlineLibCallsLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp' l='101' c='(anonymousnamespace)::PlaceBackedgeSafepointsImpl'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp' l='158' c='(anonymousnamespace)::PlaceSafepoints'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/Reassociate.cpp' l='2413' c='(anonymousnamespace)::ReassociateLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/Reg2Mem.cpp' l='38' c='(anonymousnamespace)::RegToMem'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/SCCP.cpp' l='1871' c='(anonymousnamespace)::SCCPLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='4599' c='llvm::sroa::SROALegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/Scalarizer.cpp' l='219' c='(anonymousnamespace)::ScalarizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp' l='344' c='(anonymousnamespace)::SeparateConstOffsetFromGEP'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp' l='229' c='(anonymousnamespace)::CFGSimplifyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/Sink.cpp' l='269' c='(anonymousnamespace)::SinkingLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp' l='103' c='(anonymousnamespace)::SpeculativeExecutionLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp' l='97' c='(anonymousnamespace)::StraightLineStrengthReduce'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp' l='812' c='(anonymousnamespace)::TailCallElim'/>
<ovr f='llvm/llvm/lib/Transforms/Scalar/WarnMissedTransforms.cpp' l='108' c='(anonymousnamespace)::WarnMissedTransformationsLegacy'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/AddDiscriminators.cpp' l='88' c='(anonymousnamespace)::AddDiscriminatorsLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/BreakCriticalEdges.cpp' l='43' c='(anonymousnamespace)::BreakCriticalEdges'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/CheriLogSetBoundsPass.cpp' l='22' c='(anonymousnamespace)::LogCheriSetBounds'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/EntryExitInstrumenter.cpp' l='123' c='(anonymousnamespace)::EntryExitInstrumenter'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/EntryExitInstrumenter.cpp' l='135' c='(anonymousnamespace)::PostInlineEntryExitInstrumenter'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/InstructionNamer.cpp' l='23' c='(anonymousnamespace)::InstNamer'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LCSSA.cpp' l='407' c='(anonymousnamespace)::LCSSAWrapperPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp' l='52' c='(anonymousnamespace)::LibCallsShrinkWrapLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LoopSimplify.cpp' l='744' c='(anonymousnamespace)::LoopSimplify'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LoopVersioning.cpp' l='256' c='(anonymousnamespace)::LoopVersioningPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LowerInvoke.cpp' l='31' c='(anonymousnamespace)::LowerInvokeLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/LowerSwitch.cpp' l='73' c='(anonymousnamespace)::LowerSwitch'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/Mem2Reg.cpp' l='73' c='(anonymousnamespace)::PromoteLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Utils/StripGCRelocates.cpp' l='27' c='(anonymousnamespace)::StripGCRelocates'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp' l='208' c='(anonymousnamespace)::LoadStoreVectorizerLegacyPass'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1451' c='(anonymousnamespace)::LoopVectorize'/>
<ovr f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='4927' c='(anonymousnamespace)::SLPVectorizer'/>
<ovr f='llvm/llvm/tools/bugpoint-passes/TestPasses.cpp' l='127' c='(anonymousnamespace)::CrashOnFunctionAttribute'/>
<ovr f='llvm/llvm/tools/opt/Debugify.cpp' l='325' c='(anonymousnamespace)::DebugifyFunctionPass'/>
<ovr f='llvm/llvm/tools/opt/Debugify.cpp' l='369' c='(anonymousnamespace)::CheckDebugifyFunctionPass'/>
<ovr f='llvm/llvm/tools/opt/GraphPrinters.cpp' l='26' c='(anonymousnamespace)::DomInfoPrinter'/>
<ovr f='llvm/llvm/tools/opt/PassPrinters.cpp' l='31' c='(anonymousnamespace)::FunctionPassPrinter'/>
<ovr f='llvm/llvm/tools/opt/PrintSCC.cpp' l='36' c='(anonymousnamespace)::CFGSCC'/>
<ovr f='llvm/llvm/unittests/Analysis/AliasAnalysisTest.cpp' l='33' c='(anonymousnamespace)::AATestPass'/>
<ovr f='llvm/llvm/unittests/Analysis/CFGTest.cpp' l='71' c='IsPotentiallyReachableTestPass'/>
<ovr f='llvm/llvm/unittests/Analysis/UnrollAnalyzerTest.cpp' l='24' c='llvm::(anonymousnamespace)::UnrollAnalyzerTest'/>
