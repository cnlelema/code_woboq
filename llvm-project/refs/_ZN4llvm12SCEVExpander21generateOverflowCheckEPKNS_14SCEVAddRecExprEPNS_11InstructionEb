<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='223' type='llvm::Value * llvm::SCEVExpander::generateOverflowCheck(const llvm::SCEVAddRecExpr * AR, llvm::Instruction * Loc, bool Signed)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='222'>/// Generates code that evaluates if the \p AR expression will overflow.</doc>
<def f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2229' ll='2324' type='llvm::Value * llvm::SCEVExpander::generateOverflowCheck(const llvm::SCEVAddRecExpr * AR, llvm::Instruction * Loc, bool Signed)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2333' u='c' c='_ZN4llvm12SCEVExpander19expandWrapPredicateEPKNS_17SCEVWrapPredicateEPNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2337' u='c' c='_ZN4llvm12SCEVExpander19expandWrapPredicateEPKNS_17SCEVWrapPredicateEPNS_11InstructionE'/>
