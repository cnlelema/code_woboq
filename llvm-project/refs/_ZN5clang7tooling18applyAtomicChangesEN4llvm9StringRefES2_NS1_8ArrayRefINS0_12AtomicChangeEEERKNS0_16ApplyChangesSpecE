<dec f='llvm/clang/include/clang/Tooling/Refactoring/AtomicChange.h' l='171' type='llvm::Expected&lt;std::string&gt; clang::tooling::applyAtomicChanges(llvm::StringRef FilePath, llvm::StringRef Code, llvm::ArrayRef&lt;AtomicChange&gt; Changes, const clang::tooling::ApplyChangesSpec &amp; Spec)'/>
<def f='llvm/clang/lib/Tooling/Refactoring/AtomicChange.cpp' l='294' ll='361' type='llvm::Expected&lt;std::string&gt; clang::tooling::applyAtomicChanges(llvm::StringRef FilePath, llvm::StringRef Code, llvm::ArrayRef&lt;AtomicChange&gt; Changes, const clang::tooling::ApplyChangesSpec &amp; Spec)'/>
<doc f='llvm/clang/include/clang/Tooling/Refactoring/AtomicChange.h' l='160'>/// Applies all AtomicChanges in \p Changes to the \p Code.
///
/// This completely ignores the file path in each change and replaces them with
/// \p FilePath, i.e. callers are responsible for ensuring all changes are for
/// the same file.
///
/// \returns The changed code if all changes are applied successfully;
/// otherwise, an llvm::Error carrying llvm::StringError is returned (the Error
/// message can be converted to string with `llvm::toString()` and the
/// error_code should be ignored).</doc>
<use f='llvm/clang/tools/clang-refactor/ClangRefactor.cpp' l='491' u='c' c='_ZN12_GLOBAL__N_117ClangRefactorTool18applySourceChangesEv'/>
<use f='llvm/clang/tools/clang-refactor/TestSupport.cpp' l='98' u='c' c='_ZN5clang8refactor12_GLOBAL__N_121printRewrittenSourcesERKSt6vectorINS_7tooling12AtomicChangeESaIS4_EERN4llvm11raw_ostreamE'/>
<use f='llvm/clang/unittests/Tooling/RefactoringTest.cpp' l='1328' u='c' c='_ZN5clang7tooling22ApplyAtomicChangesTest7rewriteEb'/>
<use f='llvm/clang/unittests/Tooling/TransformerTest.cpp' l='99' u='c' c='_ZN12_GLOBAL__N_124ClangRefactoringTestBase7rewriteEN4llvm9StringRefE'/>
