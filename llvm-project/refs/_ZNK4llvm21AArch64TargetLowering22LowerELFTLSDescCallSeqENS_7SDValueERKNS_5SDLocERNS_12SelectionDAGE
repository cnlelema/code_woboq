<dec f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.h' l='621' type='llvm::SDValue llvm::AArch64TargetLowering::LowerELFTLSDescCallSeq(llvm::SDValue SymAddr, const llvm::SDLoc &amp; DL, llvm::SelectionDAG &amp; DAG) const'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4257' ll='4270' type='llvm::SDValue llvm::AArch64TargetLowering::LowerELFTLSDescCallSeq(llvm::SDValue SymAddr, const llvm::SDLoc &amp; DL, llvm::SelectionDAG &amp; DAG) const'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4341' u='c' c='_ZNK4llvm21AArch64TargetLowering24LowerELFGlobalTLSAddressENS_7SDValueERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4365' u='c' c='_ZNK4llvm21AArch64TargetLowering24LowerELFGlobalTLSAddressENS_7SDValueERNS_12SelectionDAGE'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp' l='4239'>/// When accessing thread-local variables under either the general-dynamic or
/// local-dynamic system, we make a &quot;TLS-descriptor&quot; call. The variable will
/// have a descriptor, accessible via a PC-relative ADRP, and whose first entry
/// is a function pointer to carry out the resolution.
///
/// The sequence is:
///    adrp  x0, :tlsdesc:var
///    ldr   x1, [x0, #:tlsdesc_lo12:var]
///    add   x0, x0, #:tlsdesc_lo12:var
///    .tlsdesccall var
///    blr   x1
///    (TPIDR_EL0 offset now in x0)
///
///  The above sequence must be produced unscheduled, to enable the linker to
///  optimize/relax this sequence.
///  Therefore, a pseudo-instruction (TLSDESC_CALLSEQ) is used to represent the
///  above sequence, and expanded really late in the compilation flow, to ensure
///  the sequence is produced as per above.</doc>
