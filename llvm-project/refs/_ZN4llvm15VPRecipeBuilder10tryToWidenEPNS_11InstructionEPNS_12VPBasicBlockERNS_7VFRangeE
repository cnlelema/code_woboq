<dec f='llvm/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h' l='95' type='bool llvm::VPRecipeBuilder::tryToWiden(llvm::Instruction * I, llvm::VPBasicBlock * VPBB, llvm::VFRange &amp; Range)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6582' ll='6686' type='bool llvm::VPRecipeBuilder::tryToWiden(llvm::Instruction * I, llvm::VPBasicBlock * VPBB, llvm::VFRange &amp; Range)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6788' u='c' c='_ZN4llvm15VPRecipeBuilder17tryToCreateRecipeEPNS_11InstructionERNS_7VFRangeERSt10unique_ptrINS_5VPlanESt14default_deleteIS6_EEPNS_12VPBasicBlockE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h' l='89'>/// Check if \p I can be widened within the given VF \p Range. If \p I can be
  /// widened for \p Range.Start, check if the last recipe of \p VPBB can be
  /// extended to include \p I or else build a new VPWidenRecipe for it and
  /// append it to \p VPBB. Return true if \p I can be widened for Range.Start,
  /// false otherwise. Range.End may be decreased to ensure same decision from
  /// \p Range.Start to \p Range.End.</doc>
