<dec f='llvm/clang/include/clang/AST/DeclBase.h' l='132' type='4'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='815' u='r' c='_ZN5clang4Decl24isTagIdentifierNamespaceEj'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1077' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1083' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/DeclBase.h' l='1089' u='r' c='_ZN5clang4Decl21setObjectOfFriendDeclEb'/>
<use f='llvm/clang/include/clang/AST/Decl.h' l='4347' u='r' c='_ZN5clang12Redeclarable15setPreviousDeclEPT_'/>
<doc f='llvm/clang/include/clang/AST/DeclBase.h' l='129'>/// Types, declared with &apos;struct foo&apos;, typedefs, etc.
    /// This is what elaborated-type-specifiers look for in C++,
    /// but note that it&apos;s ill-formed to find a non-tag.</doc>
<use f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='2021' u='r' c='_ZL20CalculateHiddenNamesRKN5clang21CodeCompletionContextEPNS_20CodeCompletionResultEjRNS_10ASTContextERN4llvm9StringSetINS7_20BumpPtrAllocatorImplINS11443770'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='236' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='261' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='290' u='r' c='_ZL7getIDNSN5clang4Sema14LookupNameKindEbb'/>
<use f='llvm/clang/lib/Serialization/ASTReaderDecl.cpp' l='3616' u='r' c='_ZN5clang13ASTDeclReader18attachPreviousDeclERNS_9ASTReaderEPNS_4DeclES4_S4_'/>
