<dec f='llvm/llvm/include/llvm-c/Disassembler.h' l='64' type='LLVMDisasmContextRef LLVMCreateDisasmCPUFeatures(const char * Triple, const char * CPU, const char * Features, void * DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)'/>
<def f='llvm/llvm/lib/MC/MCDisassembler/Disassembler.cpp' l='44' ll='107' type='LLVMDisasmContextRef LLVMCreateDisasmCPUFeatures(const char * TT, const char * CPU, const char * Features, void * DisInfo, int TagType, LLVMOpInfoCallback GetOpInfo, LLVMSymbolLookupCallback SymbolLookUp)'/>
<use f='llvm/llvm/lib/MC/MCDisassembler/Disassembler.cpp' l='113' u='c' c='LLVMCreateDisasmCPU'/>
<use f='llvm/llvm/lib/MC/MCDisassembler/Disassembler.cpp' l='120' u='c' c='LLVMCreateDisasm'/>
<doc f='llvm/llvm/lib/MC/MCDisassembler/Disassembler.cpp' l='37'>// LLVMCreateDisasm() creates a disassembler for the TripleName.  Symbolic
// disassembly is supported by passing a block of information in the DisInfo
// parameter and specifying the TagType and callback functions as described in
// the header llvm-c/Disassembler.h .  The pointer to the block and the
// functions can all be passed as NULL.  If successful, this returns a
// disassembler context.  If not, it returns NULL.
//</doc>
<doc f='llvm/llvm/include/llvm-c/Disassembler.h' l='56'>/**
 * Create a disassembler for the TripleName, a specific CPU and specific feature
 * string.  Symbolic disassembly is supported by passing a block of information
 * in the DisInfo parameter and specifying the TagType and callback functions as
 * described above.  These can all be passed * as NULL.  If successful, this
 * returns a disassembler context.  If not, it returns NULL.
 */</doc>
<use f='llvm/llvm/tools/llvm-c-test/disassemble.c' l='39' u='c' c='do_disassemble'/>
