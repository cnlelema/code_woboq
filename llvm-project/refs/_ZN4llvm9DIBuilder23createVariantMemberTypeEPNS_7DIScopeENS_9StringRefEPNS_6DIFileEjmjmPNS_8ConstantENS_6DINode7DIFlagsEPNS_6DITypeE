<dec f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='288' type='llvm::DIDerivedType * llvm::DIBuilder::createVariantMemberType(llvm::DIScope * Scope, llvm::StringRef Name, llvm::DIFile * File, unsigned int LineNo, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, llvm::Constant * Discriminant, DINode::DIFlags Flags, llvm::DIType * Ty)'/>
<doc f='llvm/llvm/include/llvm/IR/DIBuilder.h' l='275'>/// Create debugging information entry for a variant.  A variant
    /// normally should be a member of a variant part.
    /// \param Scope        Member scope.
    /// \param Name         Member name.
    /// \param File         File where this member is defined.
    /// \param LineNo       Line number.
    /// \param SizeInBits   Member size.
    /// \param AlignInBits  Member alignment.
    /// \param OffsetInBits Member offset.
    /// \param Flags        Flags to encode member attribute, e.g. private
    /// \param Discriminant The discriminant for this branch; null for
    ///                     the default branch
    /// \param Ty           Parent type.</doc>
<def f='llvm/llvm/lib/IR/DIBuilder.cpp' l='350' ll='358' type='llvm::DIDerivedType * llvm::DIBuilder::createVariantMemberType(llvm::DIScope * Scope, llvm::StringRef Name, llvm::DIFile * File, unsigned int LineNumber, uint64_t SizeInBits, uint32_t AlignInBits, uint64_t OffsetInBits, llvm::Constant * Discriminant, DINode::DIFlags Flags, llvm::DIType * Ty)'/>
