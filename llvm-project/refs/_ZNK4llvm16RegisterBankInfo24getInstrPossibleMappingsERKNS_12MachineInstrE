<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='700' type='InstructionMappings llvm::RegisterBankInfo::getInstrPossibleMappings(const llvm::MachineInstr &amp; MI) const'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp' l='637' u='c' c='_ZN4llvm13RegBankSelect11assignInstrERNS_12MachineInstrE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/RegisterBankInfo.h' l='684'>/// Get the possible mapping for \p MI.
  /// A mapping defines where the different operands may live and at what cost.
  /// For instance, let us consider:
  /// v0(16) = G_ADD &lt;2 x i8&gt; v1, v2
  /// The possible mapping could be:
  ///
  /// {/*ID*/VectorAdd, /*Cost*/1, /*v0*/{(0xFFFF, VPR)}, /*v1*/{(0xFFFF, VPR)},
  ///                              /*v2*/{(0xFFFF, VPR)}}
  /// {/*ID*/ScalarAddx2, /*Cost*/2, /*v0*/{(0x00FF, GPR),(0xFF00, GPR)},
  ///                                /*v1*/{(0x00FF, GPR),(0xFF00, GPR)},
  ///                                /*v2*/{(0x00FF, GPR),(0xFF00, GPR)}}
  ///
  /// \note The first alternative of the returned mapping should be the
  /// direct translation of \p MI current form.
  ///
  /// \post !returnedVal.empty().</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/RegisterBankInfo.cpp' l='393' ll='407' type='RegisterBankInfo::InstructionMappings llvm::RegisterBankInfo::getInstrPossibleMappings(const llvm::MachineInstr &amp; MI) const'/>
