<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='329' type='unsigned int llvm::TargetTransformInfo::getFlatAddressSpace() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='313'>/// Returns the address space ID for a target&apos;s &apos;flat&apos; address space. Note
  /// this is not necessarily the same as addrspace(0), which LLVM sometimes
  /// refers to as the generic address space. The flat address space is a
  /// generic address space that can be used access multiple segments of memory
  /// with different address spaces. Access of a memory location through a
  /// pointer with this address space is expected to be legal but slower
  /// compared to the same memory location accessed through a pointer with a
  /// different address space.
  //
  /// This is for targets with different pointer representations which can
  /// be converted with the addrspacecast instruction. If a pointer is converted
  /// to this address space, optimizations should attempt to replace the access
  /// with the source address space.
  ///
  /// \returns ~0u if the target does not have such a flat address space to
  /// optimize away.</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='125' ll='127' type='unsigned int llvm::TargetTransformInfo::getFlatAddressSpace() const'/>
<use f='llvm/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp' l='638' u='c' c='_ZN12_GLOBAL__N_118InferAddressSpaces13runOnFunctionERN4llvm8FunctionE'/>
