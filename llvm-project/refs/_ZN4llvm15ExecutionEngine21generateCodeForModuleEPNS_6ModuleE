<def f='llvm/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h' l='268' type='void llvm::ExecutionEngine::generateCodeForModule(llvm::Module * M)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h' l='253'>/// generateCodeForModule - Run code generation for the specified module and
  /// load it into memory.
  ///
  /// When this function has completed, all code and data for the specified
  /// module, and any module on which this module depends, will be generated
  /// and loaded into memory, but relocations will not yet have been applied
  /// and all memory will be readable and writable but not executable.
  ///
  /// This function is primarily useful when generating code for an external
  /// target, allowing the client an opportunity to remap section addresses
  /// before relocations are applied.  Clients that intend to execute code
  /// locally can use the getFunctionAddress call, which will generate code
  /// and apply final preparations all in one step.
  ///
  /// This method has no effect for the interpeter.</doc>
<ovr f='llvm/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp' l='186' c='_ZN4llvm5MCJIT21generateCodeForModuleEPNS_6ModuleE'/>
