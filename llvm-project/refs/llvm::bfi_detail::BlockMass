<def f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='82' ll='141'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='68'>/// Mass of a block.
///
/// This class implements a sort of fixed-point fraction always between 0.0 and
/// 1.0.  getMass() == std::numeric_limits&lt;uint64_t&gt;::max() indicates a value of
/// 1.0.
///
/// Masses can be added and subtracted.  Simple saturation arithmetic is used,
/// so arithmetic operations never overflow or underflow.
///
/// Masses can be multiplied.  Multiplication treats full mass as 1.0 and uses
/// an inexpensive floating-point algorithm that&apos;s off-by-one (almost, but not
/// quite, maximum precision).
///
/// Masses can be scaled by \a BranchProbability at maximum precision.</doc>
<mbr r='llvm::bfi_detail::BlockMass::Mass' o='0' t='uint64_t'/>
<fun r='_ZN4llvm10bfi_detail9BlockMassC1Ev'/>
<fun r='_ZN4llvm10bfi_detail9BlockMassC1Em'/>
<fun r='_ZN4llvm10bfi_detail9BlockMass8getEmptyEv'/>
<fun r='_ZN4llvm10bfi_detail9BlockMass7getFullEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass7getMassEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass6isFullEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass7isEmptyEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassntEv'/>
<fun r='_ZN4llvm10bfi_detail9BlockMasspLES1_'/>
<fun r='_ZN4llvm10bfi_detail9BlockMassmIES1_'/>
<fun r='_ZN4llvm10bfi_detail9BlockMassmLENS_17BranchProbabilityE'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMasseqES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassneES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassleES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassgeES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassltES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMassgtES1_'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass8toScaledEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass4dumpEv'/>
<fun r='_ZNK4llvm10bfi_detail9BlockMass5printERNS_11raw_ostreamE'/>
