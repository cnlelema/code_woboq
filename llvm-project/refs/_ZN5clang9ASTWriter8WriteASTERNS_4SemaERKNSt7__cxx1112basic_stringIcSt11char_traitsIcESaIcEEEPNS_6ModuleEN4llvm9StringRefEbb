<dec f='llvm/clang/include/clang/Serialization/ASTWriter.h' l='571' type='clang::ASTFileSignature clang::ASTWriter::WriteAST(clang::Sema &amp; SemaRef, const std::string &amp; OutputFile, clang::Module * WritingModule, llvm::StringRef isysroot, bool hasErrors = false, bool ShouldCacheASTInMemory = false)'/>
<use f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='2325' u='c' c='_ZL13serializeUnitRN5clang9ASTWriterERN4llvm15SmallVectorImplIcEERNS_4SemaEbRNS2_11raw_ostreamE'/>
<doc f='llvm/clang/include/clang/Serialization/ASTWriter.h' l='557'>/// Write a precompiled header for the given semantic analysis.
  ///
  /// \param SemaRef a reference to the semantic analysis object that processed
  /// the AST to be written into the precompiled header.
  ///
  /// \param WritingModule The module that we are writing. If null, we are
  /// writing a precompiled header.
  ///
  /// \param isysroot if non-empty, write a relocatable file whose headers
  /// are relative to the given system root. If we&apos;re writing a module, its
  /// build directory will be used in preference to this if both are available.
  ///
  /// \return the module signature, which eventually will be a hash of
  /// the module but currently is merely a random 32-bit number.</doc>
<def f='llvm/clang/lib/Serialization/ASTWriter.cpp' l='4646' ll='4681' type='clang::ASTFileSignature clang::ASTWriter::WriteAST(clang::Sema &amp; SemaRef, const std::string &amp; OutputFile, clang::Module * WritingModule, llvm::StringRef isysroot, bool hasErrors = false, bool ShouldCacheASTInMemory = false)'/>
<use f='llvm/clang/lib/Serialization/GeneratePCH.cpp' l='63' u='c' c='_ZN5clang12PCHGenerator21HandleTranslationUnitERNS_10ASTContextE'/>
