<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1878' type='ExprResult clang::Parser::ParseInitializerWithPotentialDesignator()'/>
<def f='llvm/clang/lib/Parse/ParseInit.cpp' l='138' ll='381' type='ExprResult clang::Parser::ParseInitializerWithPotentialDesignator()'/>
<use f='llvm/clang/lib/Parse/ParseInit.cpp' l='439' u='c' c='_ZN5clang6Parser21ParseBraceInitializerEv'/>
<use f='llvm/clang/lib/Parse/ParseInit.cpp' l='525' u='c' c='_ZN5clang6Parser38ParseMicrosoftIfExistsBraceInitializerERN4llvm11SmallVectorIPNS_4ExprELj12EEERb'/>
<doc f='llvm/clang/lib/Parse/ParseInit.cpp' l='114'>/// ParseInitializerWithPotentialDesignator - Parse the &apos;initializer&apos; production
/// checking to see if the token stream starts with a designator.
///
///       designation:
///         designator-list &apos;=&apos;
/// [GNU]   array-designator
/// [GNU]   identifier &apos;:&apos;
///
///       designator-list:
///         designator
///         designator-list designator
///
///       designator:
///         array-designator
///         &apos;.&apos; identifier
///
///       array-designator:
///         &apos;[&apos; constant-expression &apos;]&apos;
/// [GNU]   &apos;[&apos; constant-expression &apos;...&apos; constant-expression &apos;]&apos;
///
/// NOTE: [OBC] allows &apos;[ objc-receiver objc-message-args ]&apos; as an
/// initializer (because it is an expression).  We need to consider this case
/// when parsing array designators.
///</doc>
