<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='765' ll='770' type='bool llvm::TargetInstrInfo::canInsertSelect(const llvm::MachineBasicBlock &amp; MBB, ArrayRef&lt;llvm::MachineOperand&gt; Cond, unsigned int TrueReg, unsigned int FalseReg, int &amp; CondCycles, int &amp; TrueCycles, int &amp; FalseCycles) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='748'>/// Return true if it is possible to insert a select
  /// instruction that chooses between TrueReg and FalseReg based on the
  /// condition code in Cond.
  ///
  /// When successful, also return the latency in cycles from TrueReg,
  /// FalseReg, and Cond to the destination register. In most cases, a select
  /// instruction will be 1 cycle, so CondCycles = TrueCycles = FalseCycles = 1
  ///
  /// Some x86 implementations have 2-cycle cmov instructions.
  ///
  /// @param MBB         Block where select instruction would be inserted.
  /// @param Cond        Condition returned by AnalyzeBranch.
  /// @param TrueReg     Virtual register to select when Cond is true.
  /// @param FalseReg    Virtual register to select when Cond is false.
  /// @param CondCycles  Latency from Cond+Branch to select output.
  /// @param TrueCycles  Latency from TrueReg to select output.
  /// @param FalseCycles Latency from FalseReg to select output.</doc>
<use f='llvm/llvm/lib/CodeGen/EarlyIfConversion.cpp' l='430' u='c' c='_ZN12_GLOBAL__N_19SSAIfConv12canConvertIfEPN4llvm17MachineBasicBlockE'/>
