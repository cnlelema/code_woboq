<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7340' type='clang::UnresolvedSetIterator clang::Sema::getMostSpecialized(clang::UnresolvedSetIterator SBegin, clang::UnresolvedSetIterator SEnd, clang::TemplateSpecCandidateSet &amp; FailedCandidates, clang::SourceLocation Loc, const clang::PartialDiagnostic &amp; NoneDiag, const clang::PartialDiagnostic &amp; AmbigDiag, const clang::PartialDiagnostic &amp; CandidateDiag, bool Complain = true, clang::QualType TargetType = clang::QualType())'/>
<def f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4945' ll='5018' type='clang::UnresolvedSetIterator clang::Sema::getMostSpecialized(clang::UnresolvedSetIterator SpecBegin, clang::UnresolvedSetIterator SpecEnd, clang::TemplateSpecCandidateSet &amp; FailedCandidates, clang::SourceLocation Loc, const clang::PartialDiagnostic &amp; NoneDiag, const clang::PartialDiagnostic &amp; AmbigDiag, const clang::PartialDiagnostic &amp; CandidateDiag, bool Complain = true, clang::QualType TargetType = clang::QualType())'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateDeduction.cpp' l='4920'>/// Retrieve the most specialized of the given function template
/// specializations.
///
/// \param SpecBegin the start iterator of the function template
/// specializations that we will be comparing.
///
/// \param SpecEnd the end iterator of the function template
/// specializations, paired with \p SpecBegin.
///
/// \param Loc the location where the ambiguity or no-specializations
/// diagnostic should occur.
///
/// \param NoneDiag partial diagnostic used to diagnose cases where there are
/// no matching candidates.
///
/// \param AmbigDiag partial diagnostic used to diagnose an ambiguity, if one
/// occurs.
///
/// \param CandidateDiag partial diagnostic used for each function template
/// specialization that is a candidate in the ambiguous ordering. One parameter
/// in this diagnostic should be unbound, which will correspond to the string
/// describing the template arguments for the function template specialization.
///
/// \returns the most specialized function template specialization, if
/// found. Otherwise, returns SpecEnd.</doc>
