<def f='llvm/llvm/include/llvm/IR/Instructions.h' l='2130' ll='2132' type='bool llvm::ShuffleVectorInst::isSelect() const'/>
<doc f='llvm/llvm/include/llvm/IR/Instructions.h' l='2122'>/// Return true if this shuffle chooses elements from its source vectors
  /// without lane crossings and all operands have the same number of elements.
  /// In other words, this shuffle is equivalent to a vector select with a
  /// constant condition operand.
  /// Example: shufflevector &lt;4 x n&gt; A, &lt;4 x n&gt; B, &lt;undef,1,6,3&gt;
  /// This returns false if the mask does not choose from both input vectors.
  /// In that case, the shuffle is better classified as an identity shuffle.
  /// TODO: Optionally allow length-changing shuffles.</doc>
<use f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='1176' u='c' c='_ZNK4llvm19TargetTransformInfo24getInstructionThroughputEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1293' u='c' c='_ZL27foldSelectShuffleWith1BinopRN4llvm17ShuffleVectorInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp' l='1348' u='c' c='_ZL17foldSelectShuffleRN4llvm17ShuffleVectorInstERNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEERKNS_10DataLayoutE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1433' u='c' c='_ZN4llvm12InstCombiner15foldVectorBinopERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1434' u='c' c='_ZN4llvm12InstCombiner15foldVectorBinopERNS_14BinaryOperatorE'/>
