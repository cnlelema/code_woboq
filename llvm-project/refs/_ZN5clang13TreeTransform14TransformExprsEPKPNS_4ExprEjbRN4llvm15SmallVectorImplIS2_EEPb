<dec f='llvm/clang/lib/Sema/TreeTransform.h' l='417' type='bool clang::TreeTransform::TransformExprs(clang::Expr *const * Inputs, unsigned int NumInputs, bool IsCall, SmallVectorImpl&lt;clang::Expr *&gt; &amp; Outputs, bool * ArgChanged = nullptr)'/>
<def f='llvm/clang/lib/Sema/TreeTransform.h' l='3490' ll='3601' type='bool clang::TreeTransform::TransformExprs(clang::Expr *const * Inputs, unsigned int NumInputs, bool IsCall, SmallVectorImpl&lt;clang::Expr *&gt; &amp; Outputs, bool * ArgChanged = nullptr)'/>
<use f='llvm/clang/lib/Sema/TreeTransform.h' l='10010' u='c' c='_ZN5clang13TreeTransform22TransformParenListExprEPNS_13ParenListExprE'/>
<doc f='llvm/clang/lib/Sema/TreeTransform.h' l='394'>/// Transform the given list of expressions.
  ///
  /// This routine transforms a list of expressions by invoking
  /// \c TransformExpr() for each subexpression. However, it also provides
  /// support for variadic templates by expanding any pack expansions (if the
  /// derived class permits such expansion) along the way. When pack expansions
  /// are present, the number of outputs may not equal the number of inputs.
  ///
  /// \param Inputs The set of expressions to be transformed.
  ///
  /// \param NumInputs The number of expressions in \c Inputs.
  ///
  /// \param IsCall If \c true, then this transform is being performed on
  /// function-call arguments, and any arguments that should be dropped, will
  /// be.
  ///
  /// \param Outputs The transformed input expressions will be added to this
  /// vector.
  ///
  /// \param ArgChanged If non-NULL, will be set \c true if any argument changed
  /// due to transformation.
  ///
  /// \returns true if an error occurred, false otherwise.</doc>
