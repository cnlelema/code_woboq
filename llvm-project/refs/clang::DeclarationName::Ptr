<dec f='llvm/clang/include/clang/AST/DeclarationName.h' l='254' type='uintptr_t'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='257' u='r' c='_ZNK5clang15DeclarationName17getStoredNameKindEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='260' u='r' c='_ZNK5clang15DeclarationName6getPtrEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='268' u='w' c='_ZN5clang15DeclarationName13setPtrAndKindEPKvNS0_14StoredNameKindE'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='356' u='w' c='_ZN5clang15DeclarationNameC1ENS_8SelectorE'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='417' u='r' c='_ZNK5clang15DeclarationName18getAsOpaqueIntegerEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='420' u='r' c='_ZNK5clang15DeclarationName14getAsOpaquePtrEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='425' u='w' c='_ZN5clang15DeclarationName16getFromOpaquePtrEPv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='433' u='w' c='_ZN5clang15DeclarationName20getFromOpaqueIntegerEm'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='486' u='r' c='_ZNK5clang15DeclarationName15getObjCSelectorEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='509' u='r' c='_ZN5clangeqENS_15DeclarationNameES0_'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='509' u='r' c='_ZN5clangeqENS_15DeclarationNameES0_'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='514' u='r' c='_ZN5clangneENS_15DeclarationNameES0_'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='514' u='r' c='_ZN5clangneENS_15DeclarationNameES0_'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='519' u='w' c='_ZN5clang15DeclarationName14getEmptyMarkerEv'/>
<use f='llvm/clang/include/clang/AST/DeclarationName.h' l='525' u='w' c='_ZN5clang15DeclarationName18getTombstoneMarkerEv'/>
<offset>0</offset>
<doc f='llvm/clang/include/clang/AST/DeclarationName.h' l='222'>/// The lowest three bits of Ptr are used to express what kind of name
  /// we&apos;re actually storing, using the values of StoredNameKind. Depending
  /// on the kind of name this is, the upper bits of Ptr may have one
  /// of several different meanings:
  ///
  ///   StoredIdentifier - The name is a normal identifier, and Ptr is
  ///   a normal IdentifierInfo pointer.
  ///
  ///   StoredObjCZeroArgSelector - The name is an Objective-C
  ///   selector with zero arguments, and Ptr is an IdentifierInfo
  ///   pointer pointing to the selector name.
  ///
  ///   StoredObjCOneArgSelector - The name is an Objective-C selector
  ///   with one argument, and Ptr is an IdentifierInfo pointer
  ///   pointing to the selector name.
  ///
  ///   StoredCXXConstructorName - The name of a C++ constructor,
  ///   Ptr points to a CXXSpecialNameExtra.
  ///
  ///   StoredCXXDestructorName - The name of a C++ destructor,
  ///   Ptr points to a CXXSpecialNameExtra.
  ///
  ///   StoredCXXConversionFunctionName - The name of a C++ conversion function,
  ///   Ptr points to a CXXSpecialNameExtra.
  ///
  ///   StoredCXXOperatorName - The name of an overloaded C++ operator,
  ///   Ptr points to a CXXOperatorIdName.
  ///
  ///   StoredDeclarationNameExtra - Ptr is actually a pointer to a
  ///   DeclarationNameExtra structure, whose first value will tell us
  ///   whether this is an Objective-C selector, C++ deduction guide,
  ///   C++ literal operator, or C++ using directive.</doc>
