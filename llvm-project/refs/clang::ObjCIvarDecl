<inh f='llvm/clang/include/clang/AST/Decl.h' l='2597' c='clang::FieldDecl'/>
<def f='llvm/clang/include/clang/AST/DeclObjC.h' l='1944' ll='2008'/>
<size>1</size>
<doc f='llvm/clang/include/clang/AST/DeclObjC.h' l='1929'>/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC
/// instance variables are identical to C. The only exception is Objective-C
/// supports C++ style access control. For example:
///
///   \@interface IvarExample : NSObject
///   {
///     id defaultToProtected;
///   \@public:
///     id canBePublic; // same as C++.
///   \@protected:
///     id canBeProtected; // same as C++.
///   \@package:
///     id canBePackage; // framework visibility (not available in C++).
///   }
///</doc>
<fun r='_ZN5clang12ObjCIvarDecl6anchorEv'/>
<fun r='_ZN5clang12ObjCIvarDeclC1EPNS_17ObjCContainerDeclENS_14SourceLocationES3_PNS_14IdentifierInfoENS_8QualTypeEPNS_14TypeSourceInfoENS0_13AccessControlEPNS_4ExprEb'/>
<fun r='_ZN5clang12ObjCIvarDecl6CreateERNS_10ASTContextEPNS_17ObjCContainerDeclENS_14SourceLocationES5_PNS_14IdentifierInfoENS_8QualTypeEPNS_14TypeSourceInfoE2315797'/>
<fun r='_ZN5clang12ObjCIvarDecl18CreateDeserializedERNS_10ASTContextEj'/>
<fun r='_ZNK5clang12ObjCIvarDecl22getContainingInterfaceEv'/>
<fun r='_ZN5clang12ObjCIvarDecl11getNextIvarEv'/>
<fun r='_ZNK5clang12ObjCIvarDecl11getNextIvarEv'/>
<fun r='_ZN5clang12ObjCIvarDecl11setNextIvarEPS0_'/>
<fun r='_ZN5clang12ObjCIvarDecl16setAccessControlENS0_13AccessControlE'/>
<fun r='_ZNK5clang12ObjCIvarDecl16getAccessControlEv'/>
<fun r='_ZNK5clang12ObjCIvarDecl25getCanonicalAccessControlEv'/>
<fun r='_ZN5clang12ObjCIvarDecl13setSynthesizeEb'/>
<fun r='_ZNK5clang12ObjCIvarDecl13getSynthesizeEv'/>
<fun r='_ZNK5clang12ObjCIvarDecl12getUsageTypeENS_8QualTypeE'/>
<fun r='_ZN5clang12ObjCIvarDecl7classofEPKNS_4DeclE'/>
<fun r='_ZN5clang12ObjCIvarDecl11classofKindENS_4Decl4KindE'/>
<mbr r='clang::ObjCIvarDecl::NextIvar' t='clang::ObjCIvarDecl *'/>
<mbr r='clang::ObjCIvarDecl::DeclAccess' t='unsigned int'/>
<mbr r='clang::ObjCIvarDecl::Synthesized' t='unsigned int'/>
