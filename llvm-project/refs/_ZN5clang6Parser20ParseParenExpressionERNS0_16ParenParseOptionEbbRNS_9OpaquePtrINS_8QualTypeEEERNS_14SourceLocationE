<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1715' type='ExprResult clang::Parser::ParseParenExpression(clang::Parser::ParenParseOption &amp; ExprType, bool stopIfCastExpr, bool isTypeCast, ParsedType &amp; CastTy, clang::SourceLocation &amp; RParenLoc)'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='794' u='c' c='_ZN5clang6Parser19ParseCastExpressionEbbRbNS0_13TypeCastStateEb'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1930' u='c' c='_ZN5clang6Parser34ParseExprAfterUnaryExprOrTypeTraitERKNS_5TokenERbRNS_9OpaquePtrINS_8QualTypeEEERNS_11SourceRangeE'/>
<def f='llvm/clang/lib/Parse/ParseExpr.cpp' l='2363' ll='2689' type='ExprResult clang::Parser::ParseParenExpression(clang::Parser::ParenParseOption &amp; ExprType, bool stopIfCastExpr, bool isTypeCast, ParsedType &amp; CastTy, clang::SourceLocation &amp; RParenLoc)'/>
<doc f='llvm/clang/lib/Parse/ParseExpr.cpp' l='2338'>/// ParseParenExpression - This parses the unit that starts with a &apos;(&apos; token,
/// based on what is allowed by ExprType.  The actual thing parsed is returned
/// in ExprType. If stopIfCastExpr is true, it will only return the parsed type,
/// not the parsed cast-expression.
///
/// \verbatim
///       primary-expression: [C99 6.5.1]
///         &apos;(&apos; expression &apos;)&apos;
/// [GNU]   &apos;(&apos; compound-statement &apos;)&apos;      (if !ParenExprOnly)
///       postfix-expression: [C99 6.5.2]
///         &apos;(&apos; type-name &apos;)&apos; &apos;{&apos; initializer-list &apos;}&apos;
///         &apos;(&apos; type-name &apos;)&apos; &apos;{&apos; initializer-list &apos;,&apos; &apos;}&apos;
///       cast-expression: [C99 6.5.4]
///         &apos;(&apos; type-name &apos;)&apos; cast-expression
/// [ARC]   bridged-cast-expression
/// [ARC] bridged-cast-expression:
///         (__bridge type-name) cast-expression
///         (__bridge_transfer type-name) cast-expression
///         (__bridge_retained type-name) cast-expression
///       fold-expression: [C++1z]
///         &apos;(&apos; cast-expression fold-operator &apos;...&apos; &apos;)&apos;
///         &apos;(&apos; &apos;...&apos; fold-operator cast-expression &apos;)&apos;
///         &apos;(&apos; cast-expression fold-operator &apos;...&apos;
///                 fold-operator cast-expression &apos;)&apos;
/// \endverbatim</doc>
