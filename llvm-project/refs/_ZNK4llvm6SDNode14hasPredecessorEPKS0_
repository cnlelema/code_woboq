<use f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='850' u='c' c='_ZNK4llvm6SDNode15isPredecessorOfEPKS0_'/>
<dec f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='857' type='bool llvm::SDNode::hasPredecessor(const llvm::SDNode * N) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/SelectionDAGNodes.h' l='853'>/// Return true if N is a predecessor of this node.
  /// N is either an operand of this node, or can be reached by recursively
  /// traversing up the operands.
  /// NOTE: This is an expensive method. Use it carefully.</doc>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp' l='16858' u='c' c='_ZN12_GLOBAL__N_111DAGCombiner23visitEXTRACT_VECTOR_ELTEPN4llvm6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp' l='1327' u='c' c='_ZN12_GLOBAL__N_120SelectionDAGLegalize35ExpandExtractFromVectorThroughStackEN4llvm7SDValueE'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp' l='9173' ll='9178' type='bool llvm::SDNode::hasPredecessor(const llvm::SDNode * N) const'/>
