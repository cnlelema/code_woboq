<dec f='llvm/llvm/utils/TableGen/X86DisassemblerTables.h' l='182' type='void llvm::X86Disassembler::DisassemblerTables::emitInstructionInfo(llvm::raw_ostream &amp; o, unsigned int &amp; i) const'/>
<doc f='llvm/llvm/utils/TableGen/X86DisassemblerTables.h' l='153'>/// emitInstructionInfo - Prints the instruction specifier table, which has
  ///   one entry for each instruction, and contains name and operand
  ///   information.  This table is printed as:
  ///
  ///   struct InstructionSpecifier CONTEXTS_SYM[k] = {
  ///     {
  ///       /* nnnn */
  ///       &quot;MNEMONIC&quot;,
  ///       0xnn,
  ///       {
  ///         {
  ///           ENCODING,
  ///           TYPE
  ///         },
  ///         ...
  ///       }
  ///     },
  ///   };
  ///
  ///   k is the total number of instructions.
  ///   nnnn is the ID of the current instruction (0-based).  This table
  ///   includes entries for non-instructions like PHINODE.
  ///   0xnn is the lowest possible opcode for the current instruction, used for
  ///   AddRegFrm instructions to compute the operand&apos;s value.
  ///   ENCODING and TYPE describe the encoding and type for a single operand.
  ///
  /// @param o  - The output stream to which the instruction table should be
  ///             written.
  /// @param i  - The indent level for use with the stream.</doc>
<def f='llvm/llvm/utils/TableGen/X86DisassemblerTables.cpp' l='822' ll='888' type='void llvm::X86Disassembler::DisassemblerTables::emitInstructionInfo(llvm::raw_ostream &amp; o, unsigned int &amp; i) const'/>
<use f='llvm/llvm/utils/TableGen/X86DisassemblerTables.cpp' l='1043' u='c' c='_ZNK4llvm15X86Disassembler18DisassemblerTables4emitERNS_11raw_ostreamE'/>
