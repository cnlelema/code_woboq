<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2693' type='bool clang::Sema::IsPointerConversion(clang::Expr * From, clang::QualType FromType, clang::QualType ToType, bool InOverloadResolution, clang::QualType &amp; ConvertedType, bool &amp; IncompatibleObjC)'/>
<use f='llvm/clang/lib/Sema/SemaOverload.cpp' l='1821' u='c' c='_ZL20IsStandardConversionRN5clang4SemaEPNS_4ExprENS_8QualTypeEbRNS_26StandardConversionSequenceEbb'/>
<def f='llvm/clang/lib/Sema/SemaOverload.cpp' l='2274' ll='2410' type='bool clang::Sema::IsPointerConversion(clang::Expr * From, clang::QualType FromType, clang::QualType ToType, bool InOverloadResolution, clang::QualType &amp; ConvertedType, bool &amp; IncompatibleObjC)'/>
<doc f='llvm/clang/lib/Sema/SemaOverload.cpp' l='2258'>/// IsPointerConversion - Determines whether the conversion of the
/// expression From, which has the (possibly adjusted) type FromType,
/// can be converted to the type ToType via a pointer conversion (C++
/// 4.10). If so, returns true and places the converted type (that
/// might differ from ToType in its cv-qualifiers at some level) into
/// ConvertedType.
///
/// This routine also supports conversions to and from block pointers
/// and conversions with Objective-C&apos;s &apos;id&apos;, &apos;id&lt;protocols...&gt;&apos;, and
/// pointers to interfaces. FIXME: Once we&apos;ve determined the
/// appropriate overloading rules for Objective-C, we may want to
/// split the Objective-C checks into a different routine; however,
/// GCC seems to consider all of these conversions to be pointer
/// conversions, so for now they live here. IncompatibleObjC will be
/// set if the conversion is an allowed Objective-C conversion that
/// should result in a warning.</doc>
