<def f='llvm/clang/include/clang/Sema/ScopeInfo.h' l='916' ll='920' type='void clang::sema::LambdaScopeInfo::addPotentialCapture(clang::Expr * VarExpr)'/>
<doc f='llvm/clang/include/clang/Sema/ScopeInfo.h' l='899'>/// Add a variable that might potentially be captured by the
  /// lambda and therefore the enclosing lambdas.
  ///
  /// This is also used by enclosing lambda&apos;s to speculatively capture
  /// variables that nested lambda&apos;s - depending on their enclosing
  /// specialization - might need to capture.
  /// Consider:
  /// void f(int, int); &lt;-- don&apos;t capture
  /// void f(const int&amp;, double); &lt;-- capture
  /// void foo() {
  ///   const int x = 10;
  ///   auto L = [=](auto a) { // capture &apos;x&apos;
  ///      return [=](auto b) {
  ///        f(x, a);  // we may or may not need to capture &apos;x&apos;
  ///      };
  ///   };
  /// }</doc>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='16632' u='c' c='_ZL23DoMarkVarDeclReferencedRN5clang4SemaENS_14SourceLocationEPNS_7VarDeclEPNS_4ExprE'/>
