<dec f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.h' l='117' type='static void llvm::cfi_verify::GraphBuilder::buildFlowGraphImpl(const llvm::cfi_verify::FileAnalysis &amp; Analysis, DenseSet&lt;uint64_t&gt; &amp; OpenedNodes, llvm::cfi_verify::GraphResult &amp; Result, uint64_t Address, uint64_t Depth)'/>
<doc f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.h' l='108'>// Implementation function that actually builds the flow graph. Retrieves a
  // list of cross references to instruction referenced in `Address`. If any of
  // these XRefs are conditional branches, it will build the other potential
  // path (fallthrough or target) using `buildFlowsToUndefined`. Otherwise, this
  // function will recursively call itself where `Address` in the recursive call
  // is now the XRef. If any XRef is an orphan, it is added to
  // `Result.OrphanedNodes`. `OpenedNodes` keeps track of the list of nodes
  // in the current path and is used for cycle-checking. If the path is found
  // to be cyclic, it will be added to `Result.OrphanedNodes`.</doc>
<use f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.cpp' l='108' u='c' c='_ZN4llvm10cfi_verify12GraphBuilder14buildFlowGraphERKNS0_12FileAnalysisENS_6object16SectionedAddressE'/>
<def f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.cpp' l='197' ll='337' type='static void llvm::cfi_verify::GraphBuilder::buildFlowGraphImpl(const llvm::cfi_verify::FileAnalysis &amp; Analysis, DenseSet&lt;uint64_t&gt; &amp; OpenedNodes, llvm::cfi_verify::GraphResult &amp; Result, uint64_t Address, uint64_t Depth)'/>
<use f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.cpp' l='240' u='c' c='_ZN4llvm10cfi_verify12GraphBuilder18buildFlowGraphImplERKNS0_12FileAnalysisERNS_8DenseSetImNS_12DenseMapInfoImEEEERNS0_11GraphResultEmm'/>
<use f='llvm/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.cpp' l='280' u='c' c='_ZN4llvm10cfi_verify12GraphBuilder18buildFlowGraphImplERKNS0_12FileAnalysisERNS_8DenseSetImNS_12DenseMapInfoImEEEERNS0_11GraphResultEmm'/>
