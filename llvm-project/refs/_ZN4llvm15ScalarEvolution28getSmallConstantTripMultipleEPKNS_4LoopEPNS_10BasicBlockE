<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='746' type='unsigned int llvm::ScalarEvolution::getSmallConstantTripMultiple(const llvm::Loop * L, llvm::BasicBlock * ExitingBlock)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolution.h' l='740'>/// Returns the largest constant divisor of the trip count of this loop as a
  /// normal unsigned value, if possible. This means that the actual trip
  /// count is always a multiple of the returned value (don&apos;t forget the trip
  /// count could very well be zero as well!). As explained in the comments
  /// for getSmallConstantTripCount, this assumes that control exits the loop
  /// via ExitingBlock.</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6524' u='c' c='_ZN4llvm15ScalarEvolution28getSmallConstantTripMultipleEPKNS_4LoopE'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6542' ll='6572' type='unsigned int llvm::ScalarEvolution::getSmallConstantTripMultiple(const llvm::Loop * L, llvm::BasicBlock * ExitingBlock)'/>
<doc f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='6530'>/// Returns the largest constant divisor of the trip count of this loop as a
/// normal unsigned value, if possible. This means that the actual trip count is
/// always a multiple of the returned value (don&apos;t forget the trip count could
/// very well be zero as well!).
///
/// Returns 1 if the trip count is unknown or not guaranteed to be the
/// multiple of a constant (which is also the case if the trip count is simply
/// constant, use getSmallConstantTripCount for that case), Will also return 1
/// if the trip count is very large (&gt;= 2^32).
///
/// As explained in the comments for getSmallConstantTripCount, this assumes
/// that control exits the loop via ExitingBlock.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollAndJamPass.cpp' l='374' u='c' c='_ZL21tryToUnrollAndJamLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_147069670'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='1053' u='c' c='_ZL15tryToUnrollLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_25Optimi6926510'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnroll.cpp' l='388' u='c' c='_ZN4llvm10UnrollLoopEPNS_4LoopENS_17UnrollLoopOptionsEPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEPNS_25OptimizationRemarkEmitterEbPS1_'/>
