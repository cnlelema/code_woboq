<dec f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='814' type='int llvm::TargetTransformInfo::getArithmeticInstrCost(unsigned int Opcode, llvm::Type * Ty, llvm::TargetTransformInfo::OperandValueKind Opd1Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueKind Opd2Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueProperties Opd1PropInfo = OP_None, llvm::TargetTransformInfo::OperandValueProperties Opd2PropInfo = OP_None, ArrayRef&lt;const llvm::Value *&gt; Args = ArrayRef&lt;const llvm::Value *&gt;()) const'/>
<doc f='llvm/llvm/include/llvm/Analysis/TargetTransformInfo.h' l='800'>/// This is an approximation of reciprocal throughput of a math/logic op.
  /// A higher cost indicates less expected throughput.
  /// From Agner Fog&apos;s guides, reciprocal throughput is &quot;the average number of
  /// clock cycles per instruction when the instructions are not part of a
  /// limiting dependency chain.&quot;
  /// Therefore, costs should be scaled to account for multiple execution units
  /// on the target that can process this type of instruction. For example, if
  /// there are 5 scalar integer units and 2 vector integer units that can
  /// calculate an &apos;add&apos; in a single cycle, this model should indicate that the
  /// cost of the vector add instruction is 2.5 times the cost of the scalar
  /// add instruction.
  /// \p Args is an optional argument which holds the instruction operands
  /// values so the TTI can analyze those values searching for special
  /// cases or optimizations based on those values.</doc>
<def f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='460' ll='469' type='int llvm::TargetTransformInfo::getArithmeticInstrCost(unsigned int Opcode, llvm::Type * Ty, llvm::TargetTransformInfo::OperandValueKind Opd1Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueKind Opd2Info = OK_AnyValue, llvm::TargetTransformInfo::OperandValueProperties Opd1PropInfo = OP_None, llvm::TargetTransformInfo::OperandValueProperties Opd2PropInfo = OP_None, ArrayRef&lt;const llvm::Value *&gt; Args = ArrayRef&lt;const llvm::Value *&gt;()) const'/>
<use f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='1049' u='c' c='_ZNK4llvm19TargetTransformInfo24getInstructionThroughputEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/TargetTransformInfo.cpp' l='1059' u='c' c='_ZNK4llvm19TargetTransformInfo24getInstructionThroughputEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6368' u='c' c='_ZN12_GLOBAL__N_119VectorPromoteHelper21isProfitableToPromoteEv'/>
<use f='llvm/llvm/lib/CodeGen/CodeGenPrepare.cpp' l='6370' u='c' c='_ZN12_GLOBAL__N_119VectorPromoteHelper21isProfitableToPromoteEv'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='888' u='c' c='_ZL11visitIVCastPN4llvm8CastInstERN12_GLOBAL__N_110WideIVInfoEPNS_15ScalarEvolutionEPKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='889' u='c' c='_ZL11visitIVCastPN4llvm8CastInstERN12_GLOBAL__N_110WideIVInfoEPNS_15ScalarEvolutionEPKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5922' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5962' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5968' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='6063' u='c' c='_ZN4llvm26LoopVectorizationCostModel18getInstructionCostEPNS_11InstructionEjRPNS_4TypeE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2939' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2945' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2956' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2962' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3056' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='3057' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP12getEntryCostEPNS1_9TreeEntryE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='6298' u='c' c='_ZN12_GLOBAL__N_119HorizontalReduction16getReductionCostEPN4llvm19TargetTransformInfoEPNS1_5ValueEj'/>
