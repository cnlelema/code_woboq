<dec f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='890' type='void llvm::BlockFrequencyInfoImpl::initializeLoops()'/>
<use f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='1038' u='c' c='_ZN4llvm22BlockFrequencyInfoImpl9calculateERKNS_10bfi_detail7TypeMapIT_E9FunctionTERKNS4_22BranchProbabilityInfoTERKNS4_9LoopInfoTE'/>
<def f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='1086' ll='1137' type='void llvm::BlockFrequencyInfoImpl::initializeLoops()'/>
<doc f='llvm/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h' l='883'>/// Initialize loop data.
  ///
  /// Build up \a Loops using \a LoopInfo.  \a LoopInfo gives us a mapping from
  /// each block to the deepest loop it&apos;s in, but we need the inverse.  For each
  /// loop, we store in reverse post-order its &quot;immediate&quot; members, defined as
  /// the header, the headers of immediate sub-loops, and all other blocks in
  /// the loop that are not in sub-loops.</doc>
