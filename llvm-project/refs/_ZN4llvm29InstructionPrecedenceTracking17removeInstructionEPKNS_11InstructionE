<dec f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='84' type='void llvm::InstructionPrecedenceTracking::removeInstruction(const llvm::Instruction * Inst)'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='82'>/// Notifies this tracking that we are going to remove the instruction \p Inst
  /// It makes all necessary updates to internal caches to keep them consistent.</doc>
<def f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='109' ll='113' type='void llvm::InstructionPrecedenceTracking::removeInstruction(const llvm::Instruction * Inst)'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='92' u='c' c='_ZN4llvm17ICFLoopSafetyInfo17removeInstructionEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Analysis/MustExecute.cpp' l='93' u='c' c='_ZN4llvm17ICFLoopSafetyInfo17removeInstructionEPKNS_11InstructionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2095' u='c' c='_ZN4llvm3GVN12processBlockEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GVN.cpp' l='2327' u='c' c='_ZN4llvm3GVN16performScalarPREEPNS_11InstructionE'/>
