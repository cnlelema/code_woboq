<dec f='llvm/clang/include/clang/Lex/Lexer.h' l='479' type='static llvm::StringRef clang::Lexer::getImmediateMacroNameForDiagnostics(clang::SourceLocation Loc, const clang::SourceManager &amp; SM, const clang::LangOptions &amp; LangOpts)'/>
<doc f='llvm/clang/include/clang/Lex/Lexer.h' l='462'>/// Retrieve the name of the immediate macro expansion.
  ///
  /// This routine starts from a source location, and finds the name of the
  /// macro responsible for its immediate expansion. It looks through any
  /// intervening macro argument expansions to compute this. It returns a
  /// StringRef which refers to the SourceManager-owned buffer of the source
  /// where that macro name is spelled. Thus, the result shouldn&apos;t out-live
  /// that SourceManager.
  ///
  /// This differs from Lexer::getImmediateMacroName in that any macro argument
  /// location will result in the topmost function macro that accepted it.
  /// e.g.
  /// \code
  ///   MAC1( MAC2(foo) )
  /// \endcode
  /// for location of &apos;foo&apos; token, this function will return &quot;MAC1&quot; while
  /// Lexer::getImmediateMacroName will return &quot;MAC2&quot;.</doc>
<use f='llvm/clang/lib/Frontend/DiagnosticRenderer.cpp' l='441' u='c' c='_ZN5clang18DiagnosticRenderer24emitSingleMacroExpansionENS_13FullSourceLocENS_17DiagnosticsEngine5LevelEN4llvm8ArrayRefINS_15CharSourceRangeEEE'/>
<def f='llvm/clang/lib/Lex/Lexer.cpp' l='1014' ll='1037' type='static llvm::StringRef clang::Lexer::getImmediateMacroNameForDiagnostics(clang::SourceLocation Loc, const clang::SourceManager &amp; SM, const clang::LangOptions &amp; LangOpts)'/>
<use f='llvm/clang/lib/Sema/SemaChecking.cpp' l='11110' u='c' c='_ZL22DiagnoseNullConversionRN5clang4SemaEPNS_4ExprENS_8QualTypeENS_14SourceLocationE'/>
