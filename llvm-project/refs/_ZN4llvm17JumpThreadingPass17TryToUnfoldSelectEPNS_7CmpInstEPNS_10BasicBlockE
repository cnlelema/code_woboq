<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='144' type='bool llvm::JumpThreadingPass::TryToUnfoldSelect(llvm::CmpInst * CondCmp, llvm::BasicBlock * BB)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1171' u='c' c='_ZN4llvm17JumpThreadingPass12ProcessBlockEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2475' ll='2518' type='bool llvm::JumpThreadingPass::TryToUnfoldSelect(llvm::CmpInst * CondCmp, llvm::BasicBlock * BB)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='2463'>/// TryToUnfoldSelect - Look for blocks of the form
/// bb1:
///   %a = select
///   br bb2
///
/// bb2:
///   %p = phi [%a, %bb1] ...
///   %c = icmp %p
///   br i1 %c
///
/// And expand the select into a branch structure if one of its arms allows %c
/// to be folded. This later enables threading from bb1 over bb2.</doc>
