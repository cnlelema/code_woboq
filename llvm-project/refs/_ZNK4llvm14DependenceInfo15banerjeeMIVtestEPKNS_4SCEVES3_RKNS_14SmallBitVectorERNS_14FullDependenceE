<dec f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='777' type='bool llvm::DependenceInfo::banerjeeMIVtest(const llvm::SCEV * Src, const llvm::SCEV * Dst, const llvm::SmallBitVector &amp; Loops, llvm::FullDependence &amp; Result) const'/>
<use f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2294' u='c' c='_ZNK4llvm14DependenceInfo7testMIVEPKNS_4SCEVES3_RKNS_14SmallBitVectorERNS_14FullDependenceE'/>
<def f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2532' ll='2604' type='bool llvm::DependenceInfo::banerjeeMIVtest(const llvm::SCEV * Src, const llvm::SCEV * Dst, const llvm::SmallBitVector &amp; Loops, llvm::FullDependence &amp; Result) const'/>
<doc f='llvm/llvm/lib/Analysis/DependenceAnalysis.cpp' l='2499'>//===----------------------------------------------------------------------===//
// banerjeeMIVtest -
// Use Banerjee&apos;s Inequalities to test an MIV subscript pair.
// (Wolfe, in the race-car book, calls this the Extreme Value Test.)
// Generally follows the discussion in Section 2.5.2 of
//
//    Optimizing Supercompilers for Supercomputers
//    Michael Wolfe
//
// The inequalities given on page 25 are simplified in that loops are
// normalized so that the lower bound is always 0 and the stride is always 1.
// For example, Wolfe gives
//
//     LB^&lt;_k = (A^-_k - B_k)^- (U_k - L_k - N_k) + (A_k - B_k)L_k - B_k N_k
//
// where A_k is the coefficient of the kth index in the source subscript,
// B_k is the coefficient of the kth index in the destination subscript,
// U_k is the upper bound of the kth index, L_k is the lower bound of the Kth
// index, and N_k is the stride of the kth index. Since all loops are normalized
// by the SCEV package, N_k = 1 and L_k = 0, allowing us to simplify the
// equation to
//
//     LB^&lt;_k = (A^-_k - B_k)^- (U_k - 0 - 1) + (A_k - B_k)0 - B_k 1
//            = (A^-_k - B_k)^- (U_k - 1)  - B_k
//
// Similar simplifications are possible for the other equations.
//
// When we can&apos;t determine the number of iterations for a loop,
// we use NULL as an indicator for the worst case, infinity.
// When computing the upper bound, NULL denotes +inf;
// for the lower bound, NULL denotes -inf.
//
// Return true if dependence disproved.</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DependenceAnalysis.h' l='773'>/// banerjeeMIVtest - Tests an MIV subscript pair for dependence.
    /// Returns true if any possible dependence is disproved.
    /// Marks the result as inconsistent.
    /// Computes directions.</doc>
