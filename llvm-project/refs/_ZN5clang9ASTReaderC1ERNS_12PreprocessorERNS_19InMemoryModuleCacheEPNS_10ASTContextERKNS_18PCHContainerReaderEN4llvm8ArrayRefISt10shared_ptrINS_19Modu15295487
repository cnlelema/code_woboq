<dec f='llvm/clang/include/clang/Serialization/ASTReader.h' l='1481' type='void clang::ASTReader::ASTReader(clang::Preprocessor &amp; PP, clang::InMemoryModuleCache &amp; ModuleCache, clang::ASTContext * Context, const clang::PCHContainerReader &amp; PCHContainerRdr, ArrayRef&lt;std::shared_ptr&lt;ModuleFileExtension&gt; &gt; Extensions, llvm::StringRef isysroot = &quot;&quot;, bool DisableValidation = false, bool AllowASTWithCompilerErrors = false, bool AllowConfigurationMismatch = false, bool ValidateSystemInputs = false, bool UseGlobalIndex = true, std::unique_ptr&lt;llvm::Timer&gt; ReadTimer = {})'/>
<use f='llvm/clang/lib/Frontend/ASTUnit.cpp' l='817' u='c' c='_ZN5clang7ASTUnit15LoadFromASTFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_18PCHContainerReaderENS0_10WhatToLoadEN4llvm18IntrusiveR3316945'/>
<doc f='llvm/clang/include/clang/Serialization/ASTReader.h' l='1442'>/// Load the AST file and validate its contents against the given
  /// Preprocessor.
  ///
  /// \param PP the preprocessor associated with the context in which this
  /// precompiled header will be loaded.
  ///
  /// \param Context the AST context that this precompiled header will be
  /// loaded into, if any.
  ///
  /// \param PCHContainerRdr the PCHContainerOperations to use for loading and
  /// creating modules.
  ///
  /// \param Extensions the list of module file extensions that can be loaded
  /// from the AST files.
  ///
  /// \param isysroot If non-NULL, the system include path specified by the
  /// user. This is only used with relocatable PCH files. If non-NULL,
  /// a relocatable PCH file will use the default path &quot;/&quot;.
  ///
  /// \param DisableValidation If true, the AST reader will suppress most
  /// of its regular consistency checking, allowing the use of precompiled
  /// headers that cannot be determined to be compatible.
  ///
  /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an
  /// AST file the was created out of an AST with compiler errors,
  /// otherwise it will reject it.
  ///
  /// \param AllowConfigurationMismatch If true, the AST reader will not check
  /// for configuration differences between the AST file and the invocation.
  ///
  /// \param ValidateSystemInputs If true, the AST reader will validate
  /// system input files in addition to user input files. This is only
  /// meaningful if \p DisableValidation is false.
  ///
  /// \param UseGlobalIndex If true, the AST reader will try to load and use
  /// the global module index.
  ///
  /// \param ReadTimer If non-null, a timer used to track the time spent
  /// deserializing.</doc>
<use f='llvm/clang/lib/Frontend/ChainedIncludesSource.cpp' l='85' u='c' c='_ZL15createASTReaderRN5clang16CompilerInstanceEN4llvm9StringRefERNS2_15SmallVectorImplISt10unique_ptrINS2_12MemoryBufferESt14default_deleteIS6_EEEERNS15881606'/>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='510' u='c' c='_ZN5clang16CompilerInstance26createPCHExternalASTSourceEN4llvm9StringRefES2_bbRNS_12PreprocessorERNS_19InMemoryModuleCacheERNS_10ASTContextERKNS_18PCH13753599'/>
<use f='llvm/clang/lib/Frontend/CompilerInstance.cpp' l='1475' u='c' c='_ZN5clang16CompilerInstance19createModuleManagerEv'/>
<use f='llvm/clang/lib/Frontend/FrontendActions.cpp' l='333' u='c' c='_ZN5clang15VerifyPCHAction13ExecuteActionEv'/>
<def f='llvm/clang/lib/Serialization/ASTReader.cpp' l='11699' ll='11734' type='void clang::ASTReader::ASTReader(clang::Preprocessor &amp; PP, clang::InMemoryModuleCache &amp; ModuleCache, clang::ASTContext * Context, const clang::PCHContainerReader &amp; PCHContainerRdr, ArrayRef&lt;std::shared_ptr&lt;ModuleFileExtension&gt; &gt; Extensions, llvm::StringRef isysroot = &quot;&quot;, bool DisableValidation = false, bool AllowASTWithCompilerErrors = false, bool AllowConfigurationMismatch = false, bool ValidateSystemInputs = false, bool UseGlobalIndex = true, std::unique_ptr&lt;llvm::Timer&gt; ReadTimer = {})'/>
