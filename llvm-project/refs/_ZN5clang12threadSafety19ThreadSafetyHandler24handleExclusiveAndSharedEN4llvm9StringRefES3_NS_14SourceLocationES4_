<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='165' ll='167' type='void clang::threadSafety::ThreadSafetyHandler::handleExclusiveAndShared(llvm::StringRef Kind, Name LockName, clang::SourceLocation Loc1, clang::SourceLocation Loc2)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='2202' u='c' c='_ZN12_GLOBAL__N_120ThreadSafetyAnalyzer16intersectAndWarnERNS_7FactSetERKS1_N5clang14SourceLocationENS5_12threadSafety13LockErrorKindES8_b'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='157'>/// Warn when a mutex is held exclusively and shared at the same point. For
  /// example, if a mutex is locked exclusively during an if branch and shared
  /// during the else branch.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param LockName -- A StringRef name for the lock expression, to be printed
  /// in the error message.
  /// \param Loc1 -- The location of the first lock expression.
  /// \param Loc2 -- The location of the second lock expression.</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1740' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter24handleExclusiveAndSharedEN4llvm9StringRefES4_NS_14SourceLocationES5_'/>
