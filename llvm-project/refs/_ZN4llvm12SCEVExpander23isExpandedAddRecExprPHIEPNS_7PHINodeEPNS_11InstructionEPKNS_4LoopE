<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='384' type='bool llvm::SCEVExpander::isExpandedAddRecExprPHI(llvm::PHINode * PN, llvm::Instruction * IncV, const llvm::Loop * L)'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='1039' ll='1048' type='bool llvm::SCEVExpander::isExpandedAddRecExprPHI(llvm::PHINode * PN, llvm::Instruction * IncV, const llvm::Loop * L)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='1205' u='c' c='_ZN4llvm12SCEVExpander25getAddRecExprPHILiterallyEPKNS_14SCEVAddRecExprEPKNS_4LoopEPNS_4TypeES8_RS8_Rb'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2019' u='c' c='_ZN4llvm12SCEVExpander19replaceCongruentIVsEPNS_4LoopEPKNS_13DominatorTreeERNS_15SmallVectorImplINS_14WeakTrackingVHEEEPKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2021' u='c' c='_ZN4llvm12SCEVExpander19replaceCongruentIVsEPNS_4LoopEPKNS_13DominatorTreeERNS_15SmallVectorImplINS_14WeakTrackingVHEEEPKNS_19TargetTransformInfoE'/>
<doc f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='1034'>/// Determine if this cyclic phi is in a form that would have been generated by
/// LSR. We don&apos;t care if the phi was actually expanded in this pass, as long
/// as it is in a low-cost form, for example, no implied multiplication. This
/// should match any patterns generated by getAddRecExprPHILiterally and
/// expandAddtoGEP.</doc>
