<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2690' type='void clang::Parser::ParseParameterDeclarationClause(clang::Declarator &amp; D, clang::ParsedAttributes &amp; attrs, SmallVectorImpl&lt;DeclaratorChunk::ParamInfo&gt; &amp; ParamInfo, clang::SourceLocation &amp; EllipsisLoc)'/>
<use f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6233' u='c' c='_ZN5clang6Parser23ParseFunctionDeclaratorERNS_10DeclaratorERNS_16ParsedAttributesERNS_24BalancedDelimiterTrackerEbb'/>
<def f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6513' ll='6676' type='void clang::Parser::ParseParameterDeclarationClause(clang::Declarator &amp; D, clang::ParsedAttributes &amp; FirstArgAttrs, SmallVectorImpl&lt;DeclaratorChunk::ParamInfo&gt; &amp; ParamInfo, clang::SourceLocation &amp; EllipsisLoc)'/>
<doc f='llvm/clang/lib/Parse/ParseDecl.cpp' l='6482'>/// ParseParameterDeclarationClause - Parse a (possibly empty) parameter-list
/// after the opening parenthesis. This function will not parse a K&amp;R-style
/// identifier list.
///
/// D is the declarator being parsed.  If FirstArgAttrs is non-null, then the
/// caller parsed those arguments immediately after the open paren - they should
/// be considered to be part of the first parameter.
///
/// After returning, ParamInfo will hold the parsed parameters. EllipsisLoc will
/// be the location of the ellipsis, if any was parsed.
///
///       parameter-type-list: [C99 6.7.5]
///         parameter-list
///         parameter-list &apos;,&apos; &apos;...&apos;
/// [C++]   parameter-list &apos;...&apos;
///
///       parameter-list: [C99 6.7.5]
///         parameter-declaration
///         parameter-list &apos;,&apos; parameter-declaration
///
///       parameter-declaration: [C99 6.7.5]
///         declaration-specifiers declarator
/// [C++]   declaration-specifiers declarator &apos;=&apos; assignment-expression
/// [C++11]                                       initializer-clause
/// [GNU]   declaration-specifiers declarator attributes
///         declaration-specifiers abstract-declarator[opt]
/// [C++]   declaration-specifiers abstract-declarator[opt]
///           &apos;=&apos; assignment-expression
/// [GNU]   declaration-specifiers abstract-declarator[opt] attributes
/// [C++11] attribute-specifier-seq parameter-declaration
///</doc>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1243' u='c' c='_ZN5clang6Parser36ParseLambdaExpressionAfterIntroducerERNS_16LambdaIntroducerE'/>
