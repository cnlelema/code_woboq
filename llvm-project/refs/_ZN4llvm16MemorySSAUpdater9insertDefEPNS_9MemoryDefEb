<dec f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='100' type='void llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef * Def, bool RenameUses = false)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemorySSAUpdater.h' l='83'>/// Insert a definition into the MemorySSA IR.  RenameUses will rename any use
  /// below the new def block (and any inserted phis).  RenameUses should be set
  /// to true if the definition may cause new aliases for loads below it.  This
  /// is not the case for hoisting or sinking or other forms of code *movement*.
  /// It *is* the case for straight code insertion.
  /// For example:
  /// store a
  /// if (foo) { }
  /// load a
  ///
  /// Moving the store into the if block, and calling insertDef, does not
  /// require RenameUses.
  /// However, changing it to:
  /// store a
  /// if (foo) { store b }
  /// load a
  /// Where a mayalias b, *does* require RenameUses be set to true.</doc>
<def f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='258' ll='386' type='void llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef * MD, bool RenameUses = false)'/>
<use f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='1034' u='c' c='_ZN4llvm16MemorySSAUpdater6moveToEPNS_14MemoryUseOrDefEPNS_10BasicBlockET_'/>
<doc f='llvm/llvm/lib/Analysis/MemorySSAUpdater.cpp' l='252'>// A brief description of the algorithm:
// First, we compute what should define the new def, using the SSA
// construction algorithm.
// Then, we update the defs below us (and any new phi nodes) in the graph to
// point to the correct new defs, to ensure we only have one variable, and no
// disconnected stores.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1377' u='c' c='_ZL27CloneInstructionInExitBlockRN4llvm11InstructionERNS_10BasicBlockERNS_7PHINodeEPKNS_8LoopInfoEPKNS_14LoopSafetyInfoEPNS_16MemorySSAUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LICM.cpp' l='1794' u='c' c='_ZN12_GLOBAL__N_112LoopPromoter34doExtraRewritesBeforeFinalDeletionEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='137' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='161' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='187' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='189' u='c' c='_ZN45MemorySSATest_CreateLoadsAndStoreUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='227' u='c' c='_ZN37MemorySSATest_CreateALoadUpdater_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/MemorySSATest.cpp' l='367' u='c' c='_ZN36MemorySSATest_MoveAStoreUpdater_Test8TestBodyEv'/>
