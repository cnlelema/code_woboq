<dec f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1362' type='bool clang::Preprocessor::LexHeaderName(clang::Token &amp; Result, bool AllowMacroExpansion = true)'/>
<doc f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1361'>/// Lex a token, forming a header-name token if possible.</doc>
<use f='llvm/clang/lib/Lex/PPDirectives.cpp' l='1644' u='c' c='_ZN5clang12Preprocessor22HandleIncludeDirectiveENS_14SourceLocationERNS_5TokenEPKNS_15DirectoryLookupEPKNS_9FileEntryE'/>
<use f='llvm/clang/lib/Lex/PPMacroExpansion.cpp' l='1160' u='c' c='_ZL24EvaluateHasIncludeCommonRN5clang5TokenEPNS_14IdentifierInfoERNS_12PreprocessorEPKNS_15DirectoryLookupEPKNS_9FileEntryE'/>
<use f='llvm/clang/lib/Lex/PPMacroExpansion.cpp' l='1176' u='c' c='_ZL24EvaluateHasIncludeCommonRN5clang5TokenEPNS_14IdentifierInfoERNS_12PreprocessorEPKNS_15DirectoryLookupEPKNS_9FileEntryE'/>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='476' u='c' c='_ZN5clang12Preprocessor22HandlePragmaDependencyERNS_5TokenE'/>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='659' u='c' c='_ZN5clang12Preprocessor24HandlePragmaIncludeAliasERNS_5TokenE'/>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='680' u='c' c='_ZN5clang12Preprocessor24HandlePragmaIncludeAliasERNS_5TokenE'/>
<def f='llvm/clang/lib/Lex/Preprocessor.cpp' l='969' ll='1055' type='bool clang::Preprocessor::LexHeaderName(clang::Token &amp; FilenameTok, bool AllowMacroExpansion = true)'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='1123' u='c' c='_ZN5clang12Preprocessor20LexAfterModuleImportERNS_5TokenE'/>
<doc f='llvm/clang/lib/Lex/Preprocessor.cpp' l='958'>/// Lex a header-name token (including one formed from header-name-tokens if
/// \p AllowConcatenation is \c true).
///
/// \param FilenameTok Filled in with the next token. On success, this will
///        be either a header_name token. On failure, it will be whatever other
///        token was found instead.
/// \param AllowMacroExpansion If \c true, allow the header name to be formed
///        by macro expansion (concatenating tokens as necessary if the first
///        token is a &apos;&lt;&apos;).
/// \return \c true if we reached EOD or EOF while looking for a &gt; token in
///         a concatenated header name and diagnosed it. \c false otherwise.</doc>
