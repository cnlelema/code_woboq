<dec f='llvm/clang/include/clang/Tooling/CompilationDatabase.h' l='182' type='static std::unique_ptr&lt;FixedCompilationDatabase&gt; clang::tooling::FixedCompilationDatabase::loadFromCommandLine(int &amp; Argc, const char *const * Argv, std::string &amp; ErrorMsg, llvm::Twine Directory = &quot;.&quot;)'/>
<doc f='llvm/clang/include/clang/Tooling/CompilationDatabase.h' l='155'>/// Creates a FixedCompilationDatabase from the arguments after &quot;--&quot;.
  ///
  /// Parses the given command line for &quot;--&quot;. If &quot;--&quot; is found, the rest of
  /// the arguments will make up the command line in the returned
  /// FixedCompilationDatabase.
  /// The arguments after &quot;--&quot; must not include positional parameters or the
  /// argv[0] of the tool. Those will be added by the FixedCompilationDatabase
  /// when a CompileCommand is requested. The argv[0] of the returned command
  /// line will be &quot;clang-tool&quot;.
  ///
  /// Returns NULL in case &quot;--&quot; is not found.
  ///
  /// The argument list is meant to be compatible with normal llvm command line
  /// parsing in main methods.
  /// int main(int argc, char **argv) {
  ///   std::unique_ptr&lt;FixedCompilationDatabase&gt; Compilations(
  ///     FixedCompilationDatabase::loadFromCommandLine(argc, argv));
  ///   cl::ParseCommandLineOptions(argc, argv);
  ///   ...
  /// }
  ///
  /// \param Argc The number of command line arguments - will be changed to
  /// the number of arguments before &quot;--&quot;, if &quot;--&quot; was found in the argument
  /// list.
  /// \param Argv Points to the command line arguments.
  /// \param ErrorMsg Contains error text if the function returns null pointer.
  /// \param Directory The base directory used in the FixedCompilationDatabase.</doc>
<use f='llvm/clang/lib/Tooling/CommonOptionsParser.cpp' l='111' u='c' c='_ZN5clang7tooling19CommonOptionsParser4initERiPPKcRN4llvm2cl14OptionCategoryENS7_18NumOccurrencesFlagES4_'/>
<def f='llvm/clang/lib/Tooling/CompilationDatabase.cpp' l='342' ll='360' type='static std::unique_ptr&lt;FixedCompilationDatabase&gt; clang::tooling::FixedCompilationDatabase::loadFromCommandLine(int &amp; Argc, const char *const * Argv, std::string &amp; ErrorMsg, llvm::Twine Directory = &quot;.&quot;)'/>
<use f='llvm/clang/tools/clang-diff/ClangDiff.cpp' l='446' u='c' c='main'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='511' u='c' c='_ZN5clang7tooling65ParseFixedCompilationDatabase_ReturnsNullOnEmptyArgumentList_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='522' u='c' c='_ZN5clang7tooling63ParseFixedCompilationDatabase_ReturnsNullWithoutDoubleDash_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='535' u='c' c='_ZN5clang7tooling66ParseFixedCompilationDatabase_ReturnsArgumentsAfterDoubleDash_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='552' u='c' c='_ZN5clang7tooling58ParseFixedCompilationDatabase_ReturnsEmptyCommandLine_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='569' u='c' c='_ZN5clang7tooling56ParseFixedCompilationDatabase_HandlesPositionalArgs_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='588' u='c' c='_ZN5clang7tooling66ParseFixedCompilationDatabase_HandlesPositionalArgsSyntaxOnly_Test8TestBodyEv'/>
<use f='llvm/clang/unittests/Tooling/CompilationDatabaseTest.cpp' l='604' u='c' c='_ZN5clang7tooling47ParseFixedCompilationDatabase_HandlesArgv0_Test8TestBodyEv'/>
