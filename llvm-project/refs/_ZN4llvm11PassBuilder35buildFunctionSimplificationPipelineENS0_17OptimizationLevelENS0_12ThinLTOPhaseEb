<dec f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='289' type='FunctionPassManager llvm::PassBuilder::buildFunctionSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::PassBuilder::ThinLTOPhase Phase, bool DebugLogging = false)'/>
<doc f='llvm/llvm/include/llvm/Passes/PassBuilder.h' l='274'>/// Construct the core LLVM function canonicalization and simplification
  /// pipeline.
  ///
  /// This is a long pipeline and uses most of the per-function optimization
  /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run
  /// repeatedly over the IR and is not expected to destroy important
  /// information about the semantics of the IR.
  ///
  /// Note that \p Level cannot be `O0` here. The pipelines produced are
  /// only intended for use when attempting to optimize code. If frontends
  /// require some transformations for semantic reasons, they should explicitly
  /// build them.
  ///
  /// \p Phase indicates the current ThinLTO phase.</doc>
<def f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='380' ll='535' type='FunctionPassManager llvm::PassBuilder::buildFunctionSimplificationPipeline(llvm::PassBuilder::OptimizationLevel Level, llvm::PassBuilder::ThinLTOPhase Phase, bool DebugLogging = false)'/>
<use f='llvm/llvm/lib/Passes/PassBuilder.cpp' l='778' u='c' c='_ZN4llvm11PassBuilder33buildModuleSimplificationPipelineENS0_17OptimizationLevelENS0_12ThinLTOPhaseEb'/>
