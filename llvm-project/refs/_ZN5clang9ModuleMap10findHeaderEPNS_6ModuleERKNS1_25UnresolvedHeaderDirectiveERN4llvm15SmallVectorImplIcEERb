<dec f='llvm/clang/include/clang/Lex/ModuleMap.h' l='326' type='const clang::FileEntry * clang::ModuleMap::findHeader(clang::Module * M, const Module::UnresolvedHeaderDirective &amp; Header, SmallVectorImpl&lt;char&gt; &amp; RelativePathName, bool &amp; NeedsFramework)'/>
<doc f='llvm/clang/include/clang/Lex/ModuleMap.h' l='317'>/// Look up the given header directive to find an actual header file.
  ///
  /// \param M The module in which we&apos;re resolving the header directive.
  /// \param Header The header directive to resolve.
  /// \param RelativePathName Filled in with the relative path name from the
  ///        module to the resolved header.
  /// \param NeedsFramework If M is not a framework but a missing header would
  ///        be found in case M was, set it to true. False otherwise.
  /// \return The resolved file, if any.</doc>
<def f='llvm/clang/lib/Lex/ModuleMap.cpp' l='174' ll='248' type='const clang::FileEntry * clang::ModuleMap::findHeader(clang::Module * M, const Module::UnresolvedHeaderDirective &amp; Header, SmallVectorImpl&lt;char&gt; &amp; RelativePathName, bool &amp; NeedsFramework)'/>
<use f='llvm/clang/lib/Lex/ModuleMap.cpp' l='255' u='c' c='_ZN5clang9ModuleMap13resolveHeaderEPNS_6ModuleERKNS1_25UnresolvedHeaderDirectiveERb'/>
