<def f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h' l='152' ll='186' type='llvm::Function * llvm::TrivialModuleBuilder::insertAccumulateFunction(llvm::Module * M, llvm::Function * Helper = nullptr, llvm::StringRef Name = &quot;accumulate&quot;)'/>
<use f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h' l='196' u='c' c='_ZN4llvm20TrivialModuleBuilder30createCrossModuleRecursiveCaseERSt10unique_ptrINS_6ModuleESt14default_deleteIS2_EERPNS_8FunctionES6_S9_S9_'/>
<use f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h' l='203' u='c' c='_ZN4llvm20TrivialModuleBuilder30createCrossModuleRecursiveCaseERSt10unique_ptrINS_6ModuleESt14default_deleteIS2_EERPNS_8FunctionES6_S9_S9_'/>
<use f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h' l='209' u='c' c='_ZN4llvm20TrivialModuleBuilder30createCrossModuleRecursiveCaseERSt10unique_ptrINS_6ModuleESt14default_deleteIS2_EERPNS_8FunctionES6_S9_S9_'/>
<doc f='llvm/llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h' l='142'>// Inserts a function
  //   int32_t recursive_add(int32_t num) {
  //     if (num == 0) {
  //       return num;
  //     } else {
  //       int32_t recursive_param = num - 1;
  //       return num + Helper(recursive_param);
  //     }
  //   }
  // NOTE: if Helper is left as the default parameter, Helper == recursive_add.</doc>
