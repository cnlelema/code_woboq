<def f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='103' type='void clang::threadSafety::ThreadSafetyHandler::handleInvalidLockExp(llvm::StringRef Kind, clang::SourceLocation Loc)'/>
<use f='llvm/clang/lib/Analysis/ThreadSafety.cpp' l='78' u='c' c='_ZL15warnInvalidLockRN5clang12threadSafety19ThreadSafetyHandlerEPKNS_4ExprEPKNS_9NamedDeclES5_N4llvm9StringRefE'/>
<doc f='llvm/clang/include/clang/Analysis/Analyses/ThreadSafety.h' l='100'>/// Warn about lock expressions which fail to resolve to lockable objects.
  /// \param Kind -- the capability&apos;s name parameter (role, mutex, etc).
  /// \param Loc -- the SourceLocation of the unresolved expression.</doc>
<ovr f='llvm/clang/lib/Sema/AnalysisBasedWarnings.cpp' l='1674' c='_ZN5clang12threadSafety12_GLOBAL__N_120ThreadSafetyReporter20handleInvalidLockExpEN4llvm9StringRefENS_14SourceLocationE'/>
