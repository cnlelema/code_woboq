<dec f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.h' l='60' type='bool llvm::PPCFrameLowering::findScratchRegister(llvm::MachineBasicBlock * MBB, bool UseAtEnd, bool TwoUniqueRegsRequired = false, unsigned int * SR1 = nullptr, unsigned int * SR2 = nullptr) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.h' l='30'>/**
   * Find register[s] that can be used in function prologue and epilogue
   *
   * Find register[s] that can be use as scratch register[s] in function
   * prologue and epilogue to save various registers (Link Register, Base
   * Pointer, etc.). Prefer R0/R12, if available. Otherwise choose whatever
   * register[s] are available.
   *
   * This method will return true if it is able to find enough unique scratch
   * registers (1 or 2 depending on the requirement). If it is unable to find
   * enough available registers in the block, it will return false and set
   * any passed output parameter that corresponds to a required unique register
   * to PPC::NoRegister.
   *
   * \param[in] MBB The machine basic block to find an available register for
   * \param[in] UseAtEnd Specify whether the scratch register will be used at
   *                     the end of the basic block (i.e., will the scratch
   *                     register kill a register defined in the basic block)
   * \param[in] TwoUniqueRegsRequired Specify whether this basic block will
   *                                  require two unique scratch registers.
   * \param[out] SR1 The scratch register to use
   * \param[out] SR2 The second scratch register. If this pointer is not null
   *                 the function will attempt to set it to an available
   *                 register regardless of whether there is a hard requirement
   *                 for two unique scratch registers.
   * \return true if the required number of registers was found.
   *         false if the required number of scratch register weren&apos;t available.
   *         If either output parameter refers to a required scratch register
   *         that isn&apos;t available, it will be set to an invalid value.
   */</doc>
<def f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='602' ll='686' type='bool llvm::PPCFrameLowering::findScratchRegister(llvm::MachineBasicBlock * MBB, bool UseAtEnd, bool TwoUniqueRegsRequired = false, unsigned int * SR1 = nullptr, unsigned int * SR2 = nullptr) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='711' u='c' c='_ZNK4llvm16PPCFrameLowering16canUseAsPrologueERKNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='718' u='c' c='_ZNK4llvm16PPCFrameLowering16canUseAsEpilogueERKNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='853' u='c' c='_ZNK4llvm16PPCFrameLowering12emitPrologueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='1397' u='c' c='_ZNK4llvm16PPCFrameLowering12emitEpilogueERNS_15MachineFunctionERNS_17MachineBasicBlockE'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp' l='586'>/*  This function will do the following:
    - If MBB is an entry or exit block, set SR1 and SR2 to R0 and R12
      respectively (defaults recommended by the ABI) and return true
    - If MBB is not an entry block, initialize the register scavenger and look
      for available registers.
    - If the defaults (R0/R12) are available, return true
    - If TwoUniqueRegsRequired is set to true, it looks for two unique
      registers. Otherwise, look for a single available register.
      - If the required registers are found, set SR1 and SR2 and return true.
      - If the required registers are not found, set SR2 or both SR1 and SR2 to
        PPC::NoRegister and return false.

    Note that if both SR1 and SR2 are valid parameters and TwoUniqueRegsRequired
    is not set, this function will attempt to find two different registers, but
    still return true if only one register is available (and set SR1 == SR2).
*/</doc>
