<dec f='llvm/llvm/include/llvm/CodeGen/TailDuplicator.h' l='111' type='bool llvm::TailDuplicator::tailDuplicate(bool IsSimple, llvm::MachineBasicBlock * TailBB, llvm::MachineBasicBlock * ForcedLayoutPred, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; &amp; TDBBs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; Copies)'/>
<use f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='162' u='c' c='_ZN4llvm14TailDuplicator22tailDuplicateAndUpdateEbPNS_17MachineBasicBlockES2_PNS_15SmallVectorImplIS2_EEPNS_12function_refIFvS2_EEE'/>
<def f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='797' ll='974' type='bool llvm::TailDuplicator::tailDuplicate(bool IsSimple, llvm::MachineBasicBlock * TailBB, llvm::MachineBasicBlock * ForcedLayoutPred, SmallVectorImpl&lt;llvm::MachineBasicBlock *&gt; &amp; TDBBs, SmallVectorImpl&lt;llvm::MachineInstr *&gt; &amp; Copies)'/>
<doc f='llvm/llvm/lib/CodeGen/TailDuplicator.cpp' l='787'>/// If it is profitable, duplicate TailBB&apos;s contents in each
/// of its predecessors.
/// \p IsSimple result of isSimpleBB
/// \p TailBB   Block to be duplicated.
/// \p ForcedLayoutPred  When non-null, use this block as the layout predecessor
///                      instead of the previous block in MF&apos;s order.
/// \p TDBBs             A vector to keep track of all blocks tail-duplicated
///                      into.
/// \p Copies            A vector of copy instructions inserted. Used later to
///                      walk all the inserted copies and remove redundant ones.</doc>
