<def f='llvm/llvm/include/llvm/Support/Compiler.h' l='541' ll='548' type='void * llvm::allocate_buffer(size_t Size, size_t Alignment)'/>
<use f='llvm/llvm/include/llvm/ADT/FunctionExtras.h' l='243' u='c' c='_ZN4llvm15unique_functionIFT_DpT0_EEC1ET_'/>
<doc f='llvm/llvm/include/llvm/Support/Compiler.h' l='532'>/// Allocate a buffer of memory with the given size and alignment.
///
/// When the compiler supports aligned operator new, this will use it to to
/// handle even over-aligned allocations.
///
/// However, this doesn&apos;t make any attempt to leverage the fancier techniques
/// like posix_memalign due to portability. It is mostly intended to allow
/// compatibility with platforms that, after aligned allocation was added, use
/// reduced default alignment.</doc>
