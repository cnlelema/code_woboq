<dec f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='81' type='PointerIntPair&lt;llvm::MCFragment *, 1&gt;'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='159' u='m' c='_ZN4llvm8MCSymbolC1ENS0_10SymbolKindEPKNS_14StringMapEntryIbEEb'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='190' u='m' c='_ZN4llvm8MCSymbol15getNameEntryPtrEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='204' u='m' c='_ZNK4llvm8MCSymbol7getNameEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='275' u='m' c='_ZNK4llvm8MCSymbol11setFragmentEPNS_10MCFragmentE'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='279' u='m' c='_ZN4llvm8MCSymbol12setUndefinedEv'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='387' u='m' c='_ZNK4llvm8MCSymbol11getFragmentEb'/>
<use f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='391' u='m' c='_ZNK4llvm8MCSymbol11getFragmentEb'/>
<offset>0</offset>
<doc f='llvm/llvm/include/llvm/MC/MCSymbol.h' l='66'>/// If a symbol has a Fragment, the section is implied, so we only need
  /// one pointer.
  /// The special AbsolutePseudoFragment value is for absolute symbols.
  /// If this is a variable symbol, this caches the variable value&apos;s fragment.
  /// FIXME: We might be able to simplify this by having the asm streamer create
  /// dummy fragments.
  /// If this is a section, then it gives the symbol is defined in. This is null
  /// for undefined symbols.
  ///
  /// If this is a fragment, then it gives the fragment this symbol&apos;s value is
  /// relative to, if any.
  ///
  /// For the &apos;HasName&apos; integer, this is true if this symbol is named.
  /// A named symbol will have a pointer to the name allocated in the bytes
  /// immediately prior to the MCSymbol.</doc>
