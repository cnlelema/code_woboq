<dec f='llvm/llvm/include/llvm/Option/OptTable.h' l='212' type='llvm::opt::InputArgList llvm::opt::OptTable::ParseArgs(ArrayRef&lt;const char *&gt; Args, unsigned int &amp; MissingArgIndex, unsigned int &amp; MissingArgCount, unsigned int FlagsToInclude = 0, unsigned int FlagsToExclude = 0) const'/>
<doc f='llvm/llvm/include/llvm/Option/OptTable.h' l='194'>/// Parse an list of arguments into an InputArgList.
  ///
  /// The resulting InputArgList will reference the strings in [\p ArgBegin,
  /// \p ArgEnd), and their lifetime should extend past that of the returned
  /// InputArgList.
  ///
  /// The only error that can occur in this routine is if an argument is
  /// missing values; in this case \p MissingArgCount will be non-zero.
  ///
  /// \param MissingArgIndex - On error, the index of the option which could
  /// not be parsed.
  /// \param MissingArgCount - On error, the number of missing options.
  /// \param FlagsToInclude - Only parse options with any of these flags.
  /// Zero is the default which includes all flags.
  /// \param FlagsToExclude - Don&apos;t parse options with this flag.  Zero
  /// is the default and means exclude nothing.
  /// \return An InputArgList; on error this will contain all the options
  /// which could be parsed.</doc>
<use f='llvm/clang/lib/Driver/Driver.cpp' l='200' u='c' c='_ZN5clang6driver6Driver15ParseArgStringsEN4llvm8ArrayRefIPKcEEbRb'/>
<use f='llvm/clang/lib/Tooling/Tooling.cpp' l='294' u='c' c='_ZN5clang7tooling14ToolInvocation3runEv'/>
<use f='llvm/lld/ELF/DriverUtils.cpp' l='123' u='c' c='_ZN3lld3elf11ELFOptTable5parseEN4llvm8ArrayRefIPKcEE'/>
<use f='llvm/lld/ELF/DriverUtils.cpp' l='129' u='c' c='_ZN3lld3elf11ELFOptTable5parseEN4llvm8ArrayRefIPKcEE'/>
<use f='llvm/lld/MinGW/Driver.cpp' l='103' u='c' c='_ZN12_GLOBAL__N_113MinGWOptTable5parseEN4llvm8ArrayRefIPKcEE'/>
<use f='llvm/lld/lib/Driver/DarwinLdDriver.cpp' l='323' u='c' c='_ZN3lld6mach_o5parseEN4llvm8ArrayRefIPKcEERNS_19MachOLinkingContextE'/>
<use f='llvm/lld/wasm/Driver.cpp' l='169' u='c' c='_ZN12_GLOBAL__N_112WasmOptTable5parseEN4llvm8ArrayRefIPKcEE'/>
<def f='llvm/llvm/lib/Option/OptTable.cpp' l='392' ll='433' type='llvm::opt::InputArgList llvm::opt::OptTable::ParseArgs(ArrayRef&lt;const char *&gt; ArgArr, unsigned int &amp; MissingArgIndex, unsigned int &amp; MissingArgCount, unsigned int FlagsToInclude = 0, unsigned int FlagsToExclude = 0) const'/>
<use f='llvm/llvm/lib/ToolDrivers/llvm-dlltool/DlltoolDriver.cpp' l='89' u='c' c='_ZN4llvm17dlltoolDriverMainENS_8ArrayRefIPKcEE'/>
<use f='llvm/llvm/lib/ToolDrivers/llvm-lib/LibDriver.cpp' l='157' u='c' c='_ZN4llvm13libDriverMainENS_8ArrayRefIPKcEE'/>
<use f='llvm/llvm/tools/llvm-cvtres/llvm-cvtres.cpp' l='111' u='c' c='main'/>
<use f='llvm/llvm/tools/llvm-lipo/llvm-lipo.cpp' l='96' u='c' c='_ZL16parseLipoOptionsN4llvm8ArrayRefIPKcEE'/>
<use f='llvm/llvm/tools/llvm-mt/llvm-mt.cpp' l='94' u='c' c='main'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='70' u='c' c='_ZN25Option_OptionParsing_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='119' u='c' c='_ZN35Option_ParseWithFlagExclusions_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='127' u='c' c='_ZN35Option_ParseWithFlagExclusions_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='135' u='c' c='_ZN35Option_ParseWithFlagExclusions_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='147' u='c' c='_ZN29Option_ParseAliasInGroup_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='156' u='c' c='_ZN21Option_AliasArgs_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='167' u='c' c='_ZN22Option_IgnoreCase_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='177' u='c' c='_ZN27Option_DoNotIgnoreCase_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='187' u='c' c='_ZN22Option_SlurpEmpty_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='198' u='c' c='_ZN17Option_Slurp_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='214' u='c' c='_ZN28Option_SlurpJoinedEmpty_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='225' u='c' c='_ZN32Option_SlurpJoinedOneJoined_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='237' u='c' c='_ZN34Option_SlurpJoinedAndSeparate_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='251' u='c' c='_ZN34Option_SlurpJoinedButSeparate_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Option/OptionParsingTest.cpp' l='266' u='c' c='_ZN29Option_FlagAliasToJoined_Test8TestBodyEv'/>
