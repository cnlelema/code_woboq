<dec f='llvm/llvm/include/llvm/Linker/IRMover.h' l='75' type='llvm::Error llvm::IRMover::move(std::unique_ptr&lt;Module&gt; Src, ArrayRef&lt;llvm::GlobalValue *&gt; ValuesToLink, std::function&lt;void (GlobalValue &amp;, ValueAdder)&gt; AddLazyFor, bool IsPerformingImport)'/>
<doc f='llvm/llvm/include/llvm/Linker/IRMover.h' l='66'>/// Move in the provide values in \p ValuesToLink from \p Src.
  ///
  /// - \p AddLazyFor is a call back that the IRMover will call when a global
  ///   value is referenced by one of the ValuesToLink (transitively) but was
  ///   not present in ValuesToLink. The GlobalValue and a ValueAdder callback
  ///   are passed as an argument, and the callback is expected to be called
  ///   if the GlobalValue needs to be added to the \p ValuesToLink and linked.
  /// - \p IsPerformingImport is true when this IR link is to perform ThinLTO
  ///   function importing from Src.</doc>
<use f='llvm/llvm/lib/LTO/LTO.cpp' l='788' u='c' c='_ZN4llvm3lto3LTO14linkRegularLTOENS1_15RegularLTOState11AddedModuleEb'/>
<def f='llvm/llvm/lib/Linker/IRMover.cpp' l='1533' ll='1543' type='llvm::Error llvm::IRMover::move(std::unique_ptr&lt;Module&gt; Src, ArrayRef&lt;llvm::GlobalValue *&gt; ValuesToLink, std::function&lt;void (GlobalValue &amp;, ValueAdder)&gt; AddLazyFor, bool IsPerformingImport)'/>
<use f='llvm/llvm/lib/Linker/LinkModules.cpp' l='552' u='c' c='_ZN12_GLOBAL__N_112ModuleLinker3runEv'/>
<use f='llvm/llvm/lib/Transforms/IPO/FunctionImport.cpp' l='1191' u='c' c='_ZN4llvm16FunctionImporter15importFunctionsERNS_6ModuleERKNS_9StringMapISt13unordered_setImSt4hashImESt8equal_toImESaImEENS_15MallocAllocatorEEE'/>
