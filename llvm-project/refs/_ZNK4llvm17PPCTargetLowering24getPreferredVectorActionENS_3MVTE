<inh f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='327' c='_ZNK4llvm18TargetLoweringBase24getPreferredVectorActionENS_3MVTE'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='597' ll='602' type='TargetLoweringBase::LegalizeTypeAction llvm::PPCTargetLowering::getPreferredVectorAction(llvm::MVT VT) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='589'>/// getPreferredVectorAction - The code we generate when vector types are
    /// legalized by promoting the integer element type is often much worse
    /// than code we generate if we widen the type for applicable vector types.
    /// The issue with promoting is that the vector is scalaraized, individual
    /// elements promoted and then the vector is rebuilt. So say we load a pair
    /// of v4i8&apos;s and shuffle them. This will turn into a mess of 8 extending
    /// loads, moves back into VSR&apos;s (or memory ops if we don&apos;t have moves) and
    /// then the VPERM for the shuffle. All in all a very slow sequence.</doc>
