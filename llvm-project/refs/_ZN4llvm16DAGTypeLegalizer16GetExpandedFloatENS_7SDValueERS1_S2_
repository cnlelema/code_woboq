<dec f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='579' type='void llvm::DAGTypeLegalizer::GetExpandedFloat(llvm::SDValue Op, llvm::SDValue &amp; Lo, llvm::SDValue &amp; Hi)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='923' u='c' c='_ZN4llvm16DAGTypeLegalizer10GetSplitOpENS_7SDValueERS1_S2_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='950' u='c' c='_ZN4llvm16DAGTypeLegalizer13GetExpandedOpENS_7SDValueERS1_S2_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1197' u='c' c='_ZN4llvm16DAGTypeLegalizer19ExpandFloatRes_FABSEPNS_6SDNodeERNS_7SDValueES4_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1384' u='c' c='_ZN4llvm16DAGTypeLegalizer19ExpandFloatRes_FNEGEPNS_6SDNodeERNS_7SDValueES4_'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1665' u='c' c='_ZN4llvm16DAGTypeLegalizer24FloatExpandSetCCOperandsERNS_7SDValueES2_RNS_3ISD8CondCodeERKNS_5SDLocE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1666' u='c' c='_ZN4llvm16DAGTypeLegalizer24FloatExpandSetCCOperandsERNS_7SDValueES2_RNS_3ISD8CondCodeERKNS_5SDLocE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1712' u='c' c='_ZN4llvm16DAGTypeLegalizer23ExpandFloatOp_FCOPYSIGNEPNS_6SDNodeE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp' l='1723' u='c' c='_ZN4llvm16DAGTypeLegalizer22ExpandFloatOp_FP_ROUNDEPNS_6SDNodeE'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='569'>//===--------------------------------------------------------------------===//
  // Float Expansion Support: LegalizeFloatTypes.cpp
  //===--------------------------------------------------------------------===//

  /// Given a processed operand Op which was expanded into two floating-point
  /// values of half the size, this returns the two halves.
  /// The low bits of Op are exactly equal to the bits of Lo; the high bits
  /// exactly equal Hi.  For example, if Op is a ppcf128 which was expanded
  /// into two f64&apos;s, then this method returns the two f64&apos;s, with Lo being
  /// equal to the lower 64 bits of Op, and Hi to the upper 64 bits.</doc>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='797' ll='803' type='void llvm::DAGTypeLegalizer::GetExpandedFloat(llvm::SDValue Op, llvm::SDValue &amp; Lo, llvm::SDValue &amp; Hi)'/>
