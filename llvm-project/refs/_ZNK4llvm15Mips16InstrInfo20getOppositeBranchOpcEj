<dec f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.h' l='71' type='unsigned int llvm::Mips16InstrInfo::getOppositeBranchOpc(unsigned int Opc) const'/>
<inh f='llvm/llvm/lib/Target/Mips/MipsInstrInfo.h' l='107' c='_ZNK4llvm13MipsInstrInfo20getOppositeBranchOpcEj'/>
<def f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.cpp' l='163' ll='187' type='unsigned int llvm::Mips16InstrInfo::getOppositeBranchOpc(unsigned int Opc) const'/>
<doc f='llvm/llvm/lib/Target/Mips/Mips16InstrInfo.cpp' l='161'>/// GetOppositeBranchOpc - Return the inverse of the specified
/// opcode, e.g. turning BEQ to BNE.</doc>
<use f='llvm/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp' l='1583' u='c' c='_ZN12_GLOBAL__N_119MipsConstantIslands18fixupConditionalBrERNS0_9ImmBranchE'/>
