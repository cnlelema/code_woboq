<dec f='llvm/llvm/include/llvm/IR/Module.h' l='259' type='std::unique_ptr&lt;RandomNumberGenerator&gt; llvm::Module::createRNG(const llvm::Pass * P) const'/>
<doc f='llvm/llvm/include/llvm/IR/Module.h' l='250'>/// Get a RandomNumberGenerator salted for use with this module. The
  /// RNG can be seeded via -rng-seed=&lt;uint64&gt; and is salted with the
  /// ModuleID and the provided pass salt. The returned RNG should not
  /// be shared across threads or passes.
  ///
  /// A unique RNG per pass ensures a reproducible random stream even
  /// when other randomness consuming passes are added or removed. In
  /// addition, the random stream will be reproducible across LLVM
  /// versions when the pass does not change.</doc>
<def f='llvm/llvm/lib/IR/Module.cpp' l='92' ll='108' type='std::unique_ptr&lt;RandomNumberGenerator&gt; llvm::Module::createRNG(const llvm::Pass * P) const'/>
<use f='llvm/llvm/unittests/IR/ModuleTest.cpp' l='65' u='c' c='_ZN12_GLOBAL__N_137ModuleTest_randomNumberGenerator_Test8TestBodyEv'/>
