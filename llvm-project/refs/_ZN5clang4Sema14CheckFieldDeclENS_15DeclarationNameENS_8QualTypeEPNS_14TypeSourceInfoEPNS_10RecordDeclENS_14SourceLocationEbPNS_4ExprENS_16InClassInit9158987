<dec f='llvm/clang/include/clang/Sema/Sema.h' l='2383' type='clang::FieldDecl * clang::Sema::CheckFieldDecl(clang::DeclarationName Name, clang::QualType T, clang::TypeSourceInfo * TInfo, clang::RecordDecl * Record, clang::SourceLocation Loc, bool Mutable, clang::Expr * BitfieldWidth, clang::InClassInitStyle InitStyle, clang::SourceLocation TSSL, clang::AccessSpecifier AS, clang::NamedDecl * PrevDecl, clang::Declarator * D = nullptr)'/>
<use f='llvm/clang/lib/Sema/SemaDecl.cpp' l='15552' u='c' c='_ZN5clang4Sema11HandleFieldEPNS_5ScopeEPNS_10RecordDeclENS_14SourceLocationERNS_10DeclaratorEPNS_4ExprENS_16InClassInitStyleENS_15AccessSpecifierE'/>
<def f='llvm/clang/lib/Sema/SemaDecl.cpp' l='15582' ll='15781' type='clang::FieldDecl * clang::Sema::CheckFieldDecl(clang::DeclarationName Name, clang::QualType T, clang::TypeSourceInfo * TInfo, clang::RecordDecl * Record, clang::SourceLocation Loc, bool Mutable, clang::Expr * BitWidth, clang::InClassInitStyle InitStyle, clang::SourceLocation TSSL, clang::AccessSpecifier AS, clang::NamedDecl * PrevDecl, clang::Declarator * D = nullptr)'/>
<doc f='llvm/clang/lib/Sema/SemaDecl.cpp' l='15572'>/// Build a new FieldDecl and check its well-formedness.
///
/// This routine builds a new FieldDecl given the fields name, type,
/// record, etc. \p PrevDecl should refer to any previous declaration
/// with the same name and in the same scope as the field to be
/// created.
///
/// \returns a new FieldDecl.
///
/// \todo The Declarator argument is a hack. It will be removed once</doc>
