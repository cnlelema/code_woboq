<dec f='llvm/llvm/include/llvm/ADT/IntervalMap.h' l='613' type='unsigned int llvm::IntervalMapImpl::LeafNode::insertFrom(unsigned int &amp; Pos, unsigned int Size, KeyT a, KeyT b, ValT y)'/>
<def f='llvm/llvm/include/llvm/ADT/IntervalMap.h' l='625' ll='678' type='unsigned int llvm::IntervalMapImpl::LeafNode::insertFrom(unsigned int &amp; Pos, unsigned int Size, KeyT a, KeyT b, ValT y)'/>
<doc f='llvm/llvm/include/llvm/ADT/IntervalMap.h' l='616'>/// insertFrom - Add mapping of [a;b] to y if possible, coalescing as much as
/// possible. This may cause the node to grow by 1, or it may cause the node
/// to shrink because of coalescing.
/// @param Pos  Starting index = insertFrom(0, size, a)
/// @param Size Number of elements in node.
/// @param a    Interval start.
/// @param b    Interval stop.
/// @param y    Value be mapped.
/// @return     (insert position, new size), or (i, Capacity+1) on overflow.</doc>
