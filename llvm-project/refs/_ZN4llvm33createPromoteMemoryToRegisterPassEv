<dec f='llvm/llvm/include/llvm/Transforms/Utils.h' l='99' type='llvm::FunctionPass * llvm::createPromoteMemoryToRegisterPass()'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils.h' l='87'>//===----------------------------------------------------------------------===//
//
// PromoteMemoryToRegister - This pass is used to promote memory references to
// be register references. A simple example of the transformation performed by
// this pass is:
//
//        FROM CODE                           TO CODE
//   %X = alloca i32, i32 1                 ret i32 42
//   store i32 42, i32 *%X
//   %Y = load i32* %X
//   ret i32 %Y
//</doc>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='153' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='525' u='c' c='_ZN4llvm18PassManagerBuilder25populateModulePassManagerERNS_6legacy15PassManagerBaseE'/>
<use f='llvm/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp' l='852' u='c' c='_ZN4llvm18PassManagerBuilder24addLTOOptimizationPassesERNS_6legacy15PassManagerBaseE'/>
<def f='llvm/llvm/lib/Transforms/Utils/Mem2Reg.cpp' l='113' ll='115' type='llvm::FunctionPass * llvm::createPromoteMemoryToRegisterPass()'/>
<doc f='llvm/llvm/lib/Transforms/Utils/Mem2Reg.cpp' l='112'>// createPromoteMemoryToRegister - Provide an entry point to create this pass.</doc>
<use f='llvm/llvm/lib/Transforms/Utils/Utils.cpp' l='54' u='c' c='LLVMAddPromoteMemoryToRegisterPass'/>
