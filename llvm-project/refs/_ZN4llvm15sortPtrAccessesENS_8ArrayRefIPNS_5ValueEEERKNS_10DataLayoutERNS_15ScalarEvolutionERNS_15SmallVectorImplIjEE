<dec f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='707' type='bool llvm::sortPtrAccesses(ArrayRef&lt;llvm::Value *&gt; VL, const llvm::DataLayout &amp; DL, llvm::ScalarEvolution &amp; SE, SmallVectorImpl&lt;unsigned int&gt; &amp; SortedIndices)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopAccessAnalysis.h' l='697'>/// Attempt to sort the pointers in \p VL and return the sorted indices
/// in \p SortedIndices, if reordering is required.
///
/// Returns &apos;true&apos; if sorting is legal, otherwise returns &apos;false&apos;.
///
/// For example, for a given \p VL of memory accesses in program order, a[i+4],
/// a[i+0], a[i+1] and a[i+7], this function will sort the \p VL and save the
/// sorted indices in \p SortedIndices as a[i+0], a[i+1], a[i+4], a[i+7] and
/// saves the mask for actual memory accesses in program order in
/// \p SortedIndices as &lt;1,2,0,3&gt;</doc>
<def f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='1100' ll='1158' type='bool llvm::sortPtrAccesses(ArrayRef&lt;llvm::Value *&gt; VL, const llvm::DataLayout &amp; DL, llvm::ScalarEvolution &amp; SE, SmallVectorImpl&lt;unsigned int&gt; &amp; SortedIndices)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp' l='2272' u='c' c='_ZN4llvm13slpvectorizer7BoUpSLP13buildTree_recENS_8ArrayRefIPNS_5ValueEEEjRKNS1_8EdgeInfoE'/>
