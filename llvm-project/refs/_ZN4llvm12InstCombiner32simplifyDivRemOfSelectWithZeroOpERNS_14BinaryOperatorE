<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='327' type='bool llvm::InstCombiner::simplifyDivRemOfSelectWithZeroOp(llvm::BinaryOperator &amp; I)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='537' ll='602' type='bool llvm::InstCombiner::simplifyDivRemOfSelectWithZeroOp(llvm::BinaryOperator &amp; I)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='651' u='c' c='_ZN4llvm12InstCombiner20commonIDivTransformsERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='1262' u='c' c='_ZN4llvm12InstCombiner20commonIRemTransformsERNS_14BinaryOperatorE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp' l='534'>/// Fold a divide or remainder with a select instruction divisor when one of the
/// select operands is zero. In that case, we can use the other select operand
/// because div/rem by zero is undefined.</doc>
