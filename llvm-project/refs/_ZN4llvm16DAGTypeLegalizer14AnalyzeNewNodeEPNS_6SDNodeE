<dec f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h' l='208' type='llvm::SDNode * llvm::DAGTypeLegalizer::AnalyzeNewNode(llvm::SDNode * N)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='356' u='c' c='_ZN4llvm16DAGTypeLegalizer3runEv'/>
<def f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='492' ll='556' type='llvm::SDNode * llvm::DAGTypeLegalizer::AnalyzeNewNode(llvm::SDNode * N)'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='561' u='c' c='_ZN4llvm16DAGTypeLegalizer15AnalyzeNewValueERNS_7SDValueE'/>
<use f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='670' u='c' c='_ZN4llvm16DAGTypeLegalizer16ReplaceValueWithENS_7SDValueES1_'/>
<doc f='llvm/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp' l='488'>/// The specified node is the root of a subtree of potentially new nodes.
/// Correct any processed operands (this may change the node) and calculate the
/// NodeId. If the node itself changes to a processed node, it is not remapped -
/// the caller needs to take care of this. Returns the potentially changed node.</doc>
