<dec f='llvm/llvm/include/llvm/IR/Value.h' l='312' type='void llvm::Value::assertModuleIsMaterializedImpl() const'/>
<use f='llvm/llvm/include/llvm/IR/Value.h' l='318' u='c' c='_ZNK4llvm5Value26assertModuleIsMaterializedEv'/>
<doc f='llvm/llvm/include/llvm/IR/Value.h' l='302'>//----------------------------------------------------------------------
  // Methods for handling the chain of uses of this Value.
  //
  // Materializing a function can introduce new uses, so these methods come in
  // two variants:
  // The methods that start with materialized_ check the uses that are
  // currently known given which functions are materialized. Be very careful
  // when using them since you might not get all uses.
  // The methods that don&apos;t start with materialized_ assert that modules is
  // fully materialized.</doc>
<def f='llvm/llvm/lib/IR/Value.cpp' l='351' ll='361' type='void llvm::Value::assertModuleIsMaterializedImpl() const'/>
