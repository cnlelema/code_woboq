<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3660' u='w' c='_ZN5clang12ast_matchers8internal35matcher_containsDeclaration0MatcherC1ERKjRKNS1_7MatcherINS_4DeclEEE'/>
<dec f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3660' type='const unsigned int'/>
<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3663' u='r' c='_ZNK5clang12ast_matchers8internal35matcher_containsDeclaration0Matcher7matchesERKNS_8DeclStmtEPNS1_14ASTMatchFinderEPNS1_21BoundNodesTreeBuilderE'/>
<use f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3666' u='r' c='_ZNK5clang12ast_matchers8internal35matcher_containsDeclaration0Matcher7matchesERKNS_8DeclStmtEPNS1_14ASTMatchFinderEPNS1_21BoundNodesTreeBuilderE'/>
<offset>96</offset>
<doc f='llvm/clang/include/clang/ASTMatchers/ASTMatchers.h' l='3641'>/// Matches the n&apos;th declaration of a declaration statement.
///
/// Note that this does not work for global declarations because the AST
/// breaks up multiple-declaration DeclStmt&apos;s into multiple single-declaration
/// DeclStmt&apos;s.
/// Example: Given non-global declarations
/// \code
///   int a, b = 0;
///   int c;
///   int d = 2, e;
/// \endcode
/// declStmt(containsDeclaration(
///       0, varDecl(hasInitializer(anything()))))
///   matches only &apos;int d = 2, e;&apos;, and
/// declStmt(containsDeclaration(1, varDecl()))
/// \code
///   matches &apos;int a, b = 0&apos; as well as &apos;int d = 2, e;&apos;
///   but &apos;int c;&apos; is not matched.
/// \endcode</doc>
