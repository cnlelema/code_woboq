<dec f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='633' type='std::vector&lt;TypeSetByHwMode&gt;'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='667' u='m' c='_ZN4llvm15TreePatternNodeC1EPNS_6RecordESt6vectorISt10shared_ptrIS0_ESaIS5_EEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='673' u='m' c='_ZN4llvm15TreePatternNodeC1EPNS_4InitEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='695' u='m' c='_ZNK4llvm15TreePatternNode11getNumTypesEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='697' u='m' c='_ZNK4llvm15TreePatternNode7getTypeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='699' u='a' c='_ZNK4llvm15TreePatternNode11getExtTypesEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='701' u='m' c='_ZNK4llvm15TreePatternNode10getExtTypeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='703' u='m' c='_ZN4llvm15TreePatternNode10getExtTypeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='704' u='m' c='_ZN4llvm15TreePatternNode7setTypeEjRKNS_15TypeSetByHwModeE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='706' u='m' c='_ZNK4llvm15TreePatternNode13getSimpleTypeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='710' u='m' c='_ZNK4llvm15TreePatternNode15hasConcreteTypeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='713' u='m' c='_ZNK4llvm15TreePatternNode23isTypeCompletelyUnknownEjRNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='986' u='m' c='_ZN4llvm15TreePatternNode14UpdateNodeTypeEjRKNS_15TypeSetByHwModeERNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='994' u='m' c='_ZN4llvm15TreePatternNode14UpdateNodeTypeEjNS_3MVT15SimpleValueTypeERNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='1002' u='m' c='_ZN4llvm15TreePatternNode14UpdateNodeTypeEjNS_17ValueTypeByHwModeERNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1614' u='m' c='_ZNK4llvm15TreePatternNode22ContainsUnresolvedTypeERNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1615' u='m' c='_ZNK4llvm15TreePatternNode22ContainsUnresolvedTypeERNS_11TreePatternE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1624' c='_ZNK4llvm15TreePatternNode21hasProperTypeByHwModeEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1634' c='_ZNK4llvm15TreePatternNode15hasPossibleTypeEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1644' c='_ZN4llvm15TreePatternNode14setDefaultModeEj'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1784' u='m' c='_ZNK4llvm15TreePatternNode5printERNS_11raw_ostreamE'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1869' u='w' c='_ZNK4llvm15TreePatternNode5cloneEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1869' u='r' c='_ZNK4llvm15TreePatternNode5cloneEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1878' u='m' c='_ZN4llvm15TreePatternNode14RemoveAllTypesEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='1878' u='m' c='_ZN4llvm15TreePatternNode14RemoveAllTypesEv'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2304' u='m' c='_ZN4llvm15TreePatternNode20ApplyTypeConstraintsERNS_11TreePatternEb'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2312' u='m' c='_ZN4llvm15TreePatternNode20ApplyTypeConstraintsERNS_11TreePatternEb'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2315' u='m' c='_ZN4llvm15TreePatternNode20ApplyTypeConstraintsERNS_11TreePatternEb'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2317' u='m' c='_ZN4llvm15TreePatternNode20ApplyTypeConstraintsERNS_11TreePatternEb'/>
<use f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.cpp' l='2320' u='m' c='_ZN4llvm15TreePatternNode20ApplyTypeConstraintsERNS_11TreePatternEb'/>
<offset>0</offset>
<doc f='llvm/llvm/utils/TableGen/CodeGenDAGPatterns.h' l='630'>/// The type of each node result.  Before and during type inference, each
  /// result may be a set of possible types.  After (successful) type inference,
  /// each is a single concrete type.</doc>
