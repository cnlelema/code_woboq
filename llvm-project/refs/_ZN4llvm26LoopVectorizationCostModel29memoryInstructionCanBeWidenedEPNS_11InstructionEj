<dec f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1138' type='bool llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(llvm::Instruction * I, unsigned int VF = 1)'/>
<def f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='4436' ll='4462' type='bool llvm::LoopVectorizationCostModel::memoryInstructionCanBeWidened(llvm::Instruction * I, unsigned int VF = 1)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='5719' u='c' c='_ZN4llvm26LoopVectorizationCostModel28setCostBasedWideningDecisionEj'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp' l='1136'>/// Returns true if \p I is a memory instruction with consecutive memory
  /// access that can be widened.</doc>
