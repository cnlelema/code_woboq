<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2906' type='clang::OMPClause * clang::Parser::ParseOpenMPSingleExprWithArgClause(clang::OpenMPClauseKind Kind, bool ParseOnly)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='2899'>/// Parses clause with a single expression and an additional argument
  /// of a kind \a Kind.
  ///
  /// \param Kind Kind of current clause.
  /// \param ParseOnly true to skip the clause&apos;s semantic actions and return
  /// nullptr.
  ///</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1663' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseENS_19OpenMPDirectiveKindENS_16OpenMPClauseKindEb'/>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1888' ll='2019' type='clang::OMPClause * clang::Parser::ParseOpenMPSingleExprWithArgClause(clang::OpenMPClauseKind Kind, bool ParseOnly)'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1875'>/// Parsing of OpenMP clauses with single expressions and some additional
/// argument like &apos;schedule&apos; or &apos;dist_schedule&apos;.
///
///    schedule-clause:
///      &apos;schedule&apos; &apos;(&apos; [ modifier [ &apos;,&apos; modifier ] &apos;:&apos; ] kind [&apos;,&apos; expression ]
///      &apos;)&apos;
///
///    if-clause:
///      &apos;if&apos; &apos;(&apos; [ directive-name-modifier &apos;:&apos; ] expression &apos;)&apos;
///
///    defaultmap:
///      &apos;defaultmap&apos; &apos;(&apos; modifier &apos;:&apos; kind &apos;)&apos;
///</doc>
