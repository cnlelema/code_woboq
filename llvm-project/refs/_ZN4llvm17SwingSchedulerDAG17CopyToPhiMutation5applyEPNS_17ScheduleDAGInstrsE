<dec f='llvm/llvm/include/llvm/CodeGen/MachinePipeliner.h' l='193' type='void llvm::SwingSchedulerDAG::CopyToPhiMutation::apply(llvm::ScheduleDAGInstrs * DAG)'/>
<inh f='llvm/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h' l='28' c='_ZN4llvm19ScheduleDAGMutation5applyEPNS_17ScheduleDAGInstrsE'/>
<def f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='1246' ll='1305' type='void llvm::SwingSchedulerDAG::CopyToPhiMutation::apply(llvm::ScheduleDAGInstrs * DAG)'/>
<doc f='llvm/llvm/lib/CodeGen/MachinePipeliner.cpp' l='1228'>// Create artificial dependencies between the source of COPY/REG_SEQUENCE that
// is loop-carried to the USE in next iteration. This will help pipeliner avoid
// additional copies that are needed across iterations. An artificial dependence
// edge is added from USE to SOURCE of COPY/REG_SEQUENCE.

// PHI-------Anti-Dep-----&gt; COPY/REG_SEQUENCE (loop-carried)
// SRCOfCopY------True-Dep---&gt; COPY/REG_SEQUENCE
// PHI-------True-Dep------&gt; USEOfPhi

// The mutation creates
// USEOfPHI -------Artificial-Dep---&gt; SRCOfCopy

// This overall will ensure, the USEOfPHI is scheduled before SRCOfCopy
// (since USE is a predecessor), implies, the COPY/ REG_SEQUENCE is scheduled
// late  to avoid additional copies across iterations. The possible scheduling
// order would be
// USEOfPHI --- SRCOfCopy---  COPY/REG_SEQUENCE.</doc>
