<dec f='llvm/llvm/tools/dsymutil/DwarfLinker.h' l='421' type='void llvm::dsymutil::DwarfLinker::generateUnitRanges(llvm::dsymutil::CompileUnit &amp; Unit) const'/>
<def f='llvm/llvm/tools/dsymutil/DwarfLinker.cpp' l='1749' ll='1754' type='void llvm::dsymutil::DwarfLinker::generateUnitRanges(llvm::dsymutil::CompileUnit &amp; Unit) const'/>
<use f='llvm/llvm/tools/dsymutil/DwarfLinker.cpp' l='2410' u='c' c='_ZN4llvm8dsymutil11DwarfLinker9DIECloner20cloneAllCompileUnitsERNS_12DWARFContextERKNS0_14DebugMapObjectERSt3mapImNS0_19DebugMapObjectRangeESt4lessImE9221335'/>
<doc f='llvm/llvm/tools/dsymutil/DwarfLinker.cpp' l='1743'>/// Generate the debug_aranges entries for \p Unit and if the
/// unit has a DW_AT_ranges attribute, also emit the debug_ranges
/// contribution for this attribute.
/// FIXME: this could actually be done right in patchRangesForUnit,
/// but for the sake of initial bit-for-bit compatibility with legacy
/// dsymutil, we have to do it in a delayed pass.</doc>
<doc f='llvm/llvm/tools/dsymutil/DwarfLinker.h' l='419'>/// Generate and emit the DW_AT_ranges attribute for a compile_unit if it had
  /// one.</doc>
