<dec f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='148' type='bool clang::CodeGen::CodeGenTypes::isFuncTypeConvertible(const clang::FunctionType * FT)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenTypes.h' l='145'>/// isFuncTypeConvertible - Utility to check whether a function type can
  /// be converted to an LLVM type (i.e. doesn&apos;t depend on an incomplete tag
  /// type).</doc>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='1735' u='c' c='_ZN5clang7CodeGen12CodeGenTypes24GetFunctionTypeForVTableENS_10GlobalDeclE'/>
<def f='llvm/clang/lib/CodeGen/CodeGenTypes.cpp' l='228' ll='238' type='bool clang::CodeGen::CodeGenTypes::isFuncTypeConvertible(const clang::FunctionType * FT)'/>
<use f='llvm/clang/lib/CodeGen/CodeGenTypes.cpp' l='318' u='c' c='_ZN5clang7CodeGen12CodeGenTypes27ConvertFunctionTypeInternalENS_8QualTypeE'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenTypes.cpp' l='223'>/// Code to verify a given function type is complete, i.e. the return type
/// and all of the parameter types are complete.  Also check to see if we are in
/// a RS_StructPointer context, and if so whether any struct types have been
/// pended.  If so, we don&apos;t want to ask the ABI lowering code to handle a type
/// that cannot be converted to an IR type.</doc>
<use f='llvm/clang/lib/CodeGen/ItaniumCXXABI.cpp' l='973' u='c' c='_ZN12_GLOBAL__N_113ItaniumCXXABI18BuildMemberPointerEPKN5clang13CXXMethodDeclENS1_9CharUnitsEPNS1_7CodeGen15CodeGenFunctionE'/>
<use f='llvm/clang/lib/CodeGen/MicrosoftCXXABI.cpp' l='2798' u='c' c='_ZN12_GLOBAL__N_115MicrosoftCXXABI31EmitMemberFunctionPointerGlobalEPKN5clang13CXXMethodDeclE'/>
