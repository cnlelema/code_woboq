<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='83' ll='93' type='unsigned int llvm::getComplexity(llvm::Value * V)'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='66'>/// Assign a complexity or rank value to LLVM Values. This is used to reduce
/// the amount of pattern matching needed for compares and commutative
/// instructions. For example, if we have:
///   icmp ugt X, Constant
/// or
///   xor (add X, Constant), cast Z
///
/// We do not have to consider the commuted variants of these patterns because
/// canonicalization based on complexity guarantees the above ordering.
///
/// This routine maps IR values to various complexity ranks:
///   0 -&gt; undef
///   1 -&gt; Constants
///   2 -&gt; Other non-instructions
///   3 -&gt; Arguments
///   4 -&gt; Cast and (f)neg/not instructions
///   5 -&gt; Other instructions</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='4902' u='c' c='_ZN4llvm12InstCombiner13visitICmpInstERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='4903' u='c' c='_ZN4llvm12InstCombiner13visitICmpInstERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5485' u='c' c='_ZN4llvm12InstCombiner13visitFCmpInstERNS_8FCmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5485' u='c' c='_ZN4llvm12InstCombiner13visitFCmpInstERNS_8FCmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='311' u='c' c='_ZN4llvm12InstCombiner32SimplifyAssociativeOrCommutativeERNS_14BinaryOperatorE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='312' u='c' c='_ZN4llvm12InstCombiner32SimplifyAssociativeOrCommutativeERNS_14BinaryOperatorE'/>
