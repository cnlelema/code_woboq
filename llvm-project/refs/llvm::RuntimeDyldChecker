<def f='llvm/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h' l='74' ll='180'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/RuntimeDyldChecker.h' l='32'>/// RuntimeDyld invariant checker for verifying that RuntimeDyld has
///        correctly applied relocations.
///
/// The RuntimeDyldChecker class evaluates expressions against an attached
/// RuntimeDyld instance to verify that relocations have been applied
/// correctly.
///
/// The expression language supports basic pointer arithmetic and bit-masking,
/// and has limited disassembler integration for accessing instruction
/// operands and the next PC (program counter) address for each instruction.
///
/// The language syntax is:
///
/// check = expr &apos;=&apos; expr
///
/// expr = binary_expr
///      | sliceable_expr
///
/// sliceable_expr = &apos;*{&apos; number &apos;}&apos; load_addr_expr [slice]
///                | &apos;(&apos; expr &apos;)&apos; [slice]
///                | ident_expr [slice]
///                | number [slice]
///
/// slice = &apos;[&apos; high-bit-index &apos;:&apos; low-bit-index &apos;]&apos;
///
/// load_addr_expr = symbol
///                | &apos;(&apos; symbol &apos;+&apos; number &apos;)&apos;
///                | &apos;(&apos; symbol &apos;-&apos; number &apos;)&apos;
///
/// ident_expr = &apos;decode_operand&apos; &apos;(&apos; symbol &apos;,&apos; operand-index &apos;)&apos;
///            | &apos;next_pc&apos;        &apos;(&apos; symbol &apos;)&apos;
///            | &apos;stub_addr&apos; &apos;(&apos; stub-container-name &apos;,&apos; symbol &apos;)&apos;
///            | &apos;got_addr&apos; &apos;(&apos; stub-container-name &apos;,&apos; symbol &apos;)&apos;
///            | symbol
///
/// binary_expr = expr &apos;+&apos; expr
///             | expr &apos;-&apos; expr
///             | expr &apos;&amp;&apos; expr
///             | expr &apos;|&apos; expr
///             | expr &apos;&lt;&lt;&apos; expr
///             | expr &apos;&gt;&gt;&apos; expr
///</doc>
<fun r='_ZN4llvm18RuntimeDyldCheckerC1ESt8functionIFbNS_9StringRefEEES1_IFNS_8ExpectedINS0_16MemoryRegionInfoEEES2_EES1_IFS7_S2_S2_EESB_SB_NS_7support10endian4770024'/>
<fun r='_ZN4llvm18RuntimeDyldCheckerD1Ev'/>
<fun r='_ZNK4llvm18RuntimeDyldChecker5checkENS_9StringRefE'/>
<fun r='_ZNK4llvm18RuntimeDyldChecker21checkAllRulesInBufferENS_9StringRefEPNS_12MemoryBufferE'/>
<fun r='_ZN4llvm18RuntimeDyldChecker14getSectionAddrENS_9StringRefES1_b'/>
<fun r='_ZNK4llvm18RuntimeDyldChecker21getSectionLoadAddressEPv'/>
<mbr r='llvm::RuntimeDyldChecker::Impl' o='0' t='std::unique_ptr&lt;RuntimeDyldCheckerImpl&gt;'/>
