<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='812' ll='818' type='bool llvm::TargetInstrInfo::analyzeSelect(const llvm::MachineInstr &amp; MI, SmallVectorImpl&lt;llvm::MachineOperand&gt; &amp; Cond, unsigned int &amp; TrueOp, unsigned int &amp; FalseOp, bool &amp; Optimizable) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='794'>/// Analyze the given select instruction, returning true if
  /// it cannot be understood. It is assumed that MI-&gt;isSelect() is true.
  ///
  /// When successful, return the controlling condition and the operands that
  /// determine the true and false result values.
  ///
  ///   Result = SELECT Cond, TrueOp, FalseOp
  ///
  /// Some targets can optimize select instructions, for example by predicating
  /// the instruction defining one of the operands. Such targets should set
  /// Optimizable.
  ///
  /// @param         MI Select instruction to analyze.
  /// @param Cond    Condition controlling the select.
  /// @param TrueOp  Operand number of the value selected when Cond is true.
  /// @param FalseOp Operand number of the value selected when Cond is false.
  /// @param Optimizable Returned as true if MI is optimizable.
  /// @returns False on success.</doc>
<use f='llvm/llvm/lib/CodeGen/PeepholeOptimizer.cpp' l='632' u='c' c='_ZN12_GLOBAL__N_117PeepholeOptimizer14optimizeSelectERN4llvm12MachineInstrERNS1_15SmallPtrSetImplIPS2_EE'/>
