<def f='llvm/llvm/include/llvm/IR/GetElementPtrTypeIterator.h' l='106' type='bool llvm::generic_gep_type_iterator::isStruct() const'/>
<doc f='llvm/llvm/include/llvm/IR/GetElementPtrTypeIterator.h' l='91'>// All of the below API is for querying properties of the &quot;outer type&quot;, i.e.
    // the type that contains the indexed type. Most of the time this is just
    // the type that was visited immediately prior to the indexed type, but for
    // the first element this is an unbounded array of the GEP&apos;s source element
    // type, for which there is no clearly corresponding IR type (we&apos;ve
    // historically used a pointer type as the outer type in this case, but
    // pointers will soon lose their element type).
    //
    // FIXME: Most current users of this class are just interested in byte
    // offsets (a few need to know whether the outer type is a struct because
    // they are trying to replace a constant with a variable, which is only
    // legal for arrays, e.g. canReplaceOperandWithVariable in SimplifyCFG.cpp);
    // we should provide a more minimal API here that exposes not much more than
    // that.</doc>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='381' u='c' c='_ZL13isSafeSROAGEPPN4llvm4UserE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp' l='1176' u='c' c='_ZN4llvm12InstCombiner26SimplifyDemandedVectorEltsEPNS_5ValueENS_5APIntERS3_j'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp' l='1619' u='c' c='_ZN4llvm12InstCombiner22visitGetElementPtrInstERNS_17GetElementPtrInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp' l='529' u='c' c='_ZN12_GLOBAL__N_126StraightLineStrengthReduce36allocateCandidatesAndFindBasisForGEPEPN4llvm17GetElementPtrInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2916' u='c' c='_ZN4llvm29canReplaceOperandWithVariableEPKNS_11InstructionEj'/>
