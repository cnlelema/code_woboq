<dec f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.h' l='319' type='bool llvm::PPCInstrInfo::isProfitableToIfCvt(llvm::MachineBasicBlock &amp; TMBB, unsigned int NumT, unsigned int ExtraT, llvm::MachineBasicBlock &amp; FMBB, unsigned int NumF, unsigned int ExtraF, llvm::BranchProbability Probability) const'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1412' ll='1418' type='bool llvm::PPCInstrInfo::isProfitableToIfCvt(llvm::MachineBasicBlock &amp; TMBB, unsigned int NumT, unsigned int ExtraT, llvm::MachineBasicBlock &amp; FMBB, unsigned int NumF, unsigned int ExtraF, llvm::BranchProbability Probability) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp' l='1406'>// We should make sure that, if we&apos;re going to predicate both sides of a
// condition (a diamond), that both sides don&apos;t define the counter register. We
// can predicate counter-decrement-based branches, but while that predicates
// the branching, it does not predicate the counter decrement. If we tried to
// merge the triangle into one predicated block, we&apos;d decrement the counter
// twice.</doc>
