<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2202' type='llvm::AllocaInst * clang::CodeGen::CodeGenFunction::CreateTempAlloca(llvm::Type * Ty, const llvm::Twine &amp; Name = &quot;tmp&quot;, llvm::Value * ArraySize = nullptr)'/>
<doc f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='2176'>/// CreateTempAlloca - This creates an alloca and inserts it into the entry
  /// block if \p ArraySize is nullptr, otherwise inserts it at the current
  /// insertion point of the builder. The caller is responsible for setting an
  /// appropriate alignment on
  /// the alloca.
  ///
  /// \p ArraySize is the number of array elements to be allocated if it
  ///    is not nullptr.
  ///
  /// LangAS::Default is the address space of pointers to local variables and
  /// temporaries, as exposed in the source language. In certain
  /// configurations, this is not the same as the alloca address space, and a
  /// cast is needed to lift the pointer from the alloca AS into
  /// LangAS::Default. This can happen when the target uses a restricted
  /// address space for the stack but the source language requires
  /// LangAS::Default to be a generic address space. The latter condition is
  /// common for most programming languages; OpenCL is an exception in that
  /// LangAS::Default is the private address space, which naturally maps
  /// to the stack.
  ///
  /// Because the address of a temporary is often exposed to the program in
  /// various ways, this function will perform the cast. The original alloca
  /// instruction is returned through \p Alloca if it is not nullptr.
  ///
  /// The cast is not performaed in CreateTempAllocaWithoutCast. This is
  /// more efficient if the caller knows that the address will not be exposed.</doc>
<use f='llvm/clang/lib/CodeGen/CGCall.cpp' l='3894' u='c' c='_ZN5clang7CodeGen15CodeGenFunction8EmitCallERKNS0_14CGFunctionInfoERKNS0_8CGCalleeENS0_15ReturnValueSlotERKNS0_11CallArgListEPPN4llvm8CallBaseENS_14SourceLocationE'/>
<use f='llvm/clang/lib/CodeGen/CGCoroutine.cpp' l='236' u='c' c='_ZL21emitSuspendExpressionRN5clang7CodeGen15CodeGenFunctionERNS0_10CGCoroDataERKNS_20CoroutineSuspendExprEN12_GLOBAL__N_19AwaitKindENS0_12AggValueSlotEbb'/>
<use f='llvm/clang/lib/CodeGen/CGException.cpp' l='409' u='c' c='_ZN5clang7CodeGen15CodeGenFunction16getExceptionSlotEv'/>
<use f='llvm/clang/lib/CodeGen/CGException.cpp' l='415' u='c' c='_ZN5clang7CodeGen15CodeGenFunction17getEHSelectorSlotEv'/>
<use f='llvm/clang/lib/CodeGen/CGException.cpp' l='1391' u='c' c='_ZN5clang7CodeGen15CodeGenFunction11FinallyInfo5enterERS1_PKNS_4StmtEN4llvm14FunctionCalleeES8_S8_'/>
<use f='llvm/clang/lib/CodeGen/CGException.cpp' l='1411' u='c' c='_ZN5clang7CodeGen15CodeGenFunction11FinallyInfo5enterERS1_PKNS_4StmtEN4llvm14FunctionCalleeES8_S8_'/>
<use f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='69' u='c' c='_ZN5clang7CodeGen15CodeGenFunction27CreateTempAllocaWithoutCastEPN4llvm4TypeENS_9CharUnitsERKNS2_5TwineEPNS2_5ValueE'/>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='107' ll='114' type='llvm::AllocaInst * clang::CodeGen::CodeGenFunction::CreateTempAlloca(llvm::Type * Ty, const llvm::Twine &amp; Name = &quot;tmp&quot;, llvm::Value * ArraySize = nullptr)'/>
<doc f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='104'>/// CreateTempAlloca - This creates an alloca and inserts it into the entry
/// block if \p ArraySize is nullptr, otherwise inserts it at the current
/// insertion point of the builder.</doc>
<use f='llvm/clang/lib/CodeGen/CGGPUBuiltin.cpp' l='108' u='c' c='_ZN5clang7CodeGen15CodeGenFunction29EmitNVPTXDevicePrintfCallExprEPKNS_8CallExprENS0_15ReturnValueSlotE'/>
