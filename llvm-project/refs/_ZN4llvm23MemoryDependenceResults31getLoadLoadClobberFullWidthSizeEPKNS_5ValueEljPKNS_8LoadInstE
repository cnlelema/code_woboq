<dec f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='475' type='static unsigned int llvm::MemoryDependenceResults::getLoadLoadClobberFullWidthSize(const llvm::Value * MemLocBase, int64_t MemLocOffs, unsigned int MemLocSize, const llvm::LoadInst * LI)'/>
<doc f='llvm/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h' l='468'>/// Looks at a memory location for a load (specified by MemLocBase, Offs, and
  /// Size) and compares it against a load.
  ///
  /// If the specified load could be safely widened to a larger integer load
  /// that is 1) still efficient, 2) safe for the target, and 3) would provide
  /// the specified memory location value, then this function returns the size
  /// in bytes of the load width to use.  If not, this returns zero.</doc>
<def f='llvm/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp' l='240' ll='315' type='static unsigned int llvm::MemoryDependenceResults::getLoadLoadClobberFullWidthSize(const llvm::Value * MemLocBase, int64_t MemLocOffs, unsigned int MemLocSize, const llvm::LoadInst * LI)'/>
<use f='llvm/llvm/lib/Transforms/Utils/VNCoercion.cpp' l='298' u='c' c='_ZN4llvm10VNCoercion29analyzeLoadFromClobberingLoadEPNS_4TypeEPNS_5ValueEPNS_8LoadInstERKNS_10DataLayoutEPKNS_17TargetLibraryInfoE'/>
