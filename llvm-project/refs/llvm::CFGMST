<def f='llvm/llvm/lib/Transforms/Instrumentation/CFGMST.h' l='37' ll='282'/>
<doc f='llvm/llvm/lib/Transforms/Instrumentation/CFGMST.h' l='33'>/// An union-find based Minimum Spanning Tree for CFG
///
/// Implements a Union-find algorithm to compute Minimum Spanning Tree
/// for a given CFG.</doc>
<mbr r='llvm::CFGMST::F' t='llvm::Function &amp;'/>
<mbr r='llvm::CFGMST::AllEdges' t='std::vector&lt;std::unique_ptr&lt;Edge&gt; &gt;'/>
<mbr r='llvm::CFGMST::BBInfos' t='DenseMap&lt;const llvm::BasicBlock *, std::unique_ptr&lt;BBInfo&gt; &gt;'/>
<mbr r='llvm::CFGMST::ExitBlockFound' t='bool'/>
<fun r='_ZN4llvm6CFGMST20findAndCompressGroupEPT0_'/>
<fun r='_ZN4llvm6CFGMST11unionGroupsEPKNS_10BasicBlockES3_'/>
<fun r='_ZNK4llvm6CFGMST9getBBInfoEPKNS_10BasicBlockE'/>
<fun r='_ZNK4llvm6CFGMST10findBBInfoEPKNS_10BasicBlockE'/>
<fun r='_ZN4llvm6CFGMST10buildEdgesEv'/>
<fun r='_ZN4llvm6CFGMST17sortEdgesByWeightEv'/>
<fun r='_ZN4llvm6CFGMST26computeMinimumSpanningTreeEv'/>
<fun r='_ZNK4llvm6CFGMST9dumpEdgesERNS_11raw_ostreamERKNS_5TwineE'/>
<fun r='_ZN4llvm6CFGMST7addEdgeEPKNS_10BasicBlockES3_m'/>
<mbr r='llvm::CFGMST::BPI' t='llvm::BranchProbabilityInfo *'/>
<mbr r='llvm::CFGMST::BFI' t='llvm::BlockFrequencyInfo *'/>
<fun r='_ZN4llvm6CFGMSTC1ERNS_8FunctionEPNS_21BranchProbabilityInfoEPNS_18BlockFrequencyInfoE'/>
