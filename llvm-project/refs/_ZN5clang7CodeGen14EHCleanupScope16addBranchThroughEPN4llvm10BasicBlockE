<def f='llvm/clang/lib/CodeGen/CGCleanup.h' l='409' ll='411' type='bool clang::CodeGen::EHCleanupScope::addBranchThrough(llvm::BasicBlock * Block)'/>
<doc f='llvm/clang/lib/CodeGen/CGCleanup.h' l='394'>/// Add a branch-through to this cleanup scope.  A branch-through is
  /// a branch from a scope protected by this (normal) cleanup to an
  /// enclosing scope other than the immediately-enclosing normal
  /// cleanup scope.
  ///
  /// In the following example, the branch through B&apos;s scope is a
  /// branch-through, while the branch through A&apos;s scope is a
  /// branch-after:
  ///   for (;;) { A a; B b; break; }
  ///
  /// All branch-throughs have a common destination out of the
  /// cleanup, one possibly shared with the fall-through.  Therefore
  /// branch-throughs usually don&apos;t force a switch after the cleanup.
  ///
  /// \return true if the branch-through was new to this scope</doc>
<use f='llvm/clang/lib/CodeGen/CGCleanup.cpp' l='1111' u='c' c='_ZN5clang7CodeGen15CodeGenFunction24EmitBranchThroughCleanupENS1_8JumpDestE'/>
