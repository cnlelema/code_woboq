<dec f='llvm/clang/lib/CodeGen/CodeGenFunction.h' l='3530' type='clang::CodeGen::LValue clang::CodeGen::CodeGenFunction::EmitCastLValue(const clang::CastExpr * E)'/>
<def f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='5095' ll='5257' type='clang::CodeGen::LValue clang::CodeGen::CodeGenFunction::EmitCastLValue(const clang::CastExpr * E)'/>
<doc f='llvm/clang/lib/CodeGen/CGExpr.cpp' l='5088'>/// EmitCastLValue - Casts are never lvalues unless that cast is to a reference
/// type. If the cast is to a reference, we can have the usual lvalue result,
/// otherwise if a cast is needed by the code generator in an lvalue context,
/// then it must mean that we need the address of an aggregate in order to
/// access one of its members.  This can happen for all the reasons that casts
/// are permitted with aggregate result, including noop aggregate casts, and
/// cast from scalar to union.</doc>
