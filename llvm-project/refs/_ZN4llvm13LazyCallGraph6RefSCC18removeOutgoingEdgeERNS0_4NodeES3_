<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='801' type='void llvm::LazyCallGraph::RefSCC::removeOutgoingEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='791'>/// Remove an edge whose source is in this RefSCC and target is *not*.
    ///
    /// This removes an inter-RefSCC edge. All inter-RefSCC edges originating
    /// from this SCC have been fully explored by any in-flight DFS graph
    /// formation, so this is always safe to call once you have the source
    /// RefSCC.
    ///
    /// This operation does not change the cyclic structure of the graph and so
    /// is very inexpensive. It may change the connectivity graph of the SCCs
    /// though, so be careful calling this while iterating over them.</doc>
<use f='llvm/llvm/lib/Analysis/CGSCCPassManager.cpp' l='537' u='c' c='_ZN4llvm41updateCGAndAnalysisManagerForFunctionPassERNS_13LazyCallGraphERNS0_3SCCERNS0_4NodeERNS_15AnalysisManagerIS2_JS1_EEERNS_17CGSCCUpdateResultE'/>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1107' ll='1124' type='void llvm::LazyCallGraph::RefSCC::removeOutgoingEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='707' u='c' c='_ZN12_GLOBAL__N_143LazyCallGraphTest_OutgoingEdgeMutation_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1179' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
