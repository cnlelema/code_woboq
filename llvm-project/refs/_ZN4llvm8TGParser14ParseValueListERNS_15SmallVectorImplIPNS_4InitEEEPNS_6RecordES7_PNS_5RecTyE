<dec f='llvm/llvm/lib/TableGen/TGParser.h' l='185' type='void llvm::TGParser::ParseValueList(SmallVectorImpl&lt;llvm::Init *&gt; &amp; Result, llvm::Record * CurRec, llvm::Record * ArgsRec = nullptr, llvm::RecTy * EltTy = nullptr)'/>
<use f='llvm/llvm/lib/TableGen/TGParser.cpp' l='603' u='c' c='_ZN4llvm8TGParser22ParseSubClassReferenceEPNS_6RecordEb'/>
<use f='llvm/llvm/lib/TableGen/TGParser.cpp' l='648' u='c' c='_ZN4llvm8TGParser27ParseSubMultiClassReferenceEPNS_10MultiClassE'/>
<use f='llvm/llvm/lib/TableGen/TGParser.cpp' l='1836' u='c' c='_ZN4llvm8TGParser16ParseSimpleValueEPNS_6RecordEPNS_5RecTyENS0_11IDParseModeE'/>
<use f='llvm/llvm/lib/TableGen/TGParser.cpp' l='1885' u='c' c='_ZN4llvm8TGParser16ParseSimpleValueEPNS_6RecordEPNS_5RecTyENS0_11IDParseModeE'/>
<use f='llvm/llvm/lib/TableGen/TGParser.cpp' l='1948' u='c' c='_ZN4llvm8TGParser16ParseSimpleValueEPNS_6RecordEPNS_5RecTyENS0_11IDParseModeE'/>
<def f='llvm/llvm/lib/TableGen/TGParser.cpp' l='2309' ll='2360' type='void llvm::TGParser::ParseValueList(SmallVectorImpl&lt;llvm::Init *&gt; &amp; Result, llvm::Record * CurRec, llvm::Record * ArgsRec = nullptr, llvm::RecTy * EltTy = nullptr)'/>
<doc f='llvm/llvm/lib/TableGen/TGParser.cpp' l='2303'>/// ParseValueList - Parse a comma separated list of values, returning them as a
/// vector.  Note that this always expects to be able to parse at least one
/// value.  It returns an empty list if this is not possible.
///
///   ValueList ::= Value (&apos;,&apos; Value)
///</doc>
