<dec f='llvm/clang/include/clang/AST/ExprCXX.h' l='3707' type='void clang::UnresolvedMemberExpr::UnresolvedMemberExpr(const clang::ASTContext &amp; Context, bool HasUnresolvedUsing, clang::Expr * Base, clang::QualType BaseType, bool IsArrow, clang::SourceLocation OperatorLoc, clang::NestedNameSpecifierLoc QualifierLoc, clang::SourceLocation TemplateKWLoc, const clang::DeclarationNameInfo &amp; MemberNameInfo, const clang::TemplateArgumentListInfo * TemplateArgs, clang::UnresolvedSetIterator Begin, clang::UnresolvedSetIterator End)'/>
<doc f='llvm/clang/include/clang/AST/ExprCXX.h' l='3693'>// UnresolvedMemberExpr is followed by several trailing objects.
  // They are in order:
  //
  // * An array of getNumResults() DeclAccessPair for the results. These are
  //   undesugared, which is to say, they may include UsingShadowDecls.
  //   Access is relative to the naming class.
  //
  // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified
  //   template keyword and arguments. Present if and only if
  //   hasTemplateKWAndArgsInfo().
  //
  // * An array of getNumTemplateArgs() TemplateArgumentLoc containing
  //   location information for the explicitly specified template arguments.</doc>
<def f='llvm/clang/lib/AST/ExprCXX.cpp' l='1409' ll='1434' type='void clang::UnresolvedMemberExpr::UnresolvedMemberExpr(const clang::ASTContext &amp; Context, bool HasUnresolvedUsing, clang::Expr * Base, clang::QualType BaseType, bool IsArrow, clang::SourceLocation OperatorLoc, clang::NestedNameSpecifierLoc QualifierLoc, clang::SourceLocation TemplateKWLoc, const clang::DeclarationNameInfo &amp; MemberNameInfo, const clang::TemplateArgumentListInfo * TemplateArgs, clang::UnresolvedSetIterator Begin, clang::UnresolvedSetIterator End)'/>
<use f='llvm/clang/lib/AST/ExprCXX.cpp' l='1463' u='c' c='_ZN5clang20UnresolvedMemberExpr6CreateERKNS_10ASTContextEbPNS_4ExprENS_8QualTypeEbNS_14SourceLocationENS_22NestedNameSpecifierLocES7_RKNS_19Declaratio12401034'/>
