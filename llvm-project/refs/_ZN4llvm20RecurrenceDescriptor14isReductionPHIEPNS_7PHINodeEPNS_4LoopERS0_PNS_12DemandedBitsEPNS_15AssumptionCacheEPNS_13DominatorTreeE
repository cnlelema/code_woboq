<dec f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='181' type='static bool llvm::RecurrenceDescriptor::isReductionPHI(llvm::PHINode * Phi, llvm::Loop * TheLoop, llvm::RecurrenceDescriptor &amp; RedDes, llvm::DemandedBits * DB = nullptr, llvm::AssumptionCache * AC = nullptr, llvm::DominatorTree * DT = nullptr)'/>
<def f='llvm/llvm/lib/Analysis/IVDescriptors.cpp' l='610' ll='668' type='static bool llvm::RecurrenceDescriptor::isReductionPHI(llvm::PHINode * Phi, llvm::Loop * TheLoop, llvm::RecurrenceDescriptor &amp; RedDes, llvm::DemandedBits * DB = nullptr, llvm::AssumptionCache * AC = nullptr, llvm::DominatorTree * DT = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/IVDescriptors.h' l='177'>/// Returns true if Phi is a reduction in TheLoop. The RecurrenceDescriptor
  /// is returned in RedDes. If either \p DB is non-null or \p AC and \p DT are
  /// non-null, the minimal bit width needed to compute the reduction will be
  /// computed.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='671' u='c' c='_ZL21findInnerReductionPhiPN4llvm4LoopEPNS_5ValueE'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp' l='646' u='c' c='_ZN4llvm25LoopVectorizationLegality18canVectorizeInstrsEv'/>
