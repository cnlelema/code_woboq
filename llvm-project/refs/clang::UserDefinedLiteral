<inh f='llvm/clang/include/clang/AST/Expr.h' l='2460' c='clang::CallExpr'/>
<def f='llvm/clang/include/clang/AST/ExprCXX.h' l='468' ll='546'/>
<size>32</size>
<doc f='llvm/clang/include/clang/AST/ExprCXX.h' l='459'>/// A call to a literal operator (C++11 [over.literal])
/// written as a user-defined literal (C++11 [lit.ext]).
///
/// Represents a user-defined literal, e.g. &quot;foo&quot;_bar or 1.23_xyz. While this
/// is semantically equivalent to a normal call, this AST node provides better
/// information about the syntactic representation of the literal.
///
/// Since literal operators are never found by ADL and can only be declared at
/// namespace scope, a user-defined literal is never dependent.</doc>
<mbr r='clang::UserDefinedLiteral::UDSuffixLoc' o='192' t='clang::SourceLocation'/>
<fun r='_ZN5clang18UserDefinedLiteralC1EPNS_4ExprEN4llvm8ArrayRefIS2_EENS_8QualTypeENS_13ExprValueKindENS_14SourceLocationES8_'/>
<fun r='_ZN5clang18UserDefinedLiteralC1EjNS_4Stmt10EmptyShellE'/>
<fun r='_ZN5clang18UserDefinedLiteral6CreateERKNS_10ASTContextEPNS_4ExprEN4llvm8ArrayRefIS5_EENS_8QualTypeENS_13ExprValueKindENS_14SourceLocationESB_'/>
<fun r='_ZN5clang18UserDefinedLiteral11CreateEmptyERKNS_10ASTContextEjNS_4Stmt10EmptyShellE'/>
<fun r='_ZNK5clang18UserDefinedLiteral22getLiteralOperatorKindEv'/>
<fun r='_ZN5clang18UserDefinedLiteral16getCookedLiteralEv'/>
<fun r='_ZNK5clang18UserDefinedLiteral16getCookedLiteralEv'/>
<fun r='_ZNK5clang18UserDefinedLiteral11getBeginLocEv'/>
<fun r='_ZNK5clang18UserDefinedLiteral9getEndLocEv'/>
<fun r='_ZNK5clang18UserDefinedLiteral14getUDSuffixLocEv'/>
<fun r='_ZNK5clang18UserDefinedLiteral11getUDSuffixEv'/>
<fun r='_ZN5clang18UserDefinedLiteral7classofEPKNS_4StmtE'/>
