<dec f='llvm/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.h' l='153' type='bool llvm::AArch64TTIImpl::shouldConsiderAddressTypePromotion(const llvm::Instruction &amp; I, bool &amp; AllowPromotionWithoutCommonHeader)'/>
<def f='llvm/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp' l='855' ll='880' type='bool llvm::AArch64TTIImpl::shouldConsiderAddressTypePromotion(const llvm::Instruction &amp; I, bool &amp; AllowPromotionWithoutCommonHeader)'/>
<doc f='llvm/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp' l='850'>/// See if \p I should be considered for address type promotion. We check if \p
/// I is a sext with right type and used in memory accesses. If it used in a
/// &quot;complex&quot; getelementptr, we allow it to be promoted without finding other
/// sext instructions that sign extended the same initial value. A getelementptr
/// is considered as &quot;complex&quot; if it has more than 2 operands.</doc>
