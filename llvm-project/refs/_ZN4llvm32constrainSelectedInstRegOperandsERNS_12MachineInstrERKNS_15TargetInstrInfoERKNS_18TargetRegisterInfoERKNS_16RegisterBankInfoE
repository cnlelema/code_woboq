<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='89' type='bool llvm::constrainSelectedInstRegOperands(llvm::MachineInstr &amp; I, const llvm::TargetInstrInfo &amp; TII, const llvm::TargetRegisterInfo &amp; TRI, const llvm::RegisterBankInfo &amp; RBI)'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineInstrBuilder.h' l='306' u='c' c='_ZNK4llvm19MachineInstrBuilder16constrainAllUsesERKNS_15TargetInstrInfoERKNS_18TargetRegisterInfoERKNS_16RegisterBankInfoE'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/Utils.h' l='80'>/// Mutate the newly-selected instruction \p I to constrain its (possibly
/// generic) virtual register operands to the instruction&apos;s register class.
/// This could involve inserting COPYs before (for uses) or after (for defs).
/// This requires the number of operands to match the instruction description.
/// \returns whether operand regclass constraining succeeded.
///
// FIXME: Not all instructions have the same number of operands. We should
// probably expose a constrain helper per operand and let the target selector
// constrain individual registers, like fast-isel.</doc>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/Utils.cpp' l='113' ll='158' type='bool llvm::constrainSelectedInstRegOperands(llvm::MachineInstr &amp; I, const llvm::TargetInstrInfo &amp; TII, const llvm::TargetRegisterInfo &amp; TRI, const llvm::RegisterBankInfo &amp; RBI)'/>
<use f='llvm/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h' l='876' u='c' c='_ZNK4llvm19InstructionSelector17executeMatchTableERT_RNS_11SmallVectorINS_19MachineInstrBuilderELj4EEERNS0_12MatcherStateERKNS0_10ISelInfoTyIT0_T1_T2_3694218'/>
