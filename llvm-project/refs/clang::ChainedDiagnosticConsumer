<inh f='llvm/clang/include/clang/Basic/Diagnostic.h' l='1489' c='clang::DiagnosticConsumer'/>
<def f='llvm/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h' l='22' ll='67'/>
<size>40</size>
<doc f='llvm/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h' l='18'>/// ChainedDiagnosticConsumer - Chain two diagnostic clients so that diagnostics
/// go to the first client and then the second. The first diagnostic client
/// should be the &quot;primary&quot; client, and will be used for computing whether the
/// diagnostics should be included in counts.</doc>
<fun r='_ZN5clang25ChainedDiagnosticConsumer6anchorEv'/>
<mbr r='clang::ChainedDiagnosticConsumer::OwningPrimary' o='128' t='std::unique_ptr&lt;DiagnosticConsumer&gt;'/>
<mbr r='clang::ChainedDiagnosticConsumer::Primary' o='192' t='clang::DiagnosticConsumer *'/>
<mbr r='clang::ChainedDiagnosticConsumer::Secondary' o='256' t='std::unique_ptr&lt;DiagnosticConsumer&gt;'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumerC1ESt10unique_ptrINS_18DiagnosticConsumerESt14default_deleteIS2_EES5_'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumerC1EPNS_18DiagnosticConsumerESt10unique_ptrIS1_St14default_deleteIS1_EE'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumer15BeginSourceFileERKNS_11LangOptionsEPKNS_12PreprocessorE'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumer13EndSourceFileEv'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumer6finishEv'/>
<fun r='_ZNK5clang25ChainedDiagnosticConsumer25IncludeInDiagnosticCountsEv'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumer16HandleDiagnosticENS_17DiagnosticsEngine5LevelERKNS_10DiagnosticE'/>
<fun r='_ZN5clang25ChainedDiagnosticConsumer6anchorEv'/>
