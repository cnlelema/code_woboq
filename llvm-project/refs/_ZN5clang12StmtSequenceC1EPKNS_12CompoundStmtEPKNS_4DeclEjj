<dec f='llvm/clang/include/clang/Analysis/CloneDetection.h' l='61' type='void clang::StmtSequence::StmtSequence(const clang::CompoundStmt * Stmt, const clang::Decl * D, unsigned int StartIndex, unsigned int EndIndex)'/>
<def f='llvm/clang/lib/Analysis/CloneDetection.cpp' l='22' ll='28' type='void clang::StmtSequence::StmtSequence(const clang::CompoundStmt * Stmt, const clang::Decl * D, unsigned int StartIndex, unsigned int EndIndex)'/>
<use f='llvm/clang/lib/Analysis/CloneDetection.cpp' l='291' u='c' c='_ZL8saveHashPKN5clang4StmtEPKNS_4DeclERSt6vectorISt4pairImNS_12StmtSequenceEESaIS9_EE'/>
<doc f='llvm/clang/include/clang/Analysis/CloneDetection.h' l='49'>/// Constructs a StmtSequence holding multiple statements.
  ///
  /// The resulting StmtSequence identifies a continuous sequence of statements
  /// in the body of the given CompoundStmt. Which statements of the body should
  /// be identified needs to be specified by providing a start and end index
  /// that describe a non-empty sub-array in the body of the given CompoundStmt.
  ///
  /// \param Stmt A CompoundStmt that contains all statements in its body.
  /// \param D The Decl containing this Stmt.
  /// \param StartIndex The inclusive start index in the children array of
  ///                   \p Stmt
  /// \param EndIndex The exclusive end index in the children array of \p Stmt.</doc>
