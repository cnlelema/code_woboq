<dec f='llvm/clang/include/clang/Sema/Sema.h' l='1728' type='bool clang::Sema::isEquivalentInternalLinkageDeclaration(const clang::NamedDecl * A, const clang::NamedDecl * B)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='1725'>/// Determine if \p A and \p B are equivalent internal linkage declarations
  /// from different modules, and thus an ambiguity error can be downgraded to
  /// an extension warning.</doc>
<use f='llvm/clang/lib/Sema/SemaDeclCXX.cpp' l='9699' u='c' c='_ZN5clang4Sema20CheckUsingShadowDeclEPNS_9UsingDeclEPNS_9NamedDeclERKNS_12LookupResultERPNS_15UsingShadowDeclE'/>
<use f='llvm/clang/lib/Sema/SemaLookup.cpp' l='577' u='c' c='_ZN5clang12LookupResult11resolveKindEv'/>
<def f='llvm/clang/lib/Sema/SemaOverload.cpp' l='9359' ll='9402' type='bool clang::Sema::isEquivalentInternalLinkageDeclaration(const clang::NamedDecl * A, const clang::NamedDecl * B)'/>
<doc f='llvm/clang/lib/Sema/SemaOverload.cpp' l='9352'>/// Determine whether two declarations are &quot;equivalent&quot; for the purposes of
/// name lookup and overload resolution. This applies when the same internal/no
/// linkage entity is defined by two modules (probably by textually including
/// the same header). In such a case, we don&apos;t consider the declarations to
/// declare the same entity, but we also don&apos;t want lookups with both
/// declarations visible to be ambiguous in some cases (this happens when using
/// a modularized libstdc++).</doc>
