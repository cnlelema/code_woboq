<inh f='llvm/lld/wasm/SyntheticSections.h' l='36' c='lld::wasm::SyntheticSection'/>
<def f='llvm/lld/wasm/SyntheticSections.h' l='196' ll='204'/>
<size>200</size>
<doc f='llvm/lld/wasm/SyntheticSections.h' l='186'>// The event section contains a list of declared wasm events associated with the
// module. Currently the only supported event kind is exceptions. A single event
// entry represents a single event with an event tag. All C++ exceptions are
// represented by a single event. An event entry in this section contains
// information on what kind of event it is (e.g. exception) and the type of
// values contained in a single event object. (In wasm, an event can contain
// multiple values of primitive types. But for C++ exceptions, we just throw a
// pointer which is an i32 value (for wasm32 architecture), so the signature of
// C++ exception is (i32)-&gt;(void), because all event types are assumed to have
// void return type to share WasmSignature with functions.)</doc>
<fun r='_ZN3lld4wasm12EventSectionC1Ev'/>
<fun r='_ZN3lld4wasm12EventSection9writeBodyEv'/>
<fun r='_ZNK3lld4wasm12EventSection8isNeededEv'/>
<fun r='_ZN3lld4wasm12EventSection8addEventEPNS0_10InputEventE'/>
<mbr r='lld::wasm::EventSection::InputEvents' o='1408' t='std::vector&lt;InputEvent *&gt;'/>
