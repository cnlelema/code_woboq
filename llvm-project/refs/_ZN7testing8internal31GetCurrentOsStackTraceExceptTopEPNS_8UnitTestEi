<dec f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-internal.h' l='726' type='std::string testing::internal::GetCurrentOsStackTraceExceptTop(testing::UnitTest * unit_test, int skip_count)'/>
<use f='llvm/llvm/utils/unittest/googlemock/src/gmock-internal-utils.cc' l='167' u='c' c='_ZN7testing8internal3LogENS0_11LogSeverityERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi'/>
<def f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='4973' ll='4978' type='std::string testing::internal::GetCurrentOsStackTraceExceptTop(testing::UnitTest * , int skip_count)'/>
<doc f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='4963'>// Returns the current OS stack trace as an std::string.
//
// The maximum number of stack frames to be included is specified by
// the gtest_stack_trace_depth flag.  The skip_count parameter
// specifies the number of top frames to be skipped, which doesn&apos;t
// count against the number of frames to be included.
//
// For example, if Foo() calls Bar(), which in turn calls
// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won&apos;t.</doc>
<doc f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='4973'>/*unit_test*/</doc>
