<dec f='llvm/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h' l='476' type='void llvm::orc::moveGlobalVariableInitializer(llvm::GlobalVariable &amp; OrigGV, ValueToValueMapTy &amp; VMap, llvm::ValueMaterializer * Materializer = nullptr, llvm::GlobalVariable * NewGV = nullptr)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h' l='468'>/// Move global variable GV from its parent module to cloned global
///        declaration in a different module.
///
///   If the target global declaration is not supplied via the NewGV parameter
/// then it will be looked up via the VMap.
///
///   This will delete the initializer of GV from its original parent module,
/// but leave its declaration.</doc>
<def f='llvm/llvm/lib/ExecutionEngine/Orc/IndirectionUtils.cpp' l='332' ll='348' type='void llvm::orc::moveGlobalVariableInitializer(llvm::GlobalVariable &amp; OrigGV, ValueToValueMapTy &amp; VMap, llvm::ValueMaterializer * Materializer = nullptr, llvm::GlobalVariable * NewGV = nullptr)'/>
