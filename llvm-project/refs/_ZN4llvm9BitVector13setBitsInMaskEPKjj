<def f='llvm/llvm/include/llvm/ADT/BitVector.h' l='775' ll='777' type='void llvm::BitVector::setBitsInMask(const uint32_t * Mask, unsigned int MaskWords = ~0U)'/>
<doc f='llvm/llvm/include/llvm/ADT/BitVector.h' l='761'>//===--------------------------------------------------------------------===//
  // Portable bit mask operations.
  //===--------------------------------------------------------------------===//
  //
  // These methods all operate on arrays of uint32_t, each holding 32 bits. The
  // fixed word size makes it easier to work with literal bit vector constants
  // in portable code.
  //
  // The LSB in each word is the lowest numbered bit.  The size of a portable
  // bit mask is always a whole multiple of 32 bits.  If no bit mask size is
  // given, the bit mask is assumed to cover the entire BitVector.

  /// setBitsInMask - Add &apos;1&apos; bits from Mask to this vector. Don&apos;t resize.
  /// This computes &quot;*this |= Mask&quot;.</doc>
<use f='llvm/llvm/include/llvm/ADT/SmallBitVector.h' l='635' u='c' c='_ZN4llvm14SmallBitVector13setBitsInMaskEPKjj'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/RegisterBank.cpp' l='27' u='c' c='_ZN4llvm12RegisterBankC1EjPKcjPKjj'/>
<use f='llvm/llvm/lib/CodeGen/TargetLoweringBase.cpp' l='1108' u='c' c='_ZNK4llvm18TargetLoweringBase23findRepresentativeClassEPKNS_18TargetRegisterInfoENS_3MVTE'/>
