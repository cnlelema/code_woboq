<def f='llvm/llvm/utils/unittest/googletest/include/gtest/gtest-message.h' l='86' ll='230'/>
<size>8</size>
<doc f='llvm/llvm/utils/unittest/googletest/include/gtest/gtest-message.h' l='60'>// The Message class works like an ostream repeater.
//
// Typical usage:
//
//   1. You stream a bunch of values to a Message object.
//      It will remember the text in a stringstream.
//   2. Then you stream the Message object to an ostream.
//      This causes the text in the Message to be streamed
//      to the ostream.
//
// For example;
//
//   testing::Message foo;
//   foo &lt;&lt; 1 &lt;&lt; &quot; != &quot; &lt;&lt; 2;
//   std::cout &lt;&lt; foo;
//
// will print &quot;1 != 2&quot;.
//
// Message is not intended to be inherited from.  In particular, its
// destructor is not virtual.
//
// Note that stringstream behaves differently in gcc and in MSVC.  You
// can stream a NULL char pointer to it in the former, but not in the
// latter (it causes an access violation if you do).  The Message
// class hides this difference by treating a NULL char pointer as
// &quot;(null)&quot;.</doc>
<fun r='_ZN7testing7MessageC1Ev'/>
<fun r='_ZN7testing7MessageC1ERKS0_'/>
<fun r='_ZN7testing7MessageC1EPKc'/>
<fun r='_ZN7testing7MessagelsERKT_'/>
<fun r='_ZN7testing7MessagelsERKPT_'/>
<fun r='_ZN7testing7MessagelsEPFRSoS1_E'/>
<fun r='_ZN7testing7MessagelsEb'/>
<fun r='_ZN7testing7MessagelsEPKw'/>
<fun r='_ZN7testing7MessagelsEPw'/>
<fun r='_ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE'/>
<fun r='_ZNK7testing7Message9GetStringEv'/>
<mbr r='testing::Message::ss_' o='0' t='const internal::scoped_ptr&lt; ::std::stringstream&gt;'/>
<fun r='_ZN7testing7MessageaSERKS0_'/>
