<dec f='llvm/clang/include/clang/AST/ASTStructuralEquivalence.h' l='112' type='static llvm::Optional&lt;unsigned int&gt; clang::StructuralEquivalenceContext::findUntaggedStructOrUnionIndex(clang::RecordDecl * Anon)'/>
<doc f='llvm/clang/include/clang/AST/ASTStructuralEquivalence.h' l='101'>/// Find the index of the given anonymous struct/union within its
  /// context.
  ///
  /// \returns Returns the index of this anonymous struct/union in its context,
  /// including the next assigned index (if none of them match). Returns an
  /// empty option if the context is not a record, i.e.. if the anonymous
  /// struct/union is at namespace or block scope.
  ///
  /// FIXME: This is needed by ASTImporter and ASTStructureEquivalence. It
  /// probably makes more sense in some other common place then here.</doc>
<use f='llvm/clang/lib/AST/ASTStructuralEquivalence.cpp' l='1038' u='c' c='_ZL24IsStructurallyEquivalentRN5clang28StructuralEquivalenceContextEPNS_10RecordDeclES3_'/>
<use f='llvm/clang/lib/AST/ASTStructuralEquivalence.cpp' l='1040' u='c' c='_ZL24IsStructurallyEquivalentRN5clang28StructuralEquivalenceContextEPNS_10RecordDeclES3_'/>
<def f='llvm/clang/lib/AST/ASTStructuralEquivalence.cpp' l='1512' ll='1553' type='static Optional&lt;unsigned int&gt; clang::StructuralEquivalenceContext::findUntaggedStructOrUnionIndex(clang::RecordDecl * Anon)'/>
