<dec f='llvm/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h' l='55' type='bool llvm::TypeBasedAAResult::Aliases(const llvm::MDNode * A, const llvm::MDNode * B) const'/>
<use f='llvm/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp' l='376' u='c' c='_ZN4llvm17TypeBasedAAResult5aliasERKNS_14MemoryLocationES3_RNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp' l='432' u='c' c='_ZN4llvm17TypeBasedAAResult13getModRefInfoEPKNS_8CallBaseERKNS_14MemoryLocationERNS_11AAQueryInfoE'/>
<use f='llvm/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp' l='446' u='c' c='_ZN4llvm17TypeBasedAAResult13getModRefInfoEPKNS_8CallBaseES3_RNS_11AAQueryInfoE'/>
<def f='llvm/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp' l='706' ll='708' type='bool llvm::TypeBasedAAResult::Aliases(const llvm::MDNode * A, const llvm::MDNode * B) const'/>
<doc f='llvm/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp' l='704'>/// Aliases - Test whether the access represented by tag A may alias the
/// access represented by tag B.</doc>
