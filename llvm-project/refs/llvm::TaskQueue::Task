<def f='llvm/llvm/include/llvm/Support/TaskQueue.h' l='40' ll='65'/>
<doc f='llvm/llvm/include/llvm/Support/TaskQueue.h' l='35'>// Because we don&apos;t have init capture to use move-only local variables that
  // are captured into a lambda, we create the promise inside an explicit
  // callable struct. We want to do as much of the wrapping in the
  // type-specialized domain (before type erasure) and then erase this into a
  // std::function.</doc>
<fun r='_ZN4llvm9TaskQueue4TaskC1ET_RS0_'/>
<fun r='_ZN4llvm9TaskQueue4Task27invokeCallbackAndSetPromiseEPT_'/>
<fun r='_ZN4llvm9TaskQueue4Task27invokeCallbackAndSetPromiseEPv'/>
<fun r='_ZN4llvm9TaskQueue4TaskclEv'/>
<mbr r='llvm::TaskQueue::Task::C' t='Callable'/>
<mbr r='llvm::TaskQueue::Task::P' t='std::shared_ptr&lt;std::promise&lt;ResultTy&gt; &gt;'/>
<mbr r='llvm::TaskQueue::Task::Parent' t='llvm::TaskQueue *'/>
