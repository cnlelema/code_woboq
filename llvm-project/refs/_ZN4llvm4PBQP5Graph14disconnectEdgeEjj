<def f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='625' ll='631' type='void llvm::PBQP::Graph::disconnectEdge(EdgeId EId, NodeId NId)'/>
<use f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='637' u='c' c='_ZN4llvm4PBQP5Graph30disconnectAllNeighborsFromNodeEj'/>
<doc f='llvm/llvm/include/llvm/CodeGen/PBQP/Graph.h' l='600'>/// Disconnect an edge from the given node.
    ///
    /// Removes the given edge from the adjacency list of the given node.
    /// This operation leaves the edge in an &apos;asymmetric&apos; state: It will no
    /// longer appear in an iteration over the given node&apos;s (NId&apos;s) edges, but
    /// will appear in an iteration over the &apos;other&apos;, unnamed node&apos;s edges.
    ///
    /// This does not correspond to any normal graph operation, but exists to
    /// support efficient PBQP graph-reduction based solvers. It is used to
    /// &apos;effectively&apos; remove the unnamed node from the graph while the solver
    /// is performing the reduction. The solver will later call reconnectNode
    /// to restore the edge in the named node&apos;s adjacency list.
    ///
    /// Since the degree of a node is the number of connected edges,
    /// disconnecting an edge from a node &apos;u&apos; will cause the degree of &apos;u&apos; to
    /// drop by 1.
    ///
    /// A disconnected edge WILL still appear in an iteration over the graph
    /// edges.
    ///
    /// A disconnected edge should not be removed from the graph, it should be
    /// reconnected first.
    ///
    /// A disconnected edge can be reconnected by calling the reconnectEdge
    /// method.</doc>
