<def f='llvm/clang/include/clang/Basic/ObjCRuntime.h' l='234' ll='253' type='bool clang::ObjCRuntime::shouldUseRuntimeFunctionsForAlloc() const'/>
<doc f='llvm/clang/include/clang/Basic/ObjCRuntime.h' l='218'>/// Does this runtime provide entrypoints that are likely to be faster
  /// than an ordinary message send of the &quot;alloc&quot; selector?
  ///
  /// The &quot;alloc&quot; entrypoint is guaranteed to be equivalent to just sending the
  /// corresponding message.  If the entrypoint is implemented naively as just a
  /// message send, using it is a trade-off: it sacrifices a few cycles of
  /// overhead to save a small amount of code.  However, it&apos;s possible for
  /// runtimes to detect and special-case classes that use &quot;standard&quot;
  /// alloc behavior; if that&apos;s dynamically a large proportion of all
  /// objects, using the entrypoint will also be faster than using a message
  /// send.
  ///
  /// When this method returns true, Clang will turn non-super message sends of
  /// certain selectors into calls to the corresponding entrypoint:
  ///   alloc =&gt; objc_alloc
  ///   allocWithZone:nil =&gt; objc_allocWithZone</doc>
<use f='llvm/clang/lib/CodeGen/CGObjC.cpp' l='384' u='c' c='_ZL33tryGenerateSpecializedMessageSendRN5clang7CodeGen15CodeGenFunctionENS_8QualTypeEPN4llvm5ValueERKNS0_11CallArgListENS_8SelectorEPKNS_14ObjCMethodDeclEb'/>
