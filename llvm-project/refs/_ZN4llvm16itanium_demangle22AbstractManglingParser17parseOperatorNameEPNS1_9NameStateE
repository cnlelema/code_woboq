<dec f='llvm/llvm/include/llvm/Demangle/ItaniumDemangle.h' l='2299' type='llvm::itanium_demangle::Node * llvm::itanium_demangle::AbstractManglingParser::parseOperatorName(llvm::itanium_demangle::AbstractManglingParser::NameState * State)'/>
<def f='llvm/llvm/include/llvm/Demangle/ItaniumDemangle.h' l='2557' ll='2792' type='llvm::itanium_demangle::Node * llvm::itanium_demangle::AbstractManglingParser::parseOperatorName(llvm::itanium_demangle::AbstractManglingParser::NameState * State)'/>
<doc f='llvm/llvm/include/llvm/Demangle/ItaniumDemangle.h' l='2506'>//   &lt;operator-name&gt; ::= aa    # &amp;&amp;
//                   ::= ad    # &amp; (unary)
//                   ::= an    # &amp;
//                   ::= aN    # &amp;=
//                   ::= aS    # =
//                   ::= cl    # ()
//                   ::= cm    # ,
//                   ::= co    # ~
//                   ::= cv &lt;type&gt;    # (cast)
//                   ::= da    # delete[]
//                   ::= de    # * (unary)
//                   ::= dl    # delete
//                   ::= dv    # /
//                   ::= dV    # /=
//                   ::= eo    # ^
//                   ::= eO    # ^=
//                   ::= eq    # ==
//                   ::= ge    # &gt;=
//                   ::= gt    # &gt;
//                   ::= ix    # []
//                   ::= le    # &lt;=
//                   ::= li &lt;source-name&gt;  # operator &quot;&quot;
//                   ::= ls    # &lt;&lt;
//                   ::= lS    # &lt;&lt;=
//                   ::= lt    # &lt;
//                   ::= mi    # -
//                   ::= mI    # -=
//                   ::= ml    # *
//                   ::= mL    # *=
//                   ::= mm    # -- (postfix in &lt;expression&gt; context)
//                   ::= na    # new[]
//                   ::= ne    # !=
//                   ::= ng    # - (unary)
//                   ::= nt    # !
//                   ::= nw    # new
//                   ::= oo    # ||
//                   ::= or    # |
//                   ::= oR    # |=
//                   ::= pm    # -&gt;*
//                   ::= pl    # +
//                   ::= pL    # +=
//                   ::= pp    # ++ (postfix in &lt;expression&gt; context)
//                   ::= ps    # + (unary)
//                   ::= pt    # -&gt;
//                   ::= qu    # ?
//                   ::= rm    # %
//                   ::= rM    # %=
//                   ::= rs    # &gt;&gt;
//                   ::= rS    # &gt;&gt;=
//                   ::= ss    # &lt;=&gt; C++2a
//                   ::= v &lt;digit&gt; &lt;source-name&gt;        # vendor extended operator</doc>
