<inh f='llvm/llvm/include/llvm/Support/Error.h' l='344' c='llvm::ErrorInfo'/>
<def f='llvm/llvm/include/llvm/Support/Error.h' l='1140' ll='1159'/>
<size>64</size>
<doc f='llvm/llvm/include/llvm/Support/Error.h' l='1116'>/// This class wraps a string in an Error.
///
/// StringError is useful in cases where the client is not expected to be able
/// to consume the specific error message programmatically (for example, if the
/// error message is to be presented to the user).
///
/// StringError can also be used when additional information is to be printed
/// along with a error_code message. Depending on the constructor called, this
/// class can either display:
///    1. the error_code message (ECError behavior)
///    2. a string
///    3. the error_code message and a string
///
/// These behaviors are useful when subtyping is required; for example, when a
/// specific library needs an explicit error type. In the example below,
/// PDBError is derived from StringError:
///
///   @code{.cpp}
///   Expected&lt;int&gt; foo() {
///      return llvm::make_error&lt;PDBError&gt;(pdb_error_code::dia_failed_loading,
///                                        &quot;Additional information&quot;);
///   }
///   @endcode
///</doc>
<smbr r='llvm::StringError::ID' t='char'/>
<fun r='_ZN4llvm11StringErrorC1ESt10error_codeRKNS_5TwineE'/>
<fun r='_ZN4llvm11StringErrorC1ERKNS_5TwineESt10error_code'/>
<fun r='_ZNK4llvm11StringError3logERNS_11raw_ostreamE'/>
<fun r='_ZNK4llvm11StringError18convertToErrorCodeEv'/>
<fun r='_ZNK4llvm11StringError10getMessageEv'/>
<mbr r='llvm::StringError::Msg' o='64' t='std::string'/>
<mbr r='llvm::StringError::EC' o='320' t='std::error_code'/>
<mbr r='llvm::StringError::PrintMsgOnly' o='448' t='const bool'/>
