<dec f='llvm/llvm/include/llvm/Analysis/AliasSetTracker.h' l='376' type='void llvm::AliasSetTracker::add(llvm::Value * Ptr, llvm::LocationSize Size, const llvm::AAMDNodes &amp; AAInfo)'/>
<use f='llvm/llvm/include/llvm/LinkAllPasses.h' l='236' u='c' c='_ZN12_GLOBAL__N_116ForcePassLinkingC1Ev'/>
<doc f='llvm/llvm/include/llvm/Analysis/AliasSetTracker.h' l='364'>/// These methods are used to add different types of instructions to the alias
  /// sets. Adding a new instruction can result in one of three actions
  /// happening:
  ///
  ///   1. If the instruction doesn&apos;t alias any other sets, create a new set.
  ///   2. If the instruction aliases exactly one set, add it to the set
  ///   3. If the instruction aliases multiple sets, merge the sets, and add
  ///      the instruction to the result.
  ///
  /// These methods return true if inserting the instruction resulted in the
  /// addition of a new alias set (i.e., the pointer did not alias anything).
  ///</doc>
<doc f='llvm/llvm/include/llvm/Analysis/AliasSetTracker.h' l='376'>// Add a loc</doc>
<def f='llvm/llvm/lib/Analysis/AliasSetTracker.cpp' l='397' ll='400' type='void llvm::AliasSetTracker::add(llvm::Value * Ptr, llvm::LocationSize Size, const llvm::AAMDNodes &amp; AAInfo)'/>
<use f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='511' u='c' c='_ZN12_GLOBAL__N_114AccessAnalysis7addLoadERN4llvm14MemoryLocationEb'/>
<use f='llvm/llvm/lib/Analysis/LoopAccessAnalysis.cpp' l='520' u='c' c='_ZN12_GLOBAL__N_114AccessAnalysis8addStoreERN4llvm14MemoryLocationE'/>
