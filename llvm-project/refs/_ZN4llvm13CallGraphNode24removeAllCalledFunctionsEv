<def f='llvm/llvm/include/llvm/Analysis/CallGraph.h' l='217' ll='222' type='void llvm::CallGraphNode::removeAllCalledFunctions()'/>
<doc f='llvm/llvm/include/llvm/Analysis/CallGraph.h' l='210'>//===---------------------------------------------------------------------
  // Methods to keep a call graph up to date with a function that has been
  // modified
  //

  /// Removes all edges from this CallGraphNode to any functions it
  /// calls.</doc>
<use f='llvm/llvm/lib/Transforms/Coroutines/Coroutines.cpp' l='197' u='c' c='_ZN4llvm4coro15updateCallGraphERNS_8FunctionENS_8ArrayRefIPS1_EERNS_9CallGraphERNS_12CallGraphSCCE'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='729' u='c' c='_ZL15inlineCallsImplRN4llvm12CallGraphSCCERNS_9CallGraphESt8functionIFRNS_15AssumptionCacheERNS_8FunctionEEEPNS_18ProfileSummaryInfoERNS_17TargetLibra5838044'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='786' u='c' c='_ZN4llvm17LegacyInlinerBase19removeDeadFunctionsERNS_9CallGraphEb'/>
