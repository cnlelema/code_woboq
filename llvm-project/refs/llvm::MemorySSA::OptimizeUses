<def f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1261' ll='1296'/>
<size>32</size>
<doc f='llvm/llvm/lib/Analysis/MemorySSA.cpp' l='1254'>/// This class is a batch walker of all MemoryUse&apos;s in the program, and points
/// their defining access at the thing that actually clobbers them.  Because it
/// is a batch walker that touches everything, it does not operate like the
/// other walkers.  This walker is basically performing a top-down SSA renaming
/// pass, where the version stack is used as the cache.  This enables it to be
/// significantly more time and memory efficient than using the regular walker,
/// which is walking bottom-up.</doc>
<fun r='_ZN4llvm9MemorySSA12OptimizeUsesC1EPS0_PNS0_13CachingWalkerINS_14BatchAAResultsEEEPS4_PNS_13DominatorTreeE'/>
<fun r='_ZN4llvm9MemorySSA12OptimizeUses12optimizeUsesEv'/>
<mbr r='llvm::MemorySSA::OptimizeUses::MSSA' o='0' t='llvm::MemorySSA *'/>
<mbr r='llvm::MemorySSA::OptimizeUses::Walker' o='64' t='CachingWalker&lt;llvm::BatchAAResults&gt; *'/>
<mbr r='llvm::MemorySSA::OptimizeUses::AA' o='128' t='llvm::BatchAAResults *'/>
<mbr r='llvm::MemorySSA::OptimizeUses::DT' o='192' t='llvm::DominatorTree *'/>
<fun r='_ZN4llvm9MemorySSA12OptimizeUses12optimizeUsesEv'/>
