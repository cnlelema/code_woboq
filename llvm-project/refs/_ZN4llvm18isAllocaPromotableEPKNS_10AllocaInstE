<dec f='llvm/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h' l='31' type='bool llvm::isAllocaPromotable(const llvm::AllocaInst * AI)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h' l='25'>/// Return true if this alloca is legal for promotion.
///
/// This is true if there are only loads, stores, and lifetime markers
/// (transitively) using this alloca. This also enforces that there is only
/// ever one layer of bitcasts or GEPs between the alloca and the lifetime
/// markers.</doc>
<use f='llvm/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp' l='1321' u='c' c='_ZN12_GLOBAL__N_116AddressSanitizer19isInterestingAllocaERKN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp' l='1039' u='c' c='_ZN12_GLOBAL__N_118HWAddressSanitizer19isInterestingAllocaERKN4llvm10AllocaInstE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Mem2Reg.cpp' l='47' u='c' c='_ZL23promoteMemoryToRegisterRN4llvm8FunctionERNS_13DominatorTreeERNS_15AssumptionCacheE'/>
<def f='llvm/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp' l='64' ll='104' type='bool llvm::isAllocaPromotable(const llvm::AllocaInst * AI)'/>
<use f='llvm/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp' l='543' u='c' c='_ZN12_GLOBAL__N_114PromoteMem2Reg3runEv'/>
