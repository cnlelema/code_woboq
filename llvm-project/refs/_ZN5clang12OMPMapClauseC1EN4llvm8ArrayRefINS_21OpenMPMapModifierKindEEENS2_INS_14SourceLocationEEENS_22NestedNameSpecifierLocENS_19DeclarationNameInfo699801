<def f='llvm/clang/include/clang/AST/OpenMPClause.h' l='4540' ll='4558' type='void clang::OMPMapClause::OMPMapClause(ArrayRef&lt;clang::OpenMPMapModifierKind&gt; MapModifiers, ArrayRef&lt;clang::SourceLocation&gt; MapModifiersLoc, clang::NestedNameSpecifierLoc MapperQualifierLoc, clang::DeclarationNameInfo MapperIdInfo, clang::OpenMPMapClauseKind MapType, bool MapTypeIsImplicit, clang::SourceLocation MapLoc, const clang::OMPVarListLocTy &amp; Locs, const clang::OMPMappableExprListSizeTy &amp; Sizes)'/>
<doc f='llvm/clang/include/clang/AST/OpenMPClause.h' l='4520'>/// Build a clause for \a NumVars listed expressions, \a
  /// NumUniqueDeclarations declarations, \a NumComponentLists total component
  /// lists, and \a NumComponents total expression components.
  ///
  /// \param MapModifiers Map-type-modifiers.
  /// \param MapModifiersLoc Locations of map-type-modifiers.
  /// \param MapperQualifierLoc C++ nested name specifier for the associated
  /// user-defined mapper.
  /// \param MapperIdInfo The identifier of associated user-defined mapper.
  /// \param MapType Map type.
  /// \param MapTypeIsImplicit Map type is inferred implicitly.
  /// \param MapLoc Location of the map type.
  /// \param Locs Locations needed to build a mappable clause. It includes 1)
  /// StartLoc: starting location of the clause (the clause keyword); 2)
  /// LParenLoc: location of &apos;(&apos;; 3) EndLoc: ending location of the clause.
  /// \param Sizes All required sizes to build a mappable clause. It includes 1)
  /// NumVars: number of expressions listed in this clause; 2)
  /// NumUniqueDeclarations: number of unique base declarations in this clause;
  /// 3) NumComponentLists: number of component lists in this clause; and 4)
  /// NumComponents: total number of expression components in the clause.</doc>
