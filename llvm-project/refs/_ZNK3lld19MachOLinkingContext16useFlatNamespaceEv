<def f='llvm/lld/include/lld/ReaderWriter/MachOLinkingContext.h' l='282' type='bool lld::MachOLinkingContext::useFlatNamespace() const'/>
<use f='llvm/lld/lib/Driver/DarwinLdDriver.cpp' l='1001' u='c' c='_ZN3lld6mach_o5parseEN4llvm8ArrayRefIPKcEERNS_19MachOLinkingContextE'/>
<doc f='llvm/lld/include/lld/ReaderWriter/MachOLinkingContext.h' l='272'>/// Whether or not to use flat namespace.
  ///
  /// MachO usually uses a two-level namespace, where each external symbol
  /// referenced by the target is associated with the dylib that will provide
  /// the symbol&apos;s definition at runtime. Using flat namespace overrides this
  /// behavior: the linker searches all dylibs on the command line and all
  /// dylibs those original dylibs depend on, but does not record which dylib
  /// an external symbol came from. At runtime dyld again searches all images
  /// and uses the first definition it finds. In addition, any undefines in
  /// loaded flat_namespace dylibs must be resolvable at build time.</doc>
<use f='llvm/lld/lib/ReaderWriter/MachO/MachONormalizedFileFromAtoms.cpp' l='1131' u='c' c='_ZN12_GLOBAL__N_14Util10addSymbolsERKN3lld4FileERNS1_6mach_o10normalized14NormalizedFileE'/>
<use f='llvm/lld/lib/ReaderWriter/MachO/MachONormalizedFileFromAtoms.cpp' l='1233' u='c' c='_ZN12_GLOBAL__N_14Util18addDependentDylibsERKN3lld4FileERNS1_6mach_o10normalized14NormalizedFileE'/>
<use f='llvm/lld/lib/ReaderWriter/MachO/MachONormalizedFileFromAtoms.cpp' l='1567' u='c' c='_ZN12_GLOBAL__N_14Util9fileFlagsEv'/>
