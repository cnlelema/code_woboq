<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2914' type='clang::OMPClause * clang::Parser::ParseOpenMPClause(clang::OpenMPClauseKind Kind, bool ParseOnly = false)'/>
<doc f='llvm/clang/include/clang/Parse/Parser.h' l='2908'>/// Parses clause without any additional arguments.
  ///
  /// \param Kind Kind of current clause.
  /// \param ParseOnly true to skip the clause&apos;s semantic actions and return
  /// nullptr.
  ///</doc>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1625' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseENS_19OpenMPDirectiveKindENS_16OpenMPClauseKindEb'/>
<use f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1692' u='c' c='_ZN5clang6Parser17ParseOpenMPClauseENS_19OpenMPDirectiveKindENS_16OpenMPClauseKindEb'/>
<def f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1865' ll='1872' type='clang::OMPClause * clang::Parser::ParseOpenMPClause(clang::OpenMPClauseKind Kind, bool ParseOnly = false)'/>
<doc f='llvm/clang/lib/Parse/ParseOpenMP.cpp' l='1839'>/// Parsing of OpenMP clauses like &apos;ordered&apos;.
///
///    ordered-clause:
///         &apos;ordered&apos;
///
///    nowait-clause:
///         &apos;nowait&apos;
///
///    untied-clause:
///         &apos;untied&apos;
///
///    mergeable-clause:
///         &apos;mergeable&apos;
///
///    read-clause:
///         &apos;read&apos;
///
///    threads-clause:
///         &apos;threads&apos;
///
///    simd-clause:
///         &apos;simd&apos;
///
///    nogroup-clause:
///         &apos;nogroup&apos;
///</doc>
