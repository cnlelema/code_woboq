<dec f='llvm/clang/include/clang/Sema/Sema.h' l='4228' type='bool clang::Sema::tryCaptureVariable(clang::VarDecl * Var, clang::SourceLocation Loc, clang::Sema::TryCaptureKind Kind, clang::SourceLocation EllipsisLoc, bool BuildAndDiagnose, clang::QualType &amp; CaptureType, clang::QualType &amp; DeclRefType, const unsigned int *const FunctionScopeIndexToStopAt)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='4195'>/// Try to capture the given variable.
  ///
  /// \param Var The variable to capture.
  ///
  /// \param Loc The location at which the capture occurs.
  ///
  /// \param Kind The kind of capture, which may be implicit (for either a
  /// block or a lambda), or explicit by-value or by-reference (for a lambda).
  ///
  /// \param EllipsisLoc The location of the ellipsis, if one is provided in
  /// an explicit lambda capture.
  ///
  /// \param BuildAndDiagnose Whether we are actually supposed to add the
  /// captures or diagnose errors. If false, this routine merely check whether
  /// the capture can occur without performing the capture itself or complaining
  /// if the variable cannot be captured.
  ///
  /// \param CaptureType Will be set to the type of the field used to capture
  /// this variable in the innermost block or lambda. Only valid when the
  /// variable can be captured.
  ///
  /// \param DeclRefType Will be set to the type of a reference to the capture
  /// from within the current scope. Only valid when the variable can be
  /// captured.
  ///
  /// \param FunctionScopeIndexToStopAt If non-null, it points to the index
  /// of the FunctionScopeInfo stack beyond which we do not attempt to capture.
  /// This is useful when enclosing lambdas must speculatively capture
  /// variables that may or may not be used in certain specializations of
  /// a nested generic lambda.
  ///
  /// \returns true if an error occurred (i.e., the variable cannot be
  /// captured) and false if the capture succeeded.</doc>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='15537' u='c' c='_ZL18MarkVarDeclODRUsedPN5clang7VarDeclENS_14SourceLocationERNS_4SemaEPKj'/>
<def f='llvm/clang/lib/Sema/SemaExpr.cpp' l='15933' ll='16137' type='bool clang::Sema::tryCaptureVariable(clang::VarDecl * Var, clang::SourceLocation ExprLoc, clang::Sema::TryCaptureKind Kind, clang::SourceLocation EllipsisLoc, bool BuildAndDiagnose, clang::QualType &amp; CaptureType, clang::QualType &amp; DeclRefType, const unsigned int *const FunctionScopeIndexToStopAt)'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='16143' u='c' c='_ZN5clang4Sema18tryCaptureVariableEPNS_7VarDeclENS_14SourceLocationENS0_14TryCaptureKindES3_'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='16151' u='c' c='_ZN5clang4Sema21NeedToCaptureVariableEPNS_7VarDeclENS_14SourceLocationE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='16161' u='c' c='_ZN5clang4Sema22getCapturedDeclRefTypeEPNS_7VarDeclENS_14SourceLocationE'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='7484' u='c' c='_ZL57CheckIfAnyEnclosingLambdasMustCaptureAnyPotentialCapturesPN5clang4ExprEPNS_4sema15LambdaScopeInfoERNS_4SemaE'/>
<use f='llvm/clang/lib/Sema/SemaExprCXX.cpp' l='7490' u='c' c='_ZL57CheckIfAnyEnclosingLambdasMustCaptureAnyPotentialCapturesPN5clang4ExprEPNS_4sema15LambdaScopeInfoERNS_4SemaE'/>
<use f='llvm/clang/lib/Sema/SemaLambda.cpp' l='204' u='c' c='_ZN5clang51getStackIndexOfNearestEnclosingCaptureCapableLambdaEN4llvm8ArrayRefIPKNS_4sema17FunctionScopeInfoEEEPNS_7VarDeclERNS_4SemaE'/>
