<dec f='llvm/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h' l='47' type='bool llvm::MCExternalSymbolizer::tryAddingSymbolicOperand(llvm::MCInst &amp; MI, llvm::raw_ostream &amp; CommentStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)'/>
<inh f='llvm/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h' l='67' c='_ZN4llvm12MCSymbolizer24tryAddingSymbolicOperandERNS_6MCInstERNS_11raw_ostreamElmbmm'/>
<def f='llvm/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp' l='34' ll='144' type='bool llvm::MCExternalSymbolizer::tryAddingSymbolicOperand(llvm::MCInst &amp; MI, llvm::raw_ostream &amp; cStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)'/>
<doc f='llvm/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp' l='22'>// This function tries to add a symbolic operand in place of the immediate
// Value in the MCInst. The immediate Value has had any PC adjustment made by
// the caller. If the instruction is a branch instruction then IsBranch is true,
// else false. If the getOpInfo() function was set as part of the
// setupForSymbolicDisassembly() call then that function is called to get any
// symbolic information at the Address for this instruction. If that returns
// non-zero then the symbolic information it returns is used to create an MCExpr
// and that is added as an operand to the MCInst. If getOpInfo() returns zero
// and IsBranch is true then a symbol look up for Value is done and if a symbol
// is found an MCExpr is created with that, else an MCExpr with Value is
// created. This function returns true if it adds an operand to the MCInst and
// false otherwise.</doc>
<ovr f='llvm/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp' l='59' c='_ZN4llvm25AArch64ExternalSymbolizer24tryAddingSymbolicOperandERNS_6MCInstERNS_11raw_ostreamElmbmm'/>
