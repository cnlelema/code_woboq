<dec f='llvm/llvm/include/llvm/Transforms/Utils/IntegerDivision.h' l='62' type='bool llvm::expandDivisionUpTo32Bits(llvm::BinaryOperator * Div)'/>
<def f='llvm/llvm/lib/Transforms/Utils/IntegerDivision.cpp' l='583' ll='624' type='bool llvm::expandDivisionUpTo32Bits(llvm::BinaryOperator * Div)'/>
<doc f='llvm/llvm/lib/Transforms/Utils/IntegerDivision.cpp' l='577'>/// Generate code to divide two integers of bitwidth up to 32 bits. Uses the
/// above routines and extends the inputs/truncates the outputs to operate
/// in 32 bits; that is, these routines are good for targets that have no
/// or very little support for smaller than 32 bit integer arithmetic.
///
/// Replace Div with emulation code.</doc>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/IntegerDivision.h' l='57'>/// Generate code to divide two integers, replacing Div with the generated
  /// code. Uses ExpandDivision with a 32bit Div which makes it useful for
  /// targets with little or no support for less than 32 bit arithmetic.
  ///
  /// Replace Rem with generated code.</doc>
