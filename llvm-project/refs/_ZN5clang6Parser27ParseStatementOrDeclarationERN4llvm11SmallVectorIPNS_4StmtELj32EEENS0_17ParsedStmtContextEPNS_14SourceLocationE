<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1923' type='StmtResult clang::Parser::ParseStatementOrDeclaration(StmtVector &amp; Stmts, clang::Parser::ParsedStmtContext StmtCtx, clang::SourceLocation * TrailingElseLoc = nullptr)'/>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='39' u='c' c='_ZN5clang6Parser14ParseStatementEPNS_14SourceLocationENS0_17ParsedStmtContextE'/>
<def f='llvm/clang/lib/Parse/ParseStmt.cpp' l='94' ll='116' type='StmtResult clang::Parser::ParseStatementOrDeclaration(StmtVector &amp; Stmts, clang::Parser::ParsedStmtContext StmtCtx, clang::SourceLocation * TrailingElseLoc = nullptr)'/>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='958' u='c' c='_ZN5clang6Parser15ConsumeNullStmtERN4llvm11SmallVectorIPNS_4StmtELj32EEE'/>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='1057' u='c' c='_ZN5clang6Parser26ParseCompoundStatementBodyEb'/>
<use f='llvm/clang/lib/Parse/ParseStmt.cpp' l='2355' u='c' c='_ZN5clang6Parser31ParseMicrosoftIfExistsStatementERN4llvm11SmallVectorIPNS_4StmtELj32EEE'/>
<doc f='llvm/clang/lib/Parse/ParseStmt.cpp' l='45'>/// ParseStatementOrDeclaration - Read &apos;statement&apos; or &apos;declaration&apos;.
///       StatementOrDeclaration:
///         statement
///         declaration
///
///       statement:
///         labeled-statement
///         compound-statement
///         expression-statement
///         selection-statement
///         iteration-statement
///         jump-statement
/// [C++]   declaration-statement
/// [C++]   try-block
/// [MS]    seh-try-block
/// [OBC]   objc-throw-statement
/// [OBC]   objc-try-catch-statement
/// [OBC]   objc-synchronized-statement
/// [GNU]   asm-statement
/// [OMP]   openmp-construct             [TODO]
///
///       labeled-statement:
///         identifier &apos;:&apos; statement
///         &apos;case&apos; constant-expression &apos;:&apos; statement
///         &apos;default&apos; &apos;:&apos; statement
///
///       selection-statement:
///         if-statement
///         switch-statement
///
///       iteration-statement:
///         while-statement
///         do-statement
///         for-statement
///
///       expression-statement:
///         expression[opt] &apos;;&apos;
///
///       jump-statement:
///         &apos;goto&apos; identifier &apos;;&apos;
///         &apos;continue&apos; &apos;;&apos;
///         &apos;break&apos; &apos;;&apos;
///         &apos;return&apos; expression[opt] &apos;;&apos;
/// [GNU]   &apos;goto&apos; &apos;*&apos; expression &apos;;&apos;
///
/// [OBC] objc-throw-statement:
/// [OBC]   &apos;@&apos; &apos;throw&apos; expression &apos;;&apos;
/// [OBC]   &apos;@&apos; &apos;throw&apos; &apos;;&apos;
///</doc>
