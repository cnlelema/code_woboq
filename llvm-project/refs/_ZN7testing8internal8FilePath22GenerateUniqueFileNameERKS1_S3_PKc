<dec f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-filepath.h' l='106' type='static testing::internal::FilePath testing::internal::FilePath::GenerateUniqueFileName(const testing::internal::FilePath &amp; directory, const testing::internal::FilePath &amp; base_name, const char * extension)'/>
<doc f='llvm/llvm/utils/unittest/googletest/include/gtest/internal/gtest-filepath.h' l='98'>// Returns a pathname for a file that does not currently exist. The pathname
  // will be directory/base_name.extension or
  // directory/base_name_&lt;number&gt;.extension if directory/base_name.extension
  // already exists. The number will be incremented until a pathname is found
  // that does not already exist.
  // Examples: &apos;dir/foo_test.xml&apos; or &apos;dir/foo_test_1.xml&apos;.
  // There could be a race condition if two or more processes are calling this
  // function at the same time -- they could both pick the same filename.</doc>
<use f='llvm/llvm/utils/unittest/googletest/src/gtest.cc' l='451' u='c' c='_ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileEv'/>
<def f='llvm/llvm/utils/unittest/googletest/src/gtest-filepath.cc' l='286' ll='295' type='static testing::internal::FilePath testing::internal::FilePath::GenerateUniqueFileName(const testing::internal::FilePath &amp; directory, const testing::internal::FilePath &amp; base_name, const char * extension)'/>
<doc f='llvm/llvm/utils/unittest/googletest/src/gtest-filepath.cc' l='278'>// Returns a pathname for a file that does not currently exist. The pathname
// will be directory/base_name.extension or
// directory/base_name_&lt;number&gt;.extension if directory/base_name.extension
// already exists. The number will be incremented until a pathname is found
// that does not already exist.
// Examples: &apos;dir/foo_test.xml&apos; or &apos;dir/foo_test_1.xml&apos;.
// There could be a race condition if two or more processes are calling this
// function at the same time -- they could both pick the same filename.</doc>
