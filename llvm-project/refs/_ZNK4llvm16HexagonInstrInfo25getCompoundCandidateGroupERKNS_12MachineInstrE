<dec f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.h' l='447' type='HexagonII::CompoundGroup llvm::HexagonInstrInfo::getCompoundCandidateGroup(const llvm::MachineInstr &amp; MI) const'/>
<def f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3282' ll='3367' type='HexagonII::CompoundGroup llvm::HexagonInstrInfo::getCompoundCandidateGroup(const llvm::MachineInstr &amp; MI) const'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3372' u='c' c='_ZNK4llvm16HexagonInstrInfo17getCompoundOpcodeERKNS_12MachineInstrES3_'/>
<use f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3373' u='c' c='_ZNK4llvm16HexagonInstrInfo17getCompoundOpcodeERKNS_12MachineInstrES3_'/>
<doc f='llvm/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp' l='3280'>// See if instruction could potentially be a duplex candidate.
// If so, return its group. Zero otherwise.</doc>
