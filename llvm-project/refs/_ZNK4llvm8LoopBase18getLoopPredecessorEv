<dec f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='298' type='BlockT * llvm::LoopBase::getLoopPredecessor() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfo.h' l='294'>/// If the given loop&apos;s header has exactly one unique predecessor outside the
  /// loop, return it. Otherwise return null.
  ///  This is less strict that the loop &quot;preheader&quot; concept, which requires
  /// the predecessor to have exactly one successor.</doc>
<use f='llvm/llvm/include/llvm/Analysis/LoopInfoImpl.h' l='176' u='c' c='_ZNK4llvm8LoopBase16getLoopPreheaderEv'/>
<def f='llvm/llvm/include/llvm/Analysis/LoopInfoImpl.h' l='200' ll='219' type='BlockT * llvm::LoopBase::getLoopPredecessor() const'/>
<doc f='llvm/llvm/include/llvm/Analysis/LoopInfoImpl.h' l='195'>/// getLoopPredecessor - If the given loop&apos;s header has exactly one unique
/// predecessor outside the loop, return it. Otherwise return null.
/// This is less strict that the loop &quot;preheader&quot; concept, which requires
/// the predecessor to have exactly one successor.
///</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='7531' u='c' c='_ZN4llvm15ScalarEvolution28computeShiftCompareExitLimitEPNS_5ValueES2_PKNS_4LoopENS_7CmpInst9PredicateE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='8808' u='c' c='_ZN4llvm15ScalarEvolution38getPredecessorWithUniqueSuccessorForBBEPNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='9586' u='c' c='_ZN4llvm15ScalarEvolution24isLoopEntryGuardedByCondEPKNS_4LoopENS_7CmpInst9PredicateEPKNS_4SCEVES8_'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolution.cpp' l='10030' u='c' c='_ZN4llvm15ScalarEvolution17isImpliedViaMergeENS_7CmpInst9PredicateEPKNS_4SCEVES5_S5_S5_j'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='295' u='c' c='_ZL30LoopIsOuterMostWithPredecessorPN4llvm11MachineLoopE'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='299' u='c' c='_ZL30LoopIsOuterMostWithPredecessorPN4llvm11MachineLoopE'/>
<use f='llvm/llvm/lib/CodeGen/MachineLICM.cpp' l='1515' u='c' c='_ZN12_GLOBAL__N_115MachineLICMBase15getCurPreheaderEv'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCLoopPreIncPrep.cpp' l='191' u='c' c='_ZN12_GLOBAL__N_117PPCLoopPreIncPrep15alreadyPreparedEPN4llvm4LoopEPNS1_11InstructionEPKNS1_4SCEVEPKNS1_12SCEVConstantE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCLoopPreIncPrep.cpp' l='328' u='c' c='_ZN12_GLOBAL__N_117PPCLoopPreIncPrep9runOnLoopEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='831' u='c' c='_ZN4llvm17GuardWideningPass3runERNS_4LoopERNS_15AnalysisManagerIS1_JRNS_27LoopStandardAnalysisResultsEEEES5_RNS_10LPMUpdaterE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/GuardWidening.cpp' l='892' u='c' c='_ZN12_GLOBAL__N_127LoopGuardWideningLegacyPass9runOnLoopEPN4llvm4LoopERNS1_13LPPassManagerE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='299' u='c' c='_ZL20getInductionVariablePN4llvm4LoopEPNS_15ScalarEvolutionE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopInterchange.cpp' l='682' u='c' c='_ZN12_GLOBAL__N_123LoopInterchangeLegality26findInductionAndReductionsEPN4llvm4LoopERNS1_11SmallVectorIPNS1_7PHINodeELj8EEES3_'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp' l='211' u='c' c='_ZN12_GLOBAL__N_114SimplifyIndvar25makeIVComparisonInvariantEPN4llvm8ICmpInstEPNS1_5ValueE'/>
