<dec f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1118'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1149' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1152' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1156' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1159' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1162' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1165' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1171' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1176' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1179' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1189' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1194' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1199' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1204' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1209' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1216' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1223' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1227' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1235' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1239' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1243' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1264' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1265' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1267' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1270' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1275' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1279' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1283' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1287' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1292' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1293' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1294' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1295' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1298' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1303' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1310' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1312' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1314' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1317' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1320' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1327' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1331' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1341' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1344' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1346' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1348' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1357' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1360' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1362' u='c'/>
<use f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1364' u='w'/>
<doc f='llvm/clang/include/clang/AST/RecursiveASTVisitor.h' l='1111'>// ----------------- TypeLoc traversal -----------------

// This macro makes available a variable TL, the passed-in TypeLoc.
// If requested, it calls WalkUpFrom* for the Type in the given TypeLoc,
// in addition to WalkUpFrom* for the TypeLoc itself, such that existing
// clients that override the WalkUpFrom*Type() and/or Visit*Type() methods
// continue to work.</doc>
