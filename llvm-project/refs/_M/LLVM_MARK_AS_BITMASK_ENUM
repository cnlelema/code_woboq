<dec f='llvm/llvm/include/llvm/ADT/BitmaskEnum.h' l='41'/>
<use f='llvm/llvm/include/llvm/ExecutionEngine/JITSymbol.h' l='68' u='c'/>
<doc f='llvm/llvm/include/llvm/ADT/BitmaskEnum.h' l='18'>/// LLVM_MARK_AS_BITMASK_ENUM lets you opt in an individual enum type so you can
/// perform bitwise operations on it without putting static_cast everywhere.
///
/// \code
///   enum MyEnum {
///     E1 = 1, E2 = 2, E3 = 4, E4 = 8,
///     LLVM_MARK_AS_BITMASK_ENUM(/* LargestValue = */ E4)
///   };
///
///   void Foo() {
///     MyEnum A = (E1 | E2) &amp; E3 ^ ~E4; // Look, ma: No static_cast!
///   }
/// \endcode
///
/// Normally when you do a bitwise operation on an enum value, you get back an
/// instance of the underlying type (e.g. int).  But using this macro, bitwise
/// ops on your enum will return you back instances of the enum.  This is
/// particularly useful for enums which represent a combination of flags.
///
/// The parameter to LLVM_MARK_AS_BITMASK_ENUM should be the largest individual
/// value in your enum.
///
/// All of the enum&apos;s values must be non-negative.</doc>
<use f='llvm/llvm/include/llvm/IR/DebugInfoMetadata.h' l='164' u='c'/>
<use f='llvm/llvm/include/llvm/IR/DebugInfoMetadata.h' l='1614' u='c'/>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='460' u='c'/>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='479' u='c'/>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntime.cpp' l='7042' u='c'/>
<use f='llvm/clang/lib/CodeGen/CGOpenMPRuntimeNVPTX.cpp' l='1852' u='c'/>
<use f='llvm/llvm/include/llvm/CodeGen/MachineMemOperand.h' l='156' u='c'/>
<use f='llvm/llvm/include/llvm/Support/BinaryStream.h' l='25' u='c'/>
<use f='llvm/clang/include/clang/Parse/Parser.h' l='298' u='c'/>
<use f='llvm/clang/include/clang/Parse/Parser.h' l='393' u='c'/>
<use f='llvm/llvm/include/llvm/DebugInfo/PDB/Native/RawConstants.h' l='48' u='c'/>
<use f='llvm/llvm/include/llvm/DebugInfo/PDB/Native/RawConstants.h' l='110' u='c'/>
<use f='llvm/llvm/include/llvm/DebugInfo/PDB/IPDBRawSymbol.h' l='36' u='c'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp' l='59' u='c'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp' l='98' u='c'/>
<use f='llvm/llvm/include/llvm/TextAPI/MachO/Symbol.h' l='40' u='c'/>
<use f='llvm/llvm/include/llvm/TextAPI/MachO/InterfaceFile.h' l='80' u='c'/>
<use f='llvm/llvm/lib/TextAPI/MachO/TextStub.cpp' l='184' u='c'/>
<use f='llvm/llvm/tools/llvm-objcopy/CopyConfig.h' l='63' u='c'/>
<use f='llvm/llvm/unittests/ADT/BitmaskEnumTest.cpp' l='21' u='c'/>
<use f='llvm/llvm/unittests/ADT/BitmaskEnumTest.cpp' l='90' u='c'/>
<use f='llvm/llvm/unittests/ADT/BitmaskEnumTest.cpp' l='100' u='c'/>
<use f='llvm/llvm/unittests/ADT/BitmaskEnumTest.cpp' l='121' u='c'/>
<use f='llvm/llvm/unittests/Support/YAMLIOTest.cpp' l='587' u='c'/>
