<dec f='llvm/llvm/include/llvm/CodeGen/MachineRegisterInfo.h' l='701' type='bool llvm::MachineRegisterInfo::constrainRegAttrs(unsigned int Reg, unsigned int ConstrainingReg, unsigned int MinNumRegs = 0)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineRegisterInfo.h' l='690'>/// Constrain the register class or the register bank of the virtual register
  /// \p Reg (and low-level type) to be a common subclass or a common bank of
  /// both registers provided respectively (and a common low-level type). Do
  /// nothing if any of the attributes (classes, banks, or low-level types) of
  /// the registers are deemed incompatible, or if the resulting register will
  /// have a class smaller than before and of size less than \p MinNumRegs.
  /// Return true if such register attributes exist, false otherwise.
  ///
  /// \note Use this method instead of constrainRegClass and
  /// RegisterBankInfo::constrainGenericRegister everywhere but SelectionDAG
  /// ISel / FastISel and GlobalISel&apos;s InstructionSelect pass respectively.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp' l='29' u='c' c='_ZNK4llvm14CombinerHelper14replaceRegWithERNS_19MachineRegisterInfoEjj'/>
<use f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='187' u='c' c='_ZN12_GLOBAL__N_110MachineCSE29PerformTrivialCopyPropagationEPN4llvm12MachineInstrEPNS1_17MachineBasicBlockE'/>
<use f='llvm/llvm/lib/CodeGen/MachineCSE.cpp' l='620' u='c' c='_ZN12_GLOBAL__N_110MachineCSE15ProcessBlockCSEEPN4llvm17MachineBasicBlockE'/>
<def f='llvm/llvm/lib/CodeGen/MachineRegisterInfo.cpp' l='91' ll='119' type='bool llvm::MachineRegisterInfo::constrainRegAttrs(unsigned int Reg, unsigned int ConstrainingReg, unsigned int MinNumRegs = 0)'/>
