<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='379' type='bool llvm::LLParser::ParseOptionalResByArg(std::map&lt;std::vector&lt;uint64_t&gt;, WholeProgramDevirtResolution::ByArg&gt; &amp; ResByArg)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='7657' u='c' c='_ZN4llvm8LLParser11ParseWpdResERNS_28WholeProgramDevirtResolutionE'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='7679' ll='7754' type='bool llvm::LLParser::ParseOptionalResByArg(std::map&lt;std::vector&lt;uint64_t&gt;, WholeProgramDevirtResolution::ByArg&gt; &amp; ResByArg)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='7672'>/// OptionalResByArg
///   ::= &apos;wpdRes&apos; &apos;:&apos; &apos;(&apos; ResByArg[, ResByArg]* &apos;)&apos;
/// ResByArg ::= Args &apos;,&apos; &apos;byArg&apos; &apos;:&apos; &apos;(&apos; &apos;kind&apos; &apos;:&apos;
///                ( &apos;indir&apos; | &apos;uniformRetVal&apos; | &apos;UniqueRetVal&apos; |
///                  &apos;virtualConstProp&apos; )
///                [&apos;,&apos; &apos;info&apos; &apos;:&apos; UInt64]? [&apos;,&apos; &apos;byte&apos; &apos;:&apos; UInt32]?
///                [&apos;,&apos; &apos;bit&apos; &apos;:&apos; UInt32]? &apos;)&apos;</doc>
