<dec f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='46' type='void llvm::DivergenceAnalysis::DivergenceAnalysis(const llvm::Function &amp; F, const llvm::Loop * RegionLoop, const llvm::DominatorTree &amp; DT, const llvm::LoopInfo &amp; LI, llvm::SyncDependenceAnalysis &amp; SDA, bool IsLCSSAForm)'/>
<def f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='94' ll='98' type='void llvm::DivergenceAnalysis::DivergenceAnalysis(const llvm::Function &amp; F, const llvm::Loop * RegionLoop, const llvm::DominatorTree &amp; DT, const llvm::LoopInfo &amp; LI, llvm::SyncDependenceAnalysis &amp; SDA, bool IsLCSSAForm)'/>
<use f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='431' u='c' c='_ZN4llvm21GPUDivergenceAnalysisC1ERNS_8FunctionERKNS_13DominatorTreeERKNS_17PostDominatorTreeERKNS_8LoopInfoERKNS_19TargetTransformInfoE'/>
<doc f='llvm/llvm/lib/Analysis/DivergenceAnalysis.cpp' l='93'>// class DivergenceAnalysis</doc>
<doc f='llvm/llvm/include/llvm/Analysis/DivergenceAnalysis.h' l='39'>/// \brief This instance will analyze the whole function \p F or the loop \p
  /// RegionLoop.
  ///
  /// \param RegionLoop if non-null the analysis is restricted to \p RegionLoop.
  /// Otherwise the whole function is analyzed.
  /// \param IsLCSSAForm whether the analysis may assume that the IR in the
  /// region in in LCSSA form.</doc>
<use f='llvm/llvm/unittests/Analysis/DivergenceAnalysisTest.cpp' l='62' u='c' c='_ZN4llvm12_GLOBAL__N_122DivergenceAnalysisTest7buildDAERNS_8FunctionEb'/>
