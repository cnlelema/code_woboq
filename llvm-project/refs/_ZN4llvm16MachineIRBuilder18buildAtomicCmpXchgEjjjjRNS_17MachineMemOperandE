<dec f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='933' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildAtomicCmpXchg(unsigned int OldValRes, unsigned int Addr, unsigned int CmpVal, unsigned int NewVal, llvm::MachineMemOperand &amp; MMO)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h' l='919'>/// Build and insert `OldValRes&lt;def&gt; = G_ATOMIC_CMPXCHG Addr, CmpVal, NewVal,
  /// MMO`.
  ///
  /// Atomically replace the value at \p Addr with \p NewVal if it is currently
  /// \p CmpVal otherwise leaves it unchanged. Puts the original value from \p
  /// Addr in \p Res.
  ///
  /// \pre setBasicBlock or setMI must have been called.
  /// \pre \p OldValRes must be a generic virtual register of scalar type.
  /// \pre \p Addr must be a generic virtual register with pointer type.
  /// \pre \p OldValRes, \p CmpVal, and \p NewVal must be generic virtual
  ///      registers of the same type.
  ///
  /// \return a MachineInstrBuilder for the newly created instruction.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp' l='1493' u='c' c='_ZN4llvm15LegalizerHelper5lowerERNS_12MachineInstrEjNS_3LLTE'/>
<def f='llvm/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp' l='727' ll='750' type='llvm::MachineInstrBuilder llvm::MachineIRBuilder::buildAtomicCmpXchg(unsigned int OldValRes, unsigned int Addr, unsigned int CmpVal, unsigned int NewVal, llvm::MachineMemOperand &amp; MMO)'/>
