<dec f='llvm/clang/include/clang/Lex/LiteralSupport.h' l='221' type='void clang::StringLiteralParser::StringLiteralParser(ArrayRef&lt;clang::Token&gt; StringToks, clang::Preprocessor &amp; PP, bool Complain = true)'/>
<use f='llvm/clang/lib/Frontend/FrontendAction.cpp' l='269' u='c' c='_ZL20ReadOriginalFileNameRN5clang16CompilerInstanceERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb'/>
<def f='llvm/clang/lib/Lex/LiteralSupport.cpp' l='1453' ll='1461' type='void clang::StringLiteralParser::StringLiteralParser(ArrayRef&lt;clang::Token&gt; StringToks, clang::Preprocessor &amp; PP, bool Complain = true)'/>
<doc f='llvm/clang/lib/Lex/LiteralSupport.cpp' l='1399'>/// \verbatim
///       string-literal: [C++0x lex.string]
///         encoding-prefix &quot; [s-char-sequence] &quot;
///         encoding-prefix R raw-string
///       encoding-prefix:
///         u8
///         u
///         U
///         L
///       s-char-sequence:
///         s-char
///         s-char-sequence s-char
///       s-char:
///         any member of the source character set except the double-quote &quot;,
///           backslash \, or new-line character
///         escape-sequence
///         universal-character-name
///       raw-string:
///         &quot; d-char-sequence ( r-char-sequence ) d-char-sequence &quot;
///       r-char-sequence:
///         r-char
///         r-char-sequence r-char
///       r-char:
///         any member of the source character set, except a right parenthesis )
///           followed by the initial d-char-sequence (which may be empty)
///           followed by a double quote &quot;.
///       d-char-sequence:
///         d-char
///         d-char-sequence d-char
///       d-char:
///         any member of the basic source character set except:
///           space, the left parenthesis (, the right parenthesis ),
///           the backslash \, and the control characters representing horizontal
///           tab, vertical tab, form feed, and newline.
///       escape-sequence: [C++0x lex.ccon]
///         simple-escape-sequence
///         octal-escape-sequence
///         hexadecimal-escape-sequence
///       simple-escape-sequence:
///         one of \&apos; \&quot; \? \\ \a \b \f \n \r \t \v
///       octal-escape-sequence:
///         \ octal-digit
///         \ octal-digit octal-digit
///         \ octal-digit octal-digit octal-digit
///       hexadecimal-escape-sequence:
///         \x hexadecimal-digit
///         hexadecimal-escape-sequence hexadecimal-digit
///       universal-character-name:
///         \u hex-quad
///         \U hex-quad hex-quad
///       hex-quad:
///         hex-digit hex-digit hex-digit hex-digit
/// \endverbatim
///</doc>
<use f='llvm/clang/lib/Lex/PPDirectives.cpp' l='1154' u='c' c='_ZN5clang12Preprocessor19HandleLineDirectiveEv'/>
<use f='llvm/clang/lib/Lex/PPDirectives.cpp' l='1304' u='c' c='_ZN5clang12Preprocessor20HandleDigitDirectiveERNS_5TokenE'/>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='735' u='c' c='_ZL22LexModuleNameComponentRN5clang12PreprocessorERNS_5TokenERSt4pairIPNS_14IdentifierInfoENS_14SourceLocationEEb'/>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='1054' u='c' c='_ZN12_GLOBAL__N_118PragmaDebugHandler12HandlePragmaERN5clang12PreprocessorENS1_16PragmaIntroducerERNS1_5TokenE'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='1322' u='c' c='_ZN5clang12Preprocessor22FinishLexStringLiteralERNS_5TokenERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2497' u='c' c='_ZN5clang6Parser26ParseUnqualifiedIdOperatorERNS_12CXXScopeSpecEbNS_9OpaquePtrINS_8QualTypeEEERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Sema/SemaExpr.cpp' l='1648' u='c' c='_ZN5clang4Sema18ActOnStringLiteralEN4llvm8ArrayRefINS_5TokenEEEPNS_5ScopeE'/>
