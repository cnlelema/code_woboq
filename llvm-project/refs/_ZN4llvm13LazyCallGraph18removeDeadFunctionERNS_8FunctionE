<dec f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='1055' type='void llvm::LazyCallGraph::removeDeadFunction(llvm::Function &amp; F)'/>
<doc f='llvm/llvm/include/llvm/Analysis/LazyCallGraph.h' l='1035'>///@}

  ///@{
  /// \name General Mutation API
  ///
  /// There are a very limited set of mutations allowed on the graph as a whole
  /// once SCCs have started to be formed. These routines have strict contracts
  /// but may be called at any point.

  /// Remove a dead function from the call graph (typically to delete it).
  ///
  /// Note that the function must have an empty use list, and the call graph
  /// must be up-to-date prior to calling this. That means it is by itself in
  /// a maximal SCC which is by itself in a maximal RefSCC, etc. No structural
  /// changes result from calling this routine other than potentially removing
  /// entry points into the call graph.
  ///
  /// If SCC formation has begun, this function must not be part of the current
  /// DFS in order to call this safely. Typically, the function will have been
  /// fully visited by the DFS prior to calling this routine.</doc>
<def f='llvm/llvm/lib/Analysis/LazyCallGraph.cpp' l='1491' ll='1553' type='void llvm::LazyCallGraph::removeDeadFunction(llvm::Function &amp; F)'/>
<use f='llvm/llvm/lib/Transforms/IPO/Inliner.cpp' l='1214' u='c' c='_ZN4llvm11InlinerPass3runERNS_13LazyCallGraph3SCCERNS_15AnalysisManagerIS2_JRS1_EEES5_RNS_17CGSCCUpdateResultE'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='1185' u='c' c='_ZN12_GLOBAL__N_146LazyCallGraphTest_InlineAndDeleteFunction_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/Analysis/LazyCallGraphTest.cpp' l='2161' u='c' c='_ZN12_GLOBAL__N_153LazyCallGraphTest_RemoveFunctionWithSpurriousRef_Test8TestBodyEv'/>
