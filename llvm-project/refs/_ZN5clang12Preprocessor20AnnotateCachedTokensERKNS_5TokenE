<def f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1492' ll='1496' type='void clang::Preprocessor::AnnotateCachedTokens(const clang::Token &amp; Tok)'/>
<doc f='llvm/clang/include/clang/Lex/Preprocessor.h' l='1484'>/// We notify the Preprocessor that if it is caching tokens (because
  /// backtrack is enabled) it should replace the most recent cached tokens
  /// with the given annotation token. This function has no effect if
  /// backtracking is not enabled.
  ///
  /// Note that the use of this function is just for optimization, so that the
  /// cached tokens doesn&apos;t get re-parsed and re-resolved after a backtrack is
  /// invoked.</doc>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1052' u='c' c='_ZN5clang6Parser33AnnotateExistingDecltypeSpecifierERKNS_8DeclSpecENS_14SourceLocationES4_'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='997' u='c' c='_ZN5clang6Parser21ParseLambdaIntroducerERNS_16LambdaIntroducerEPNS0_30LambdaIntroducerTentativeParseE'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1095' u='c' c='_ZN5clang6Parser23AnnotateTemplateIdTokenENS_9OpaquePtrINS_12TemplateNameEEENS_16TemplateNameKindERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEb'/>
<use f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1143' u='c' c='_ZN5clang6Parser29AnnotateTemplateIdTokenAsTypeEb'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1557' u='c' c='_ZN5clang6Parser18AnnotateScopeTokenERNS_12CXXScopeSpecEb'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1671' u='c' c='_ZN5clang6Parser15TryAnnotateNameEbPNS_27CorrectionCandidateCallbackE'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1681' u='c' c='_ZN5clang6Parser15TryAnnotateNameEbPNS_27CorrectionCandidateCallbackE'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1846' u='c' c='_ZN5clang6Parser27TryAnnotateTypeOrScopeTokenEv'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1905' u='c' c='_ZN5clang6Parser41TryAnnotateTypeOrScopeTokenAfterScopeSpecERNS_12CXXScopeSpecEb'/>
