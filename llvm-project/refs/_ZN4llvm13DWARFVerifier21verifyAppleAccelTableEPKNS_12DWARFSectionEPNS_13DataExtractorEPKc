<dec f='llvm/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h' l='253' type='unsigned int llvm::DWARFVerifier::verifyAppleAccelTable(const llvm::DWARFSection * AccelSection, llvm::DataExtractor * StrData, const char * SectionName)'/>
<doc f='llvm/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h' l='236'>/// Verify that an Apple-style accelerator table is valid.
  ///
  /// This function currently checks that:
  /// - The fixed part of the header fits in the section
  /// - The size of the section is as large as what the header describes
  /// - There is at least one atom
  /// - The form for each atom is valid
  /// - The tag for each DIE in the table is valid
  /// - The buckets have a valid index, or they are empty
  /// - Each hashdata offset is valid
  /// - Each DIE is valid
  ///
  /// \param AccelSection pointer to the section containing the acceleration table
  /// \param StrData pointer to the string section
  /// \param SectionName the name of the table we&apos;re verifying
  ///
  /// \returns The number of errors occurred during verification</doc>
<def f='llvm/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp' l='803' ll='905' type='unsigned int llvm::DWARFVerifier::verifyAppleAccelTable(const llvm::DWARFSection * AccelSection, llvm::DataExtractor * StrData, const char * SectionName)'/>
<use f='llvm/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp' l='1461' u='c' c='_ZN4llvm13DWARFVerifier17handleAccelTablesEv'/>
<use f='llvm/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp' l='1464' u='c' c='_ZN4llvm13DWARFVerifier17handleAccelTablesEv'/>
<use f='llvm/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp' l='1467' u='c' c='_ZN4llvm13DWARFVerifier17handleAccelTablesEv'/>
<use f='llvm/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp' l='1470' u='c' c='_ZN4llvm13DWARFVerifier17handleAccelTablesEv'/>
