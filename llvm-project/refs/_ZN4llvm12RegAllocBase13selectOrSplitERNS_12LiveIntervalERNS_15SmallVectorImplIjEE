<dec f='llvm/llvm/lib/CodeGen/RegAllocBase.h' l='104' type='unsigned int llvm::RegAllocBase::selectOrSplit(llvm::LiveInterval &amp; VirtReg, SmallVectorImpl&lt;unsigned int&gt; &amp; splitLVRs)'/>
<use f='llvm/llvm/lib/CodeGen/RegAllocBase.cpp' l='113' u='c' c='_ZN4llvm12RegAllocBase16allocatePhysRegsEv'/>
<doc f='llvm/llvm/lib/CodeGen/RegAllocBase.h' l='100'>// A RegAlloc pass should override this to provide the allocation heuristics.
  // Each call must guarantee forward progess by returning an available PhysReg
  // or new set of split live virtual registers. It is up to the splitter to
  // converge quickly toward fully spilled live ranges.</doc>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocBasic.cpp' l='256' c='_ZN12_GLOBAL__N_17RABasic13selectOrSplitERN4llvm12LiveIntervalERNS1_15SmallVectorImplIjEE'/>
<ovr f='llvm/llvm/lib/CodeGen/RegAllocGreedy.cpp' l='2773' c='_ZN12_GLOBAL__N_18RAGreedy13selectOrSplitERN4llvm12LiveIntervalERNS1_15SmallVectorImplIjEE'/>
