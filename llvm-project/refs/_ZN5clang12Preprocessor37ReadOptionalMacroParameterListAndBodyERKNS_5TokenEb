<dec f='llvm/clang/include/clang/Lex/Preprocessor.h' l='2043' type='clang::MacroInfo * clang::Preprocessor::ReadOptionalMacroParameterListAndBody(const clang::Token &amp; MacroNameTok, bool ImmediatelyAfterHeaderGuard)'/>
<doc f='llvm/clang/include/clang/Lex/Preprocessor.h' l='2034'>/// ReadOptionalMacroParameterListAndBody - This consumes all (i.e. the
  /// entire line) of the macro&apos;s tokens and adds them to MacroInfo, and while
  /// doing so performs certain validity checks including (but not limited to):
  ///   - # (stringization) is followed by a macro parameter
  /// \param MacroNameTok - Token that represents the macro name
  /// \param ImmediatelyAfterHeaderGuard - Macro follows an #ifdef header guard
  ///
  ///  Either returns a pointer to a MacroInfo object OR emits a diagnostic and
  ///  returns a nullptr if an invalid sequence of tokens is encountered.</doc>
<def f='llvm/clang/lib/Lex/PPDirectives.cpp' l='2392' ll='2615' type='clang::MacroInfo * clang::Preprocessor::ReadOptionalMacroParameterListAndBody(const clang::Token &amp; MacroNameTok, const bool ImmediatelyAfterHeaderGuard)'/>
<use f='llvm/clang/lib/Lex/PPDirectives.cpp' l='2634' u='c' c='_ZN5clang12Preprocessor21HandleDefineDirectiveERNS_5TokenEb'/>
<doc f='llvm/clang/lib/Lex/PPDirectives.cpp' l='2384'>// ReadOptionalMacroParameterListAndBody - This consumes all (i.e. the
// entire line) of the macro&apos;s tokens and adds them to MacroInfo, and while
// doing so performs certain validity checks including (but not limited to):
//   - # (stringization) is followed by a macro parameter
//
//  Returns a nullptr if an invalid sequence of tokens is encountered or returns
//  a pointer to a MacroInfo object.</doc>
