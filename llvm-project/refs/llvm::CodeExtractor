<def f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='52' ll='174'/>
<size>152</size>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/CodeExtractor.h' l='39'>/// Utility class for extracting code into a new function.
  ///
  /// This utility provides a simple interface for extracting some sequence of
  /// code into its own function, replacing it with a call to that function. It
  /// also provides various methods to query about the nature and result of
  /// such a transformation.
  ///
  /// The rough algorithm used is:
  /// 1) Find both the inputs and outputs for the extracted region.
  /// 2) Pass the inputs as arguments, remapping them within the extracted
  ///    function to arguments.
  /// 3) Add allocas for any scalar outputs, adding all of the outputs&apos; allocas
  ///    as arguments, and inserting stores to the arguments for any scalars.</doc>
<mbr r='llvm::CodeExtractor::DT' o='0' t='llvm::DominatorTree *const'/>
<mbr r='llvm::CodeExtractor::AggregateArgs' o='64' t='const bool'/>
<mbr r='llvm::CodeExtractor::BFI' o='128' t='llvm::BlockFrequencyInfo *'/>
<mbr r='llvm::CodeExtractor::BPI' o='192' t='llvm::BranchProbabilityInfo *'/>
<mbr r='llvm::CodeExtractor::AC' o='256' t='llvm::AssumptionCache *'/>
<mbr r='llvm::CodeExtractor::AllowVarArgs' o='320' t='bool'/>
<mbr r='llvm::CodeExtractor::Blocks' o='384' t='SetVector&lt;llvm::BasicBlock *&gt;'/>
<mbr r='llvm::CodeExtractor::NumExitBlocks' o='832' t='unsigned int'/>
<mbr r='llvm::CodeExtractor::RetTy' o='896' t='llvm::Type *'/>
<mbr r='llvm::CodeExtractor::Suffix' o='960' t='std::string'/>
<fun r='_ZN4llvm13CodeExtractorC1ENS_8ArrayRefIPNS_10BasicBlockEEEPNS_13DominatorTreeEbPNS_18BlockFrequencyInfoEPNS_21BranchProbabilityInfoEPNS_15AssumptionCa14458893'/>
<fun r='_ZN4llvm13CodeExtractorC1ERNS_13DominatorTreeERNS_4LoopEbPNS_18BlockFrequencyInfoEPNS_21BranchProbabilityInfoEPNS_15AssumptionCacheENSt7__cxx1112basic639635'/>
<fun r='_ZN4llvm13CodeExtractor17extractCodeRegionEv'/>
<fun r='_ZNK4llvm13CodeExtractor10isEligibleEv'/>
<fun r='_ZNK4llvm13CodeExtractor17findInputsOutputsERNS_9SetVectorIPNS_5ValueESt6vectorIS3_SaIS3_EENS_8DenseSetIS3_NS_12DenseMapInfoIS3_EEEEEESC_RKSB_'/>
<fun r='_ZNK4llvm13CodeExtractor34isLegalToShrinkwrapLifetimeMarkersEPNS_11InstructionE'/>
<fun r='_ZNK4llvm13CodeExtractor11findAllocasERNS_9SetVectorIPNS_5ValueESt6vectorIS3_SaIS3_EENS_8DenseSetIS3_NS_12DenseMapInfoIS3_EEEEEESC_RPNS_10BasicBlockE'/>
<fun r='_ZN4llvm13CodeExtractor28findOrCreateBlockForHoistingEPNS_10BasicBlockE'/>
<fun r='_ZN4llvm13CodeExtractor25severSplitPHINodesOfEntryERPNS_10BasicBlockE'/>
<fun r='_ZN4llvm13CodeExtractor25severSplitPHINodesOfExitsERKNS_15SmallPtrSetImplIPNS_10BasicBlockEEE'/>
<fun r='_ZN4llvm13CodeExtractor17splitReturnBlocksEv'/>
<fun r='_ZN4llvm13CodeExtractor17constructFunctionERKNS_9SetVectorIPNS_5ValueESt6vectorIS3_SaIS3_EENS_8DenseSetIS3_NS_12DenseMapInfoIS3_EEEEEESD_PNS_10BasicBl12867068'/>
<fun r='_ZN4llvm13CodeExtractor18moveCodeToFunctionEPNS_8FunctionE'/>
<fun r='_ZN4llvm13CodeExtractor33calculateNewCallTerminatorWeightsEPNS_10BasicBlockERNS_8DenseMapIS2_NS_14BlockFrequencyENS_12DenseMapInfoIS2_EENS_6detail12De2699329'/>
<fun r='_ZN4llvm13CodeExtractor26emitCallAndSwitchStatementEPNS_8FunctionEPNS_10BasicBlockERNS_9SetVectorIPNS_5ValueESt6vectorIS7_SaIS7_EENS_8DenseSetIS7_NS_13687995'/>
