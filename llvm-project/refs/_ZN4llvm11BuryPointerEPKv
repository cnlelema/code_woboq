<dec f='llvm/llvm/include/llvm/Support/BuryPointer.h' l='22' type='void llvm::BuryPointer(const void * Ptr)'/>
<use f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='399' u='c' c='_ZN5clang16CompilerInstance23resetAndLeakFileManagerEv'/>
<use f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='419' u='c' c='_ZN5clang16CompilerInstance25resetAndLeakSourceManagerEv'/>
<use f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='441' u='c' c='_ZN5clang16CompilerInstance24resetAndLeakPreprocessorEv'/>
<use f='llvm/clang/include/clang/Frontend/CompilerInstance.h' l='459' u='c' c='_ZN5clang16CompilerInstance22resetAndLeakASTContextEv'/>
<doc f='llvm/llvm/include/llvm/Support/BuryPointer.h' l='16'>// In tools that will exit soon anyway, going through the process of explicitly
// deallocating resources can be unnecessary - better to leak the resources and
// let the OS clean them up when the process ends. Use this function to ensure
// the memory is not misdiagnosed as an unintentional leak by leak detection
// tools (this is achieved by preserving pointers to the object in a globally
// visible array).</doc>
<use f='llvm/clang/lib/Frontend/FrontendAction.cpp' l='970' u='c' c='_ZN5clang14FrontendAction13EndSourceFileEv'/>
<def f='llvm/llvm/lib/Support/BuryPointer.cpp' l='15' ll='28' type='void llvm::BuryPointer(const void * Ptr)'/>
