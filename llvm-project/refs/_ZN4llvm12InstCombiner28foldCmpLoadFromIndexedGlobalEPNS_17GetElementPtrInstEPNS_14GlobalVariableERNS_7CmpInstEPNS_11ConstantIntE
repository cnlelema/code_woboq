<dec f='llvm/llvm/lib/Transforms/InstCombine/InstCombineInternal.h' l='843' type='llvm::Instruction * llvm::InstCombiner::foldCmpLoadFromIndexedGlobal(llvm::GetElementPtrInst * GEP, llvm::GlobalVariable * GV, llvm::CmpInst &amp; ICI, llvm::ConstantInt * AndCst = nullptr)'/>
<def f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='174' ll='442' type='llvm::Instruction * llvm::InstCombiner::foldCmpLoadFromIndexedGlobal(llvm::GetElementPtrInst * GEP, llvm::GlobalVariable * GV, llvm::CmpInst &amp; ICI, llvm::ConstantInt * AndCst = nullptr)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='1730' u='c' c='_ZN4llvm12InstCombiner19foldICmpAndConstantERNS_8ICmpInstEPNS_14BinaryOperatorERKNS_5APIntE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='3043' u='c' c='_ZN4llvm12InstCombiner30foldICmpInstWithConstantNotIntERNS_8ICmpInstE'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='5589' u='c' c='_ZN4llvm12InstCombiner13visitFCmpInstERNS_8FCmpInstE'/>
<doc f='llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp' l='166'>/// This is called when we see this pattern:
///   cmp pred (load (gep GV, ...)), cmpcst
/// where GV is a global variable with a constant initializer. Try to simplify
/// this into some simple computation that does not need the load. For example
/// we can optimize &quot;icmp eq (load (gep &quot;foo&quot;, 0, i)), 0&quot; into &quot;icmp eq i, 3&quot;.
///
/// If AndCst is non-null, then the loaded value is masked with that constant
/// before doing the comparison. This handles cases like &quot;A[i]&amp;4 == 0&quot;.</doc>
