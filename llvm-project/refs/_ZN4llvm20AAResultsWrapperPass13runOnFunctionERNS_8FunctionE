<dec f='llvm/llvm/include/llvm/Analysis/AliasAnalysis.h' l='1168' type='bool llvm::AAResultsWrapperPass::runOnFunction(llvm::Function &amp; F)'/>
<inh f='llvm/llvm/include/llvm/Pass.h' l='294' c='_ZN4llvm12FunctionPass13runOnFunctionERNS_8FunctionE'/>
<def f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='779' ll='821' type='bool llvm::AAResultsWrapperPass::runOnFunction(llvm::Function &amp; F)'/>
<doc f='llvm/llvm/lib/Analysis/AliasAnalysis.cpp' l='771'>/// Run the wrapper pass to rebuild an aggregation over known AA passes.
///
/// This is the legacy pass manager&apos;s interface to the new-style AA results
/// aggregation object. Because this is somewhat shoe-horned into the legacy
/// pass manager, we hard code all the specific alias analyses available into
/// it. While the particular set enabled is configured via commandline flags,
/// adding a new alias analysis to LLVM will require adding support for it to
/// this list.</doc>
