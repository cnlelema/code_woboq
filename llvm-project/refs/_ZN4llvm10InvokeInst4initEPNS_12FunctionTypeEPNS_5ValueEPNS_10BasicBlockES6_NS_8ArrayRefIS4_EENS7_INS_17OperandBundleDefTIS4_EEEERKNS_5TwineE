<dec f='llvm/llvm/include/llvm/IR/Instructions.h' l='3666' type='void llvm::InvokeInst::init(llvm::FunctionType * Ty, llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr)'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='3880' u='c' c='_ZN4llvm10InvokeInstC1EPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EENS7_INS_17OperandBundleDefTIS4_EEEEiRKNS_5TwineEPNS_11InstructionE'/>
<use f='llvm/llvm/include/llvm/IR/Instructions.h' l='3890' u='c' c='_ZN4llvm10InvokeInstC1EPNS_12FunctionTypeEPNS_5ValueEPNS_10BasicBlockES6_NS_8ArrayRefIS4_EENS7_INS_17OperandBundleDefTIS4_EEEEiRKNS_5TwineES6_'/>
<def f='llvm/llvm/lib/IR/Instructions.cpp' l='722' ll='753' type='void llvm::InvokeInst::init(llvm::FunctionType * FTy, llvm::Value * Fn, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr)'/>
<doc f='llvm/llvm/lib/IR/Instructions.cpp' l='718'>//===----------------------------------------------------------------------===//
//                        InvokeInst Implementation
//===----------------------------------------------------------------------===//</doc>
