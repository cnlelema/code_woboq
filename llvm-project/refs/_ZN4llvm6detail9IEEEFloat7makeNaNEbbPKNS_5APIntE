<dec f='llvm/llvm/include/llvm/ADT/APFloat.h' l='441' type='void llvm::detail::IEEEFloat::makeNaN(bool SNaN = false, bool Neg = false, const llvm::APInt * fill = nullptr)'/>
<use f='llvm/llvm/include/llvm/ADT/APFloat.h' l='798' u='c' c='_ZN4llvm7APFloat7makeNaNEbbPKNS_5APIntE'/>
<def f='llvm/llvm/lib/Support/APFloat.cpp' l='691' ll='735' type='void llvm::detail::IEEEFloat::makeNaN(bool SNaN = false, bool Negative = false, const llvm::APInt * fill = nullptr)'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1423' u='c' c='_ZN4llvm6detail9IEEEFloat21addOrSubtractSpecialsERKS1_b'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1540' u='c' c='_ZN4llvm6detail9IEEEFloat16multiplySpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1581' u='c' c='_ZN4llvm6detail9IEEEFloat14divideSpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='1616' u='c' c='_ZN4llvm6detail9IEEEFloat11modSpecialsERKS1_'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='2563' u='c' c='_ZN4llvm6detail9IEEEFloat25convertFromStringSpecialsENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='2568' u='c' c='_ZN4llvm6detail9IEEEFloat25convertFromStringSpecialsENS_9StringRefE'/>
<use f='llvm/llvm/lib/Support/APFloat.cpp' l='3680' u='c' c='_ZN4llvm6detail9IEEEFloat4nextEb'/>
<doc f='llvm/llvm/lib/Support/APFloat.cpp' l='688'>/* Make this number a NaN, with an arbitrary but deterministic value
   for the significand.  If double or longer, this is a signalling NaN,
   which may not be ideal.  If float, this is QNaN(0).  */</doc>
