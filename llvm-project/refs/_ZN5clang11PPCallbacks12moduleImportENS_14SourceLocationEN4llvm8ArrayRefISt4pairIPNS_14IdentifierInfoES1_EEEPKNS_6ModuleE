<def f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='145' ll='148' type='void clang::PPCallbacks::moduleImport(clang::SourceLocation ImportLoc, ModuleIdPath Path, const clang::Module * Imported)'/>
<ovr f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='398' c='_ZN5clang18PPChainedCallbacks12moduleImportENS_14SourceLocationEN4llvm8ArrayRefISt4pairIPNS_14IdentifierInfoES1_EEEPKNS_6ModuleE'/>
<use f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='400' u='c' c='_ZN5clang18PPChainedCallbacks12moduleImportENS_14SourceLocationEN4llvm8ArrayRefISt4pairIPNS_14IdentifierInfoES1_EEEPKNS_6ModuleE'/>
<use f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='401' u='c' c='_ZN5clang18PPChainedCallbacks12moduleImportENS_14SourceLocationEN4llvm8ArrayRefISt4pairIPNS_14IdentifierInfoES1_EEEPKNS_6ModuleE'/>
<doc f='llvm/clang/include/clang/Lex/PPCallbacks.h' l='135'>/// Callback invoked whenever there was an explicit module-import
  /// syntax.
  ///
  /// \param ImportLoc The location of import directive token.
  ///
  /// \param Path The identifiers (and their locations) of the module
  /// &quot;path&quot;, e.g., &quot;std.vector&quot; would be split into &quot;std&quot; and &quot;vector&quot;.
  ///
  /// \param Imported The imported module; can be null if importing failed.
  ///</doc>
<use f='llvm/clang/lib/Lex/Pragma.cpp' l='1551' u='c' c='_ZN12_GLOBAL__N_125PragmaModuleImportHandler12HandlePragmaERN5clang12PreprocessorENS1_16PragmaIntroducerERNS1_5TokenE'/>
<use f='llvm/clang/lib/Lex/Preprocessor.cpp' l='1271' u='c' c='_ZN5clang12Preprocessor20LexAfterModuleImportERNS_5TokenE'/>
