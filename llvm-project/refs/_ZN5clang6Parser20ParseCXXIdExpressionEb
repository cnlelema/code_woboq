<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1740' type='ExprResult clang::Parser::ParseCXXIdExpression(bool isAddressOfOperand = false)'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1350' u='c' c='_ZN5clang6Parser19ParseCastExpressionEbbRbNS0_13TypeCastStateEb'/>
<use f='llvm/clang/lib/Parse/ParseExpr.cpp' l='1370' u='c' c='_ZN5clang6Parser19ParseCastExpressionEbbRbNS0_13TypeCastStateEb'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='626' ll='646' type='ExprResult clang::Parser::ParseCXXIdExpression(bool isAddressOfOperand = false)'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='584'>/// ParseCXXIdExpression - Handle id-expression.
///
///       id-expression:
///         unqualified-id
///         qualified-id
///
///       qualified-id:
///         &apos;::&apos;[opt] nested-name-specifier &apos;template&apos;[opt] unqualified-id
///         &apos;::&apos; identifier
///         &apos;::&apos; operator-function-id
///         &apos;::&apos; template-id
///
/// NOTE: The standard specifies that, for qualified-id, the parser does not
/// expect:
///
///   &apos;::&apos; conversion-function-id
///   &apos;::&apos; &apos;~&apos; class-name
///
/// This may cause a slight inconsistency on diagnostics:
///
/// class C {};
/// namespace A {}
/// void f() {
///   :: A :: ~ C(); // Some Sema error about using destructor with a
///                  // namespace.
///   :: ~ C(); // Some Parser error like &apos;unexpected ~&apos;.
/// }
///
/// We simplify the parser a bit and make it work like:
///
///       qualified-id:
///         &apos;::&apos;[opt] nested-name-specifier &apos;template&apos;[opt] unqualified-id
///         &apos;::&apos; unqualified-id
///
/// That way Sema can handle and report similar errors for namespaces and the
/// global scope.
///
/// The isAddressOfOperand parameter indicates that this id-expression is a
/// direct operand of the address-of operator. This is, besides member contexts,
/// the only place where a qualified-id naming a non-static class member may
/// appear.
///</doc>
