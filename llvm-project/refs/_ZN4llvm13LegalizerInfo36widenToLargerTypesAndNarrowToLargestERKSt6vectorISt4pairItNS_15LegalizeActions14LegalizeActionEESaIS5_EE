<def f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h' l='995' ll='1003' type='static SizeAndActionsVec llvm::LegalizerInfo::widenToLargerTypesAndNarrowToLargest(const SizeAndActionsVec &amp; v)'/>
<doc f='llvm/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h' l='991'>/// A SizeChangeStrategy for the common case where legalization for a
  /// particular operation consists of widening the type to a large legal type,
  /// unless there is no such type and then instead it should be narrowed to the
  /// largest legal type.</doc>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='242' u='r' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp' l='244' u='r' c='_ZN4llvm13LegalizerInfoC1Ev'/>
<use f='llvm/llvm/lib/Target/X86/X86LegalizerInfo.cpp' l='81' u='r' c='_ZN4llvm16X86LegalizerInfoC1ERKNS_12X86SubtargetERKNS_16X86TargetMachineE'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='55' u='r' c='_ZN12_GLOBAL__N_133LegalizerInfoTest_ScalarRISC_Test8TestBodyEv'/>
<use f='llvm/llvm/unittests/CodeGen/GlobalISel/LegalizerInfoTest.cpp' l='134' u='r' c='_ZN12_GLOBAL__N_136LegalizerInfoTest_MultipleTypes_Test8TestBodyEv'/>
