<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='148' type='void llvm::deleteDeadLoop(llvm::Loop * L, llvm::DominatorTree * DT, llvm::ScalarEvolution * SE, llvm::LoopInfo * LI)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='137'>/// This function deletes dead loops. The caller of this function needs to
/// guarantee that the loop is infact dead.
/// The function requires a bunch or prerequisites to be present:
///   - The loop needs to be in LCSSA form
///   - The loop needs to have a Preheader
///   - A unique dedicated exit block must exist
///
/// This also updates the relevant analysis information in \p DT, \p SE, and \p
/// LI if pointers to those are provided.
/// It also updates the loop PM if an updater struct is provided.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDeletion.cpp' l='166' u='c' c='_ZL16deleteLoopIfDeadPN4llvm4LoopERNS_13DominatorTreeERNS_15ScalarEvolutionERNS_8LoopInfoE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopDeletion.cpp' l='202' u='c' c='_ZL16deleteLoopIfDeadPN4llvm4LoopERNS_13DominatorTreeERNS_15ScalarEvolutionERNS_8LoopInfoE'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='450' ll='621' type='void llvm::deleteDeadLoop(llvm::Loop * L, llvm::DominatorTree * DT = nullptr, llvm::ScalarEvolution * SE = nullptr, llvm::LoopInfo * LI = nullptr)'/>
