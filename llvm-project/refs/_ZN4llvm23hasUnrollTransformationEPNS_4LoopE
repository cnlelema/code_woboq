<dec f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='246' type='llvm::TransformationMode llvm::hasUnrollTransformation(llvm::Loop * L)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/LoopUtils.h' l='244'>/// @{
/// Get the mode for LLVM&apos;s supported loop transformations.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp' l='989' u='c' c='_ZL15tryToUnrollLoopPN4llvm4LoopERNS_13DominatorTreeEPNS_8LoopInfoERNS_15ScalarEvolutionERKNS_19TargetTransformInfoERNS_15AssumptionCacheERNS_25Optimi6926510'/>
<use f='llvm/llvm/lib/Transforms/Scalar/WarnMissedTransforms.cpp' l='25' u='c' c='_ZL32warnAboutLeftoverTransformationsPN4llvm4LoopEPNS_25OptimizationRemarkEmitterE'/>
<def f='llvm/llvm/lib/Transforms/Utils/LoopUtils.cpp' l='335' ll='354' type='llvm::TransformationMode llvm::hasUnrollTransformation(llvm::Loop * L)'/>
