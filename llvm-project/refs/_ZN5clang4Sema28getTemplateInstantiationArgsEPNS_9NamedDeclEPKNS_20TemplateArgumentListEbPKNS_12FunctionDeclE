<dec f='llvm/clang/include/clang/Sema/Sema.h' l='7385' type='clang::MultiLevelTemplateArgumentList clang::Sema::getTemplateInstantiationArgs(clang::NamedDecl * D, const clang::TemplateArgumentList * Innermost = nullptr, bool RelativeToPrimary = false, const clang::FunctionDecl * Pattern = nullptr)'/>
<doc f='llvm/clang/include/clang/Sema/Sema.h' l='7380'>//===--------------------------------------------------------------------===//
  // C++ Template Instantiation
  //</doc>
<def f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='54' ll='189' type='clang::MultiLevelTemplateArgumentList clang::Sema::getTemplateInstantiationArgs(clang::NamedDecl * D, const clang::TemplateArgumentList * Innermost = nullptr, bool RelativeToPrimary = false, const clang::FunctionDecl * Pattern = nullptr)'/>
<doc f='llvm/clang/lib/Sema/SemaTemplateInstantiate.cpp' l='33'>//===----------------------------------------------------------------------===/
// Template Instantiation Support
//===----------------------------------------------------------------------===/

/// Retrieve the template argument list(s) that should be used to
/// instantiate the definition of the given declaration.
///
/// \param D the declaration for which we are computing template instantiation
/// arguments.
///
/// \param Innermost if non-NULL, the innermost template argument list.
///
/// \param RelativeToPrimary true if we should get the template
/// arguments relative to the primary template, even when we&apos;re
/// dealing with a specialization. This is only relevant for function
/// template specializations.
///
/// \param Pattern If non-NULL, indicates the pattern from which we will be
/// instantiating the definition of the given declaration, \p D. This is
/// used to determine the proper set of template instantiation arguments for
/// friend function template specializations.</doc>
