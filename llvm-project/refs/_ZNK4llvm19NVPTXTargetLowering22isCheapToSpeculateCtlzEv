<inh f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='483' c='_ZNK4llvm18TargetLoweringBase22isCheapToSpeculateCtlzEv'/>
<def f='llvm/llvm/lib/Target/NVPTX/NVPTXISelLowering.h' l='549' type='bool llvm::NVPTXTargetLowering::isCheapToSpeculateCtlz() const'/>
<doc f='llvm/llvm/lib/Target/NVPTX/NVPTXISelLowering.h' l='545'>// The default is to transform llvm.ctlz(x, false) (where false indicates that
  // x == 0 is not undefined behavior) into a branch that checks whether x is 0
  // and avoids calling ctlz in that case.  We have a dedicated ctlz
  // instruction, so we say that ctlz is cheap to speculate.</doc>
