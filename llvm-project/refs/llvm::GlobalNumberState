<def f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='54' ll='87'/>
<size>88</size>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/FunctionComparator.h' l='42'>/// GlobalNumberState assigns an integer to each global value in the program,
/// which is used by the comparison routine to order references to globals. This
/// state must be preserved throughout the pass, because Functions and other
/// globals need to maintain their relative order. Globals are assigned a number
/// when they are first visited. This order is deterministic, and so the
/// assigned numbers are as well. When two functions are merged, neither number
/// is updated. If the symbols are weak, this would be incorrect. If they are
/// strong, then one will be replaced at all references to the other, and so
/// direct callsites will now see one or the other symbol, and no update is
/// necessary. Note that if we were guaranteed unique names, we could just
/// compare those, but this would not work for stripped bitcodes or for those
/// few symbols without a name.</doc>
<mbr r='llvm::GlobalNumberState::GlobalNumbers' o='0' t='ValueNumberMap'/>
<mbr r='llvm::GlobalNumberState::NextNumber' o='640' t='uint64_t'/>
<fun r='_ZN4llvm17GlobalNumberStateC1Ev'/>
<fun r='_ZN4llvm17GlobalNumberState9getNumberEPNS_11GlobalValueE'/>
<fun r='_ZN4llvm17GlobalNumberState5eraseEPNS_11GlobalValueE'/>
<fun r='_ZN4llvm17GlobalNumberState5clearEv'/>
