<inh f='llvm/lld/include/lld/Core/File.h' l='41' c='lld::File'/>
<def f='llvm/lld/include/lld/Core/File.h' l='246' ll='271'/>
<size>312</size>
<doc f='llvm/lld/include/lld/Core/File.h' l='241'>/// An ErrorFile represents a file that doesn&apos;t exist.
/// If you try to parse a file which doesn&apos;t exist, an instance of this
/// class will be returned. That&apos;s parse method always returns an error.
/// This is useful to delay erroring on non-existent files, so that we
/// can do unit testing a driver using non-existing file paths.</doc>
<fun r='_ZN3lld9ErrorFileC1EN4llvm9StringRefESt10error_code'/>
<fun r='_ZN3lld9ErrorFile7doParseEv'/>
<fun r='_ZNK3lld9ErrorFile7definedEv'/>
<fun r='_ZNK3lld9ErrorFile9undefinedEv'/>
<fun r='_ZNK3lld9ErrorFile13sharedLibraryEv'/>
<fun r='_ZNK3lld9ErrorFile8absoluteEv'/>
<fun r='_ZN3lld9ErrorFile10clearAtomsEv'/>
<mbr r='lld::ErrorFile::_ec' o='2368' t='std::error_code'/>
