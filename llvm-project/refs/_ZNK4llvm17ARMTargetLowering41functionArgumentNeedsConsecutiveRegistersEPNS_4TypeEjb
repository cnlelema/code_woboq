<dec f='llvm/llvm/lib/Target/ARM/ARMISelLowering.h' l='506' type='bool llvm::ARMTargetLowering::functionArgumentNeedsConsecutiveRegisters(llvm::Type * Ty, CallingConv::ID CallConv, bool isVarArg) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMISelLowering.h' l='504'>/// Returns true if an argument of type Ty needs to be passed in a
    /// contiguous block of registers in calling convention CallConv.</doc>
<use f='llvm/llvm/lib/Target/ARM/ARMCallLowering.cpp' l='217' u='c' c='_ZNK4llvm15ARMCallLowering17splitToValueTypesERKNS_12CallLowering7ArgInfoERNS_15SmallVectorImplIS2_EERNS_15MachineFunctionERKSt8functionIFvjEE'/>
<inh f='llvm/llvm/include/llvm/CodeGen/TargetLowering.h' l='3609' c='_ZNK4llvm14TargetLowering41functionArgumentNeedsConsecutiveRegistersEPNS_4TypeEjb'/>
<def f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='15286' ll='15299' type='bool llvm::ARMTargetLowering::functionArgumentNeedsConsecutiveRegisters(llvm::Type * Ty, CallingConv::ID CallConv, bool isVarArg) const'/>
<doc f='llvm/llvm/lib/Target/ARM/ARMISelLowering.cpp' l='15283'>/// Return true if a type is an AAPCS-VFP homogeneous aggregate or one of
/// [N x i32] or [N x i64]. This allows front-ends to skip emitting padding when
/// passing according to AAPCS rules.</doc>
