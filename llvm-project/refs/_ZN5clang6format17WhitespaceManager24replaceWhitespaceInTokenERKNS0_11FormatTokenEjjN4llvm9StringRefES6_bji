<dec f='llvm/clang/lib/Format/WhitespaceManager.h' l='77' type='void clang::format::WhitespaceManager::replaceWhitespaceInToken(const clang::format::FormatToken &amp; Tok, unsigned int Offset, unsigned int ReplaceChars, llvm::StringRef PreviousPostfix, llvm::StringRef CurrentPrefix, bool InPPDirective, unsigned int Newlines, int Spaces)'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='257' u='c' c='_ZNK5clang6format22BreakableStringLiteral11insertBreakEjjSt4pairImjEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='294' u='c' c='_ZNK5clang6format16BreakableComment18compressWhitespaceEjjSt4pairImjERNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='594' u='c' c='_ZNK5clang6format21BreakableBlockComment11insertBreakEjjSt4pairImjEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='640' u='c' c='_ZNK5clang6format21BreakableBlockComment6reflowEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='691' u='c' c='_ZNK5clang6format21BreakableBlockComment16adaptStartOfLineEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='842' u='c' c='_ZNK5clang6format27BreakableLineCommentSection11insertBreakEjjSt4pairImjEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='888' u='c' c='_ZNK5clang6format27BreakableLineCommentSection6reflowEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='901' u='c' c='_ZNK5clang6format27BreakableLineCommentSection6reflowEjRNS0_17WhitespaceManagerE'/>
<use f='llvm/clang/lib/Format/BreakableToken.cpp' l='946' u='c' c='_ZNK5clang6format27BreakableLineCommentSection16adaptStartOfLineEjRNS0_17WhitespaceManagerE'/>
<doc f='llvm/clang/lib/Format/WhitespaceManager.h' l='63'>/// Inserts or replaces whitespace in the middle of a token.
  ///
  /// Inserts \p PreviousPostfix, \p Newlines, \p Spaces and \p CurrentPrefix
  /// (in this order) at \p Offset inside \p Tok, replacing \p ReplaceChars
  /// characters.
  ///
  /// Note: \p Spaces can be negative to retain information about initial
  /// relative column offset between a line of a block comment and the start of
  /// the comment. This negative offset may be compensated by trailing comment
  /// alignment here. In all other cases negative \p Spaces will be truncated to
  /// 0.
  ///
  /// When \p InPPDirective is true, escaped newlines are inserted. \p Spaces is
  /// used to align backslashes correctly.</doc>
<def f='llvm/clang/lib/Format/WhitespaceManager.cpp' l='74' ll='86' type='void clang::format::WhitespaceManager::replaceWhitespaceInToken(const clang::format::FormatToken &amp; Tok, unsigned int Offset, unsigned int ReplaceChars, llvm::StringRef PreviousPostfix, llvm::StringRef CurrentPrefix, bool InPPDirective, unsigned int Newlines, int Spaces)'/>
