<dec f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64TargetStreamer.h' l='102' type='void llvm::AArch64TargetWinCOFFStreamer::EmitARM64WinUnwindCode(unsigned int UnwindCode, int Reg, int Offset)'/>
<def f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='64' ll='77' type='void llvm::AArch64TargetWinCOFFStreamer::EmitARM64WinUnwindCode(unsigned int UnwindCode, int Reg, int Offset)'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='85' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer25EmitARM64WinCFIAllocStackEj'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='89' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveFPLREi'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='93' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFPLRXEi'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='100' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer22EmitARM64WinCFISaveRegEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='105' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveRegXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='110' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveRegPEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='115' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveRegPXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='122' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer23EmitARM64WinCFISaveFRegEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='127' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFRegXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='132' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer24EmitARM64WinCFISaveFRegPEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='137' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer25EmitARM64WinCFISaveFRegPXEji'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='141' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer20EmitARM64WinCFISetFPEv'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='146' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer20EmitARM64WinCFIAddFPEj'/>
<use f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='150' u='c' c='_ZN4llvm28AArch64TargetWinCOFFStreamer18EmitARM64WinCFINopEv'/>
<doc f='llvm/llvm/lib/Target/AArch64/MCTargetDesc/AArch64WinCOFFStreamer.cpp' l='58'>// Helper function to common out unwind code setup for those codes that can
// belong to both prolog and epilog.
// There are three types of Windows ARM64 SEH codes.  They can
// 1) take no operands: SEH_Nop, SEH_PrologEnd, SEH_EpilogStart, SEH_EpilogEnd
// 2) take an offset: SEH_StackAlloc, SEH_SaveFPLR, SEH_SaveFPLR_X
// 3) take a register and an offset/size: all others</doc>
