<dec f='llvm/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.h' l='30' type='bool llvm::AArch64ExternalSymbolizer::tryAddingSymbolicOperand(llvm::MCInst &amp; MI, llvm::raw_ostream &amp; CommentStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)'/>
<inh f='llvm/llvm/include/llvm/MC/MCDisassembler/MCExternalSymbolizer.h' l='47' c='_ZN4llvm20MCExternalSymbolizer24tryAddingSymbolicOperandERNS_6MCInstERNS_11raw_ostreamElmbmm'/>
<def f='llvm/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp' l='59' ll='223' type='bool llvm::AArch64ExternalSymbolizer::tryAddingSymbolicOperand(llvm::MCInst &amp; MI, llvm::raw_ostream &amp; CommentStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)'/>
<doc f='llvm/llvm/lib/Target/AArch64/Disassembler/AArch64ExternalSymbolizer.cpp' l='43'>/// tryAddingSymbolicOperand - tryAddingSymbolicOperand trys to add a symbolic
/// operand in place of the immediate Value in the MCInst.  The immediate
/// Value has not had any PC adjustment made by the caller. If the instruction
/// is a branch that adds the PC to the immediate Value then isBranch is
/// Success, else Fail. If GetOpInfo is non-null, then it is called to get any
/// symbolic information at the Address for this instrution.  If that returns
/// non-zero then the symbolic information it returns is used to create an
/// MCExpr and that is added as an operand to the MCInst.  If GetOpInfo()
/// returns zero and isBranch is Success then a symbol look up for
/// Address + Value is done and if a symbol is found an MCExpr is created with
/// that, else an MCExpr with Address + Value is created.  If GetOpInfo()
/// returns zero and isBranch is Fail then the Opcode of the MCInst is
/// tested and for ADRP an other instructions that help to load of pointers
/// a symbol look up is done to see it is returns a specific reference type
/// to add to the comment stream.  This function returns Success if it adds
/// an operand to the MCInst and Fail otherwise.</doc>
