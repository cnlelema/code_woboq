<def f='llvm/clang/lib/CodeGen/CGCleanup.h' l='372' ll='377' type='void clang::CodeGen::EHCleanupScope::addBranchAfter(llvm::ConstantInt * Index, llvm::BasicBlock * Block)'/>
<doc f='llvm/clang/lib/CodeGen/CGCleanup.h' l='361'>/// Add a branch-after to this cleanup scope.  A branch-after is a
  /// branch from a point protected by this (normal) cleanup to a
  /// point in the normal cleanup scope immediately containing it.
  /// For example,
  ///   for (;;) { A a; break; }
  /// contains a branch-after.
  ///
  /// Branch-afters each have their own destination out of the
  /// cleanup, guaranteed distinct from anything else threaded through
  /// it.  Therefore branch-afters usually force a switch after the
  /// cleanup.</doc>
<use f='llvm/clang/lib/CodeGen/CGCleanup.cpp' l='1104' u='c' c='_ZN5clang7CodeGen15CodeGenFunction24EmitBranchThroughCleanupENS1_8JumpDestE'/>
