<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='186' u='c' c='_ZN4llvm16IntervalIterator15ProcessIntervalEPT_'/>
<def f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='200' ll='241' type='void llvm::IntervalIterator::ProcessNode(llvm::Interval * Int, NodeTy * Node)'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='239' u='c' c='_ZN4llvm16IntervalIterator11ProcessNodeEPNS_8IntervalEPT_'/>
<doc f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='192'>// ProcessNode - This method is called by ProcessInterval to add nodes to the
  // interval being constructed, and it is also called recursively as it walks
  // the source graph.  A node is added to the current interval only if all of
  // its predecessors are already in the graph.  This also takes care of keeping
  // the successor set of an interval up to date.
  //
  // This method is templated because it may operate on two different source
  // graphs: a basic block graph, or a preexisting interval graph.</doc>
