<def f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='176' ll='180' type='bool llvm::SCEVExpander::isHighCostExpansion(const llvm::SCEV * Expr, llvm::Loop * L, const llvm::Instruction * At = nullptr)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='170'>/// Return true for expressions that may incur non-trivial cost to evaluate
    /// at runtime.
    ///
    /// At is an optional parameter which specifies point in code where user is
    /// going to expand this expression. Sometimes this knowledge can lead to a
    /// more accurate cost estimation.</doc>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='641' u='c' c='_ZN12_GLOBAL__N_114IndVarSimplify21rewriteLoopExitValuesEPN4llvm4LoopERNS1_12SCEVExpanderE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp' l='2655' u='c' c='_ZN12_GLOBAL__N_114IndVarSimplify3runEPN4llvm4LoopE'/>
<use f='llvm/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp' l='646' u='c' c='_ZN4llvm26UnrollRuntimeLoopRemainderEPNS_4LoopEjbbbbPNS_8LoopInfoEPNS_15ScalarEvolutionEPNS_13DominatorTreeEPNS_15AssumptionCacheEbPS1_'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp' l='646' u='c' c='_ZN12_GLOBAL__N_114SimplifyIndvar30replaceIVUserWithLoopInvariantEPN4llvm11InstructionE'/>
