<dec f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='138' type='llvm::MDNode * llvm::intersectAccessGroups(const llvm::Instruction * Inst1, const llvm::Instruction * Inst2)'/>
<doc f='llvm/llvm/include/llvm/Analysis/VectorUtils.h' l='132'>/// Compute the access-group list of access groups that @p Inst1 and @p Inst2
/// are both in. If either instruction does not access memory at all, it is
/// considered to be in every list.
///
/// If the list contains just one access group, it is returned directly. If the
/// list is empty, returns nullptr.</doc>
<def f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='543' ll='587' type='llvm::MDNode * llvm::intersectAccessGroups(const llvm::Instruction * Inst1, const llvm::Instruction * Inst2)'/>
<use f='llvm/llvm/lib/Analysis/VectorUtils.cpp' l='620' u='c' c='_ZN4llvm17propagateMetadataEPNS_11InstructionENS_8ArrayRefIPNS_5ValueEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/Local.cpp' l='2331' u='c' c='_ZN4llvm15combineMetadataEPNS_11InstructionEPKS0_NS_8ArrayRefIjEEb'/>
