<inh f='llvm/clang/include/clang/AST/StmtOpenMP.h' l='32' c='clang::OMPExecutableDirective'/>
<def f='llvm/clang/include/clang/AST/StmtOpenMP.h' l='299' ll='356'/>
<size>40</size>
<doc f='llvm/clang/include/clang/AST/StmtOpenMP.h' l='290'>/// This represents &apos;#pragma omp parallel&apos; directive.
///
/// \code
/// #pragma omp parallel private(a,b) reduction(+: c,d)
/// \endcode
/// In this example directive &apos;#pragma omp parallel&apos; has clauses &apos;private&apos;
/// with the variables &apos;a&apos; and &apos;b&apos; and &apos;reduction&apos; with operator &apos;+&apos; and
/// variables &apos;c&apos; and &apos;d&apos;.
///</doc>
<mbr r='clang::OMPParallelDirective::HasCancel' o='256' t='bool'/>
<fun r='_ZN5clang20OMPParallelDirectiveC1ENS_14SourceLocationES1_j'/>
<fun r='_ZN5clang20OMPParallelDirectiveC1Ej'/>
<fun r='_ZN5clang20OMPParallelDirective12setHasCancelEb'/>
<fun r='_ZN5clang20OMPParallelDirective6CreateERKNS_10ASTContextENS_14SourceLocationES4_N4llvm8ArrayRefIPNS_9OMPClauseEEEPNS_4StmtEb'/>
<fun r='_ZN5clang20OMPParallelDirective11CreateEmptyERKNS_10ASTContextEjNS_4Stmt10EmptyShellE'/>
<fun r='_ZNK5clang20OMPParallelDirective9hasCancelEv'/>
<fun r='_ZN5clang20OMPParallelDirective7classofEPKNS_4StmtE'/>
