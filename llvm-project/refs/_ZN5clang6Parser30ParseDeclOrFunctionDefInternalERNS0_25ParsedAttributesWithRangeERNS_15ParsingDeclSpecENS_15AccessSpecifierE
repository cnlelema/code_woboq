<dec f='llvm/clang/include/clang/Parse/Parser.h' l='1480' type='DeclGroupPtrTy clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange &amp; attrs, clang::ParsingDeclSpec &amp; DS, clang::AccessSpecifier AS)'/>
<def f='llvm/clang/lib/Parse/Parser.cpp' l='995' ll='1096' type='Parser::DeclGroupPtrTy clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange &amp; attrs, clang::ParsingDeclSpec &amp; DS, clang::AccessSpecifier AS)'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1103' u='c' c='_ZN5clang6Parser36ParseDeclarationOrFunctionDefinitionERNS0_25ParsedAttributesWithRangeEPNS_15ParsingDeclSpecENS_15AccessSpecifierE'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1111' u='c' c='_ZN5clang6Parser36ParseDeclarationOrFunctionDefinitionERNS0_25ParsedAttributesWithRangeEPNS_15ParsingDeclSpecENS_15AccessSpecifierE'/>
<doc f='llvm/clang/lib/Parse/Parser.cpp' l='979'>/// Parse either a function-definition or a declaration.  We can&apos;t tell which
/// we have until we read up to the compound-statement in function-definition.
/// TemplateParams, if non-NULL, provides the template parameters when we&apos;re
/// parsing a C++ template-declaration.
///
///       function-definition: [C99 6.9.1]
///         decl-specs      declarator declaration-list[opt] compound-statement
/// [C90] function-definition: [C99 6.7.1] - implicit int result
/// [C90]   decl-specs[opt] declarator declaration-list[opt] compound-statement
///
///       declaration: [C99 6.7]
///         declaration-specifiers init-declarator-list[opt] &apos;;&apos;
/// [!C99]  init-declarator-list &apos;;&apos;                   [TODO: warn in c99 mode]
/// [OMP]   threadprivate-directive
/// [OMP]   allocate-directive                         [TODO]
///</doc>
