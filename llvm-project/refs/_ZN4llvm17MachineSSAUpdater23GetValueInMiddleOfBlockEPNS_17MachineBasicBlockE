<dec f='llvm/llvm/include/llvm/CodeGen/MachineSSAUpdater.h' l='97' type='unsigned int llvm::MachineSSAUpdater::GetValueInMiddleOfBlock(llvm::MachineBasicBlock * BB)'/>
<def f='llvm/llvm/lib/CodeGen/MachineSSAUpdater.cpp' l='143' ll='208' type='unsigned int llvm::MachineSSAUpdater::GetValueInMiddleOfBlock(llvm::MachineBasicBlock * BB)'/>
<use f='llvm/llvm/lib/CodeGen/MachineSSAUpdater.cpp' l='230' u='c' c='_ZN4llvm17MachineSSAUpdater10RewriteUseERNS_14MachineOperandE'/>
<doc f='llvm/llvm/lib/CodeGen/MachineSSAUpdater.cpp' l='125'>/// GetValueInMiddleOfBlock - Construct SSA form, materializing a value that
/// is live in the middle of the specified block.
///
/// GetValueInMiddleOfBlock is the same as GetValueAtEndOfBlock except in one
/// important case: if there is a definition of the rewritten value after the
/// &apos;use&apos; in BB.  Consider code like this:
///
///      X1 = ...
///   SomeBB:
///      use(X)
///      X2 = ...
///      br Cond, SomeBB, OutBB
///
/// In this case, there are two values (X1 and X2) added to the AvailableVals
/// set by the client of the rewriter, and those values are both live out of
/// their respective blocks.  However, the use of X happens in the *middle* of
/// a block.  Because of this, we need to insert a new PHI node in SomeBB to
/// merge the appropriate values, and this value isn&apos;t live out of the block.</doc>
<doc f='llvm/llvm/include/llvm/CodeGen/MachineSSAUpdater.h' l='79'>/// GetValueInMiddleOfBlock - Construct SSA form, materializing a value that
  /// is live in the middle of the specified block.
  ///
  /// GetValueInMiddleOfBlock is the same as GetValueAtEndOfBlock except in one
  /// important case: if there is a definition of the rewritten value after the
  /// &apos;use&apos; in BB.  Consider code like this:
  ///
  ///      X1 = ...
  ///   SomeBB:
  ///      use(X)
  ///      X2 = ...
  ///      br Cond, SomeBB, OutBB
  ///
  /// In this case, there are two values (X1 and X2) added to the AvailableVals
  /// set by the client of the rewriter, and those values are both live out of
  /// their respective blocks.  However, the use of X happens in the *middle* of
  /// a block.  Because of this, we need to insert a new PHI node in SomeBB to
  /// merge the appropriate values, and this value isn&apos;t live out of the block.</doc>
<use f='llvm/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp' l='573' u='c' c='_ZN12_GLOBAL__N_115SILowerI1Copies9lowerPhisEv'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp' l='601' u='c' c='_ZN12_GLOBAL__N_115SILowerI1Copies9lowerPhisEv'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp' l='605' u='c' c='_ZN12_GLOBAL__N_115SILowerI1Copies9lowerPhisEv'/>
<use f='llvm/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp' l='685' u='c' c='_ZN12_GLOBAL__N_115SILowerI1Copies15lowerCopiesToI1Ev'/>
<use f='llvm/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp' l='1138' u='c' c='_ZN12_GLOBAL__N_131X86SpeculativeLoadHardeningPass37tracePredStateThroughIndirectBranchesERN4llvm15MachineFunctionE'/>
