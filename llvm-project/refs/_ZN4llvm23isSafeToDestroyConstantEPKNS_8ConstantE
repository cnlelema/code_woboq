<dec f='llvm/llvm/include/llvm/Transforms/Utils/GlobalStatus.h' l='24' type='bool llvm::isSafeToDestroyConstant(const llvm::Constant * C)'/>
<doc f='llvm/llvm/include/llvm/Transforms/Utils/GlobalStatus.h' l='20'>/// It is safe to destroy a constant iff it is only used by constants itself.
/// Note that constants cannot be cyclic, so this test is pretty easy to
/// implement recursively.
///</doc>
<use f='llvm/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp' l='42' u='c' c='_ZL28eliminateAvailableExternallyRN4llvm6ModuleE'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalDCE.cpp' l='221' u='c' c='_ZN4llvm13GlobalDCEPass3runERNS_6ModuleERNS_15AnalysisManagerIS1_JEEE'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='240' u='c' c='_ZL23CleanupPointerRootUsersPN4llvm14GlobalVariableEPKNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='349' u='c' c='_ZL26CleanupConstantGlobalUsersPN4llvm5ValueEPNS_8ConstantERKNS_10DataLayoutEPNS_17TargetLibraryInfoE'/>
<use f='llvm/llvm/lib/Transforms/IPO/GlobalOpt.cpp' l='399' u='c' c='_ZL20isSafeSROAElementUsePN4llvm5ValueE'/>
<def f='llvm/llvm/lib/Transforms/Utils/GlobalStatus.cpp' l='45' ll='59' type='bool llvm::isSafeToDestroyConstant(const llvm::Constant * C)'/>
<use f='llvm/llvm/lib/Transforms/Utils/GlobalStatus.cpp' l='54' u='c' c='_ZN4llvm23isSafeToDestroyConstantEPKNS_8ConstantE'/>
<use f='llvm/llvm/lib/Transforms/Utils/GlobalStatus.cpp' l='177' u='c' c='_ZL16analyzeGlobalAuxPKN4llvm5ValueERNS_12GlobalStatusERNS_15SmallPtrSetImplIS2_EE'/>
<doc f='llvm/llvm/lib/Transforms/Utils/GlobalStatus.cpp' l='41'>/// It is safe to destroy a constant iff it is only used by constants itself.
/// Note that constants cannot be cyclic, so this test is pretty easy to
/// implement recursively.
///</doc>
