<dec f='llvm/llvm/include/llvm/Transforms/Scalar/JumpThreading.h' l='136' type='bool llvm::JumpThreadingPass::ProcessBranchOnPHI(llvm::PHINode * PN)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1210' u='c' c='_ZN4llvm17JumpThreadingPass12ProcessBlockEPNS_10BasicBlockE'/>
<def f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1751' ll='1775' type='bool llvm::JumpThreadingPass::ProcessBranchOnPHI(llvm::PHINode * PN)'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/JumpThreading.cpp' l='1748'>/// ProcessBranchOnPHI - We have an otherwise unthreadable conditional branch on
/// a PHI node in the current block.  See if there are any simplifications we
/// can do based on inputs to the phi node.</doc>
