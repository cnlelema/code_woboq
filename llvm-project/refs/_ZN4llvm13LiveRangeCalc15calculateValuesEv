<dec f='llvm/llvm/lib/CodeGen/LiveRangeCalc.h' l='283' type='void llvm::LiveRangeCalc::calculateValues()'/>
<doc f='llvm/llvm/lib/CodeGen/LiveRangeCalc.h' l='276'>/// calculateValues - Calculate the value that will be live-in to each block
  /// added with addLiveInBlock.  Add PHI-def values as needed to preserve SSA
  /// form.  Add liveness to all live-in blocks up to the Kill point, or the
  /// whole block for live-through blocks.
  ///
  /// Every predecessor of a live-in block must have been given a value with
  /// setLiveOutValue, the value may be null for live-trough blocks.</doc>
<use f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='263' u='c' c='_ZN4llvm13LiveRangeCalc6extendERNS_9LiveRangeENS_9SlotIndexEjNS_8ArrayRefIS3_EE'/>
<def f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='269' ll='274' type='void llvm::LiveRangeCalc::calculateValues()'/>
<doc f='llvm/llvm/lib/CodeGen/LiveRangeCalc.cpp' l='266'>// This function is called by a client after using the low-level API to add
// live-out and live-in blocks.  The unique value optimization is not
// available, SplitEditor::transferValues handles that case directly anyway.</doc>
<use f='llvm/llvm/lib/CodeGen/SplitKit.cpp' l='1223' u='c' c='_ZN4llvm11SplitEditor14transferValuesEv'/>
<use f='llvm/llvm/lib/CodeGen/SplitKit.cpp' l='1225' u='c' c='_ZN4llvm11SplitEditor14transferValuesEv'/>
