<def f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='2700' ll='2716' type='llvm::Value * llvm::sroa::AllocaSliceRewriter::getIntegerSplat(llvm::Value * V, unsigned int Size)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='2798' u='c' c='_ZN4llvm4sroa19AllocaSliceRewriter15visitMemSetInstERNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='2812' u='c' c='_ZN4llvm4sroa19AllocaSliceRewriter15visitMemSetInstERNS_10MemSetInstE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='2831' u='c' c='_ZN4llvm4sroa19AllocaSliceRewriter15visitMemSetInstERNS_10MemSetInstE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/SROA.cpp' l='2691'>/// Compute an integer value from splatting an i8 across the given
  /// number of bytes.
  ///
  /// Note that this routine assumes an i8 is a byte. If that isn&apos;t true, don&apos;t
  /// call this routine.
  /// FIXME: Heed the advice above.
  ///
  /// \param V The i8 value to splat.
  /// \param Size The number of bytes in the output (assuming i8 is one byte)</doc>
