<def f='llvm/llvm/include/llvm/Support/FormatVariadicDetails.h' l='18'/>
<inh f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='60' c='llvm::detail::HelperFunctions'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='125' ll='150'/>
<inh f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='60' c='llvm::detail::HelperFunctions'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='174' ll='186'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='199' ll='210'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='216' ll='221'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='232' ll='244'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='262' ll='273'/>
<inh f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='60' c='llvm::detail::HelperFunctions'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='298' ll='321'/>
<def f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='356' ll='419'/>
<def f='llvm/llvm/include/llvm/Support/Chrono.h' l='69' ll='73'/>
<def f='llvm/llvm/include/llvm/Support/Chrono.h' l='111' ll='167'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/Support/Chrono.h' l='61'>/// Format provider for TimePoint&lt;&gt;
///
/// The options string is a strftime format string, with extensions:
///   - %L is millis: 000-999
///   - %f is micros: 000000-999999
///   - %N is nanos: 000000000 - 999999999
///
/// If no options are given, the default format is &quot;%Y-%m-%d %H:%M:%S.%N&quot;.</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='102'>/// Implementation of format_provider&lt;T&gt; for integral arithmetic types.
///
/// The options string of an integral type has the grammar:
///
///   integer_options   :: [style][digits]
///   style             :: &lt;see table below&gt;
///   digits            :: &lt;non-negative integer&gt; 0-99
///
///   ==========================================================================
///   |  style  |     Meaning          |      Example     | Digits Meaning     |
///   --------------------------------------------------------------------------
///   |         |                      |  Input |  Output |                    |
///   ==========================================================================
///   |   x-    | Hex no prefix, lower |   42   |    2a   | Minimum # digits   |
///   |   X-    | Hex no prefix, upper |   42   |    2A   | Minimum # digits   |
///   | x+ / x  | Hex + prefix, lower  |   42   |   0x2a  | Minimum # digits   |
///   | X+ / X  | Hex + prefix, upper  |   42   |   0x2A  | Minimum # digits   |
///   | N / n   | Digit grouped number | 123456 | 123,456 | Ignored            |
///   | D / d   | Integer              | 100000 | 100000  | Ignored            |
///   | (empty) | Same as D / d        |        |         |                    |
///   ==========================================================================
///</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='152'>/// Implementation of format_provider&lt;T&gt; for integral pointer types.
///
/// The options string of a pointer type has the grammar:
///
///   pointer_options   :: [style][precision]
///   style             :: &lt;see table below&gt;
///   digits            :: &lt;non-negative integer&gt; 0-sizeof(void*)
///
///   ==========================================================================
///   |   S     |     Meaning          |                Example                |
///   --------------------------------------------------------------------------
///   |         |                      |       Input       |      Output       |
///   ==========================================================================
///   |   x-    | Hex no prefix, lower |    0xDEADBEEF     |     deadbeef      |
///   |   X-    | Hex no prefix, upper |    0xDEADBEEF     |     DEADBEEF      |
///   | x+ / x  | Hex + prefix, lower  |    0xDEADBEEF     |    0xdeadbeef     |
///   | X+ / X  | Hex + prefix, upper  |    0xDEADBEEF     |    0xDEADBEEF     |
///   | (empty) | Same as X+ / X       |                   |                   |
///   ==========================================================================
///
/// The default precision is the number of nibbles in a machine word, and in all
/// cases indicates the minimum number of nibbles to print.</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='188'>/// Implementation of format_provider&lt;T&gt; for c-style strings and string
/// objects such as std::string and llvm::StringRef.
///
/// The options string of a string type has the grammar:
///
///   string_options :: [length]
///
/// where `length` is an optional integer specifying the maximum number of
/// characters in the string to print.  If `length` is omitted, the string is
/// printed up to the null terminator.</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='212'>/// Implementation of format_provider&lt;T&gt; for llvm::Twine.
///
/// This follows the same rules as the string formatter.</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='223'>/// Implementation of format_provider&lt;T&gt; for characters.
///
/// The options string of a character type has the grammar:
///
///   char_options :: (empty) | [integer_options]
///
/// If `char_options` is empty, the character is displayed as an ASCII
/// character.  Otherwise, it is treated as an integer options string.
///</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='246'>/// Implementation of format_provider&lt;T&gt; for type `bool`
///
/// The options string of a boolean type has the grammar:
///
///   bool_options :: &quot;&quot; | &quot;Y&quot; | &quot;y&quot; | &quot;D&quot; | &quot;d&quot; | &quot;T&quot; | &quot;t&quot;
///
///   ==================================
///   |    C    |     Meaning          |
///   ==================================
///   |    Y    |       YES / NO       |
///   |    y    |       yes / no       |
///   |  D / d  |    Integer 0 or 1    |
///   |    T    |     TRUE / FALSE     |
///   |    t    |     true / false     |
///   | (empty) |   Equivalent to &apos;t&apos;  |
///   ==================================</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='275'>/// Implementation of format_provider&lt;T&gt; for floating point types.
///
/// The options string of a floating point type has the format:
///
///   float_options   :: [style][precision]
///   style           :: &lt;see table below&gt;
///   precision       :: &lt;non-negative integer&gt; 0-99
///
///   =====================================================
///   |  style  |     Meaning          |      Example     |
///   -----------------------------------------------------
///   |         |                      |  Input |  Output |
///   =====================================================
///   | P / p   | Percentage           |  0.05  |  5.00%  |
///   | F / f   | Fixed point          |   1.0  |  1.00   |
///   |   E     | Exponential with E   | 100000 | 1.0E+05 |
///   |   e     | Exponential with e   | 100000 | 1.0e+05 |
///   | (empty) | Same as F / f        |        |         |
///   =====================================================
///
/// The default precision is 6 for exponential (E / e) and 2 for everything
/// else.</doc>
<doc f='llvm/llvm/include/llvm/Support/FormatProviders.h' l='333'>/// Implementation of format_provider&lt;T&gt; for ranges.
///
/// This will print an arbitrary range as a delimited sequence of items.
///
/// The options string of a range type has the grammar:
///
///   range_style       ::= [separator] [element_style]
///   separator         ::= &quot;$&quot; delimeted_expr
///   element_style     ::= &quot;@&quot; delimeted_expr
///   delimeted_expr    ::= &quot;[&quot; expr &quot;]&quot; | &quot;(&quot; expr &quot;)&quot; | &quot;&lt;&quot; expr &quot;&gt;&quot;
///   expr              ::= &lt;any string not containing delimeter&gt;
///
/// where the separator expression is the string to insert between consecutive
/// items in the range and the argument expression is the Style specification to
/// be used when formatting the underlying type.  The default separator if
/// unspecified is &apos; &apos; (space).  The syntax of the argument expression follows
/// whatever grammar is dictated by the format provider or format adapter used
/// to format the value type.
///
/// Note that attempting to format an `iterator_range&lt;T&gt;` where no format
/// provider can be found for T will result in a compile error.
///</doc>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr6detail22use_integral_formatterIS1_EE5valueEvE4typeEE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr6detail21use_pointer_formatterIS1_EE5valueEvE4typeEE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr6detail20use_string_formatterIS1_EE5valueEvE4typeEE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINS_5TwineEvE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr6detail18use_char_formatterIS1_EE5valueEvE4typeEE6formatERKcRNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerIbvE6formatERKbRNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr6detail20use_double_formatterIS1_EE5valueEvE4typeEE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINS_14iterator_rangeIT_EEvE16consumeOneOptionERNS_9StringRefEcS5_'/>
<fun r='_ZN4llvm15format_providerINS_14iterator_rangeIT_EEvE12parseOptionsENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINS_14iterator_rangeIT_EEvE6formatERKS3_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINSt6chrono10time_pointINS1_3_V212system_clockENS1_8durationIlSt5ratioILl1ELl1000000000EEEEEEvE6formatERKS9_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINSt6chrono8durationIT_T0_EEvE5getAsERKS5_'/>
<fun r='_ZN4llvm15format_providerINSt6chrono8durationIT_T0_EEvE11consumeUnitERNS_9StringRefERKS5_'/>
<fun r='_ZN4llvm15format_providerINSt6chrono8durationIT_T0_EEvE15consumeShowUnitERNS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINSt6chrono8durationIT_T0_EEvE6formatERKS5_RNS_11raw_ostreamENS_9StringRefE'/>
<def f='llvm/llvm/include/llvm/Support/JSON.h' l='850' ll='852'/>
<size>1</size>
<doc f='llvm/llvm/include/llvm/Support/JSON.h' l='847'>/// Allow printing json::Value with formatv().
/// The default style is basic/compact formatting, like operator&lt;&lt;.
/// A format string like formatv(&quot;{0:2}&quot;, Value) pretty-prints with indent 2.</doc>
<fun r='_ZN4llvm15format_providerINS_4json5ValueEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<def f='llvm/llvm/include/llvm/BinaryFormat/Dwarf.h' l='614' ll='625'/>
<doc f='llvm/llvm/include/llvm/BinaryFormat/Dwarf.h' l='609'>/// Dwarf constants format_provider
///
/// Specialization of the format_provider template for dwarf enums. Unlike the
/// dumping functions above, these format unknown enumerator values as
/// DW_TYPE_unknown_1234 (e.g. DW_TAG_unknown_ffff).</doc>
<fun r='_ZN4llvm15format_providerIT_NSt9enable_ifIXsr5dwarf10EnumTraitsIS1_EE5valueEvE4typeEE6formatERKS1_RNS_11raw_ostreamENS_9StringRefE'/>
<def f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h' l='213' ll='219'/>
<def f='llvm/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h' l='221' ll='229'/>
<size>1</size>
<fun r='_ZN4llvm15format_providerINS_8codeview17LocallyHashedTypeEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINS_8codeview18GloballyHashedTypeEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<def f='llvm/llvm/include/llvm/DebugInfo/CodeView/Formatters.h' l='49' ll='61'/>
<def f='llvm/llvm/include/llvm/DebugInfo/CodeView/Formatters.h' l='63' ll='68'/>
<size>1</size>
<fun r='_ZN4llvm15format_providerINS_8codeview9TypeIndexEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<fun r='_ZN4llvm15format_providerINS_8codeview4GUIDEvE6formatERKS2_RNS_11raw_ostreamENS_9StringRefE'/>
<def f='llvm/llvm/tools/llvm-xray/xray-account.cpp' l='383' ll='407'/>
<size>1</size>
