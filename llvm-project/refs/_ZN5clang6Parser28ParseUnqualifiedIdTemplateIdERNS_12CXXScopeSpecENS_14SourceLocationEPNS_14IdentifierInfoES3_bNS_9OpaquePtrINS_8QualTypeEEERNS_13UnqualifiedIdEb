<dec f='llvm/clang/include/clang/Parse/Parser.h' l='2817' type='bool clang::Parser::ParseUnqualifiedIdTemplateId(clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, clang::IdentifierInfo * Name, clang::SourceLocation NameLoc, bool EnteringContext, ParsedType ObjectType, clang::UnqualifiedId &amp; Id, bool AssumeTemplateId)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='1675' u='c' c='_ZN5clang6Parser24ParseCXXPseudoDestructorEPNS_4ExprENS_14SourceLocationENS_3tok9TokenKindERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEE'/>
<def f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2182' ll='2336' type='bool clang::Parser::ParseUnqualifiedIdTemplateId(clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, clang::IdentifierInfo * Name, clang::SourceLocation NameLoc, bool EnteringContext, ParsedType ObjectType, clang::UnqualifiedId &amp; Id, bool AssumeTemplateId)'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2671' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2749' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2828' u='c' c='_ZN5clang6Parser18ParseUnqualifiedIdERNS_12CXXScopeSpecEbbbbNS_9OpaquePtrINS_8QualTypeEEEPNS_14SourceLocationERNS_13UnqualifiedIdE'/>
<doc f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='2150'>/// Finish parsing a C++ unqualified-id that is a template-id of
/// some form.
///
/// This routine is invoked when a &apos;&lt;&apos; is encountered after an identifier or
/// operator-function-id is parsed by \c ParseUnqualifiedId() to determine
/// whether the unqualified-id is actually a template-id. This routine will
/// then parse the template arguments and form the appropriate template-id to
/// return to the caller.
///
/// \param SS the nested-name-specifier that precedes this template-id, if
/// we&apos;re actually parsing a qualified-id.
///
/// \param Name for constructor and destructor names, this is the actual
/// identifier that may be a template-name.
///
/// \param NameLoc the location of the class-name in a constructor or
/// destructor.
///
/// \param EnteringContext whether we&apos;re entering the scope of the
/// nested-name-specifier.
///
/// \param ObjectType if this unqualified-id occurs within a member access
/// expression, the type of the base object whose member is being accessed.
///
/// \param Id as input, describes the template-name or operator-function-id
/// that precedes the &apos;&lt;&apos;. If template arguments were parsed successfully,
/// will be updated with the template-id.
///
/// \param AssumeTemplateId When true, this routine will assume that the name
/// refers to a template without performing name lookup to verify.
///
/// \returns true if a parse error occurred, false otherwise.</doc>
