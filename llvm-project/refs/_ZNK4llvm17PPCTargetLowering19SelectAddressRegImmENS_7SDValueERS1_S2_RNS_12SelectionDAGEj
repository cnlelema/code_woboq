<dec f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='674' type='bool llvm::PPCTargetLowering::SelectAddressRegImm(llvm::SDValue N, llvm::SDValue &amp; Disp, llvm::SDValue &amp; Base, llvm::SelectionDAG &amp; DAG, unsigned int EncodingAlignment) const'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.h' l='669'>/// SelectAddressRegImm - Returns true if the address N can be represented
    /// by a base register plus a signed 16-bit displacement [r+imm], and if it
    /// is not better represented as reg+reg. If \p EncodingAlignment is
    /// non-zero, only accept displacements suitable for instruction encoding
    /// requirement, i.e. multiples of 4 for DS form.</doc>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp' l='276' u='c' c='_ZN12_GLOBAL__N_115PPCDAGToDAGISel13SelectAddrImmEN4llvm7SDValueERS2_S3_'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp' l='283' u='c' c='_ZN12_GLOBAL__N_115PPCDAGToDAGISel15SelectAddrImmX4EN4llvm7SDValueERS2_S3_'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp' l='290' u='c' c='_ZN12_GLOBAL__N_115PPCDAGToDAGISel16SelectAddrImmX16EN4llvm7SDValueERS2_S3_'/>
<def f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='2330' ll='2425' type='bool llvm::PPCTargetLowering::SelectAddressRegImm(llvm::SDValue N, llvm::SDValue &amp; Disp, llvm::SDValue &amp; Base, llvm::SelectionDAG &amp; DAG, unsigned int EncodingAlignment) const'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='2569' u='c' c='_ZNK4llvm17PPCTargetLowering25getPreIndexedAddressPartsEPNS_6SDNodeERNS_7SDValueES4_RNS_3ISD14MemIndexedModeERNS_12SelectionDAGE'/>
<use f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='2576' u='c' c='_ZNK4llvm17PPCTargetLowering25getPreIndexedAddressPartsEPNS_6SDNodeERNS_7SDValueES4_RNS_3ISD14MemIndexedModeERNS_12SelectionDAGE'/>
<doc f='llvm/llvm/lib/Target/PowerPC/PPCISelLowering.cpp' l='2326'>/// Returns true if the address N can be represented by a base register plus
/// a signed 16-bit displacement [r+imm], and if it is not better
/// represented as reg+reg.  If \p EncodingAlignment is non-zero, only accept
/// displacements that are multiples of that value.</doc>
