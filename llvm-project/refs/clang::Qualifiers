<def f='llvm/clang/include/clang/AST/Type.h' l='137' ll='587'/>
<ovr f='llvm/clang/include/clang/AST/Type.h' l='6123' c='clang::QualifierCollector'/>
<size>4</size>
<doc f='llvm/clang/include/clang/AST/Type.h' l='131'>/// The collection of all-type qualifiers we support.
/// Clang supports five independent qualifiers:
/// * C99: const, volatile, and restrict
/// * MS: __unaligned
/// * Embedded C (TR18037): address spaces
/// * Objective C: the GC attributes (none, weak, or strong)</doc>
<fun r='_ZN5clang10Qualifiers22removeCommonQualifiersERS0_S1_'/>
<fun r='_ZN5clang10Qualifiers12fromFastMaskEj'/>
<fun r='_ZN5clang10Qualifiers11fromCVRMaskEj'/>
<fun r='_ZN5clang10Qualifiers12fromCVRUMaskEj'/>
<fun r='_ZN5clang10Qualifiers15fromOpaqueValueEj'/>
<fun r='_ZNK5clang10Qualifiers16getAsOpaqueValueEv'/>
<fun r='_ZNK5clang10Qualifiers8hasConstEv'/>
<fun r='_ZNK5clang10Qualifiers12hasOnlyConstEv'/>
<fun r='_ZN5clang10Qualifiers11removeConstEv'/>
<fun r='_ZN5clang10Qualifiers8addConstEv'/>
<fun r='_ZNK5clang10Qualifiers11hasVolatileEv'/>
<fun r='_ZNK5clang10Qualifiers15hasOnlyVolatileEv'/>
<fun r='_ZN5clang10Qualifiers14removeVolatileEv'/>
<fun r='_ZN5clang10Qualifiers11addVolatileEv'/>
<fun r='_ZNK5clang10Qualifiers11hasRestrictEv'/>
<fun r='_ZNK5clang10Qualifiers15hasOnlyRestrictEv'/>
<fun r='_ZN5clang10Qualifiers14removeRestrictEv'/>
<fun r='_ZN5clang10Qualifiers11addRestrictEv'/>
<fun r='_ZNK5clang10Qualifiers16hasCVRQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers16getCVRQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers17getCVRUQualifiersEv'/>
<fun r='_ZN5clang10Qualifiers16setCVRQualifiersEj'/>
<fun r='_ZN5clang10Qualifiers19removeCVRQualifiersEj'/>
<fun r='_ZN5clang10Qualifiers19removeCVRQualifiersEv'/>
<fun r='_ZN5clang10Qualifiers16addCVRQualifiersEj'/>
<fun r='_ZN5clang10Qualifiers17addCVRUQualifiersEj'/>
<fun r='_ZNK5clang10Qualifiers9hasOutputEv'/>
<fun r='_ZN5clang10Qualifiers9addOutputEv'/>
<fun r='_ZN5clang10Qualifiers12removeOutputEv'/>
<fun r='_ZNK5clang10Qualifiers8hasInputEv'/>
<fun r='_ZN5clang10Qualifiers8addInputEv'/>
<fun r='_ZN5clang10Qualifiers11removeInputEv'/>
<fun r='_ZNK5clang10Qualifiers12hasUnalignedEv'/>
<fun r='_ZN5clang10Qualifiers12setUnalignedEb'/>
<fun r='_ZN5clang10Qualifiers15removeUnalignedEv'/>
<fun r='_ZN5clang10Qualifiers12addUnalignedEv'/>
<fun r='_ZNK5clang10Qualifiers13hasObjCGCAttrEv'/>
<fun r='_ZNK5clang10Qualifiers13getObjCGCAttrEv'/>
<fun r='_ZN5clang10Qualifiers13setObjCGCAttrENS0_2GCE'/>
<fun r='_ZN5clang10Qualifiers16removeObjCGCAttrEv'/>
<fun r='_ZN5clang10Qualifiers13addObjCGCAttrENS0_2GCE'/>
<fun r='_ZNK5clang10Qualifiers17withoutObjCGCAttrEv'/>
<fun r='_ZNK5clang10Qualifiers19withoutObjCLifetimeEv'/>
<fun r='_ZNK5clang10Qualifiers19withoutAddressSpaceEv'/>
<fun r='_ZNK5clang10Qualifiers15hasObjCLifetimeEv'/>
<fun r='_ZNK5clang10Qualifiers15getObjCLifetimeEv'/>
<fun r='_ZN5clang10Qualifiers15setObjCLifetimeENS0_12ObjCLifetimeE'/>
<fun r='_ZN5clang10Qualifiers18removeObjCLifetimeEv'/>
<fun r='_ZN5clang10Qualifiers15addObjCLifetimeENS0_12ObjCLifetimeE'/>
<fun r='_ZNK5clang10Qualifiers25hasNonTrivialObjCLifetimeEv'/>
<fun r='_ZNK5clang10Qualifiers27hasStrongOrWeakObjCLifetimeEv'/>
<fun r='_ZNK5clang10Qualifiers15hasAddressSpaceEv'/>
<fun r='_ZNK5clang10Qualifiers15getAddressSpaceEv'/>
<fun r='_ZNK5clang10Qualifiers29hasTargetSpecificAddressSpaceEv'/>
<fun r='_ZNK5clang10Qualifiers34getAddressSpaceAttributePrintValueEv'/>
<fun r='_ZN5clang10Qualifiers15setAddressSpaceENS_6LangASE'/>
<fun r='_ZN5clang10Qualifiers18removeAddressSpaceEv'/>
<fun r='_ZN5clang10Qualifiers15addAddressSpaceENS_6LangASE'/>
<fun r='_ZNK5clang10Qualifiers17hasFastQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers17getFastQualifiersEv'/>
<fun r='_ZN5clang10Qualifiers17setFastQualifiersEj'/>
<fun r='_ZN5clang10Qualifiers20removeFastQualifiersEj'/>
<fun r='_ZN5clang10Qualifiers20removeFastQualifiersEv'/>
<fun r='_ZN5clang10Qualifiers17addFastQualifiersEj'/>
<fun r='_ZNK5clang10Qualifiers20hasNonFastQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers20getNonFastQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers13hasQualifiersEv'/>
<fun r='_ZNK5clang10Qualifiers5emptyEv'/>
<fun r='_ZN5clang10Qualifiers13addQualifiersES0_'/>
<fun r='_ZN5clang10Qualifiers16removeQualifiersES0_'/>
<fun r='_ZN5clang10Qualifiers23addConsistentQualifiersES0_'/>
<fun r='_ZN5clang10Qualifiers24isAddressSpaceSupersetOfENS_6LangASES1_'/>
<fun r='_ZNK5clang10Qualifiers24isAddressSpaceSupersetOfES0_'/>
<fun r='_ZNK5clang10Qualifiers18compatiblyIncludesES0_'/>
<fun r='_ZNK5clang10Qualifiers30compatiblyIncludesObjCLifetimeES0_'/>
<fun r='_ZNK5clang10Qualifiers18isStrictSupersetOfES0_'/>
<fun r='_ZNK5clang10QualifierseqES0_'/>
<fun r='_ZNK5clang10QualifiersneES0_'/>
<fun r='_ZNK5clang10QualifierscvbEv'/>
<fun r='_ZN5clang10QualifierspLES0_'/>
<fun r='_ZN5clang10QualifiersmIES0_'/>
<fun r='_ZNK5clang10Qualifiers11getAsStringEv'/>
<fun r='_ZNK5clang10Qualifiers11getAsStringERKNS_14PrintingPolicyE'/>
<fun r='_ZNK5clang10Qualifiers18isEmptyWhenPrintedERKNS_14PrintingPolicyE'/>
<fun r='_ZNK5clang10Qualifiers5printERN4llvm11raw_ostreamERKNS_14PrintingPolicyEb'/>
<fun r='_ZNK5clang10Qualifiers7ProfileERN4llvm16FoldingSetNodeIDE'/>
<mbr r='clang::Qualifiers::Mask' o='0' t='uint32_t'/>
<smbr r='clang::Qualifiers::UMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::UShift' t='const uint32_t'/>
<smbr r='clang::Qualifiers::OMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::IMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::GCAttrMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::GCAttrShift' t='const uint32_t'/>
<smbr r='clang::Qualifiers::LifetimeMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::LifetimeShift' t='const uint32_t'/>
<smbr r='clang::Qualifiers::AddressSpaceMask' t='const uint32_t'/>
<smbr r='clang::Qualifiers::AddressSpaceShift' t='const uint32_t'/>
