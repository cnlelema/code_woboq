<def f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='346' ll='368'/>
<size>8</size>
<doc f='llvm/llvm/include/llvm/Transforms/IPO/Attributor.h' l='330'>/// An interface to query the internal state of an abstract attribute.
///
/// The abstract state is a minimal interface that allows the Attributor to
/// communicate with the abstract attributes about their internal state without
/// enforcing or exposing implementation details, e.g., the (existence of an)
/// underlying lattice.
///
/// It is sufficient to be able to query if a state is (1) valid or invalid, (2)
/// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint
/// was reached or (4) a pessimistic fixpoint was enforced.
///
/// All methods need to be implemented by the subclass. For the common use case,
/// a single boolean state or a bit-encoded state, the BooleanState and
/// IntegerState classes are already provided. An abstract attribute can inherit
/// from them to get the abstract state interface and additional methods to
/// directly modify the state based if needed. See the class comments for help.</doc>
<fun r='_ZN4llvm13AbstractStateD1Ev'/>
<fun r='_ZNK4llvm13AbstractState12isValidStateEv'/>
<fun r='_ZNK4llvm13AbstractState12isAtFixpointEv'/>
<fun r='_ZN4llvm13AbstractState26indicateOptimisticFixpointEv'/>
<fun r='_ZN4llvm13AbstractState27indicatePessimisticFixpointEv'/>
