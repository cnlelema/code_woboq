<dec f='llvm/llvm/include/llvm/PassRegistry.h' l='75' type='void llvm::PassRegistry::registerAnalysisGroup(const void * InterfaceID, const void * PassID, llvm::PassInfo &amp; Registeree, bool isDefault, bool ShouldFree = false)'/>
<doc f='llvm/llvm/include/llvm/PassRegistry.h' l='72'>/// registerAnalysisGroup - Register an analysis group (or a pass implementing
  // an analysis group) with the registry.  Like registerPass, this is required
  // in order for a PassManager to be able to use this group/pass.</doc>
<use f='llvm/llvm/lib/IR/Pass.cpp' l='248' u='c' c='_ZN4llvm14RegisterAGBaseC1ENS_9StringRefEPKvS3_b'/>
<def f='llvm/llvm/lib/IR/PassRegistry.cpp' l='80' ll='116' type='void llvm::PassRegistry::registerAnalysisGroup(const void * InterfaceID, const void * PassID, llvm::PassInfo &amp; Registeree, bool isDefault, bool ShouldFree = false)'/>
<doc f='llvm/llvm/lib/IR/PassRegistry.cpp' l='79'>/// Analysis Group Mechanisms.</doc>
