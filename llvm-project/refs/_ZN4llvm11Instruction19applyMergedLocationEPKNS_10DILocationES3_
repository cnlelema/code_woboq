<dec f='llvm/llvm/include/llvm/IR/Instruction.h' l='446' type='void llvm::Instruction::applyMergedLocation(const llvm::DILocation * LocA, const llvm::DILocation * LocB)'/>
<doc f='llvm/llvm/include/llvm/IR/Instruction.h' l='433'>/// Merge 2 debug locations and apply it to the Instruction. If the
  /// instruction is a CallIns, we need to traverse the inline chain to find
  /// the common scope. This is not efficient for N-way merging as each time
  /// you merge 2 iterations, you need to rebuild the hashmap to find the
  /// common scope. However, we still choose this API because:
  ///  1) Simplicity: it takes 2 locations instead of a list of locations.
  ///  2) In worst case, it increases the complexity from O(N*I) to
  ///     O(2*N*I), where N is # of Instructions to merge, and I is the
  ///     maximum level of inline stack. So it is still linear.
  ///  3) Merging of call instructions should be extremely rare in real
  ///     applications, thus the N-way merging should be in code path.
  /// The DebugLoc attached to this instruction will be overwritten by the
  /// merged DebugLoc.</doc>
<def f='llvm/llvm/lib/IR/DebugInfo.cpp' l='689' ll='692' type='void llvm::Instruction::applyMergedLocation(const llvm::DILocation * LocA, const llvm::DILocation * LocB)'/>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp' l='41' u='c' c='_ZN4llvm12InstCombiner20PHIArgMergedDebugLocEPNS_11InstructionERNS_7PHINodeE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp' l='213' u='c' c='_ZN12_GLOBAL__N_121MergedLoadStoreMotion13getPHIOperandEPN4llvm10BasicBlockEPNS1_9StoreInstES5_'/>
<use f='llvm/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp' l='866' u='c' c='_ZL30updateForIncomingValueLocationPN4llvm7PHINodeENS_8DebugLocEb'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1346' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1408' u='c' c='_ZL21HoistThenElseCodeToIfPN4llvm10BranchInstERKNS_19TargetTransformInfoE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='1618' u='c' c='_ZL19sinkLastInstructionN4llvm8ArrayRefIPNS_10BasicBlockEEE'/>
<use f='llvm/llvm/lib/Transforms/Utils/SimplifyCFG.cpp' l='2103' u='c' c='_ZL22SpeculativelyExecuteBBPN4llvm10BranchInstEPNS_10BasicBlockERKNS_19TargetTransformInfoE'/>
