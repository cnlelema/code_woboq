<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='501' type='bool llvm::LLParser::ParseOptionalOperandBundles(SmallVectorImpl&lt;OperandBundleDef&gt; &amp; BundleList, llvm::LLParser::PerFunctionState &amp; PFS)'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2502' ll='2545' type='bool llvm::LLParser::ParseOptionalOperandBundles(SmallVectorImpl&lt;OperandBundleDef&gt; &amp; BundleList, llvm::LLParser::PerFunctionState &amp; PFS)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6019' u='c' c='_ZN4llvm8LLParser11ParseInvokeERPNS_11InstructionERNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6328' u='c' c='_ZN4llvm8LLParser11ParseCallBrERPNS_11InstructionERNS0_16PerFunctionStateE'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='6748' u='c' c='_ZN4llvm8LLParser9ParseCallERPNS_11InstructionERNS0_16PerFunctionStateENS_8CallInst12TailCallKindE'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2493'>/// ParseOptionalOperandBundles
///    ::= /*empty*/
///    ::= &apos;[&apos; OperandBundle [, OperandBundle ]* &apos;]&apos;
///
/// OperandBundle
///    ::= bundle-tag &apos;(&apos; &apos;)&apos;
///    ::= bundle-tag &apos;(&apos; Type Value [, Type Value ]* &apos;)&apos;
///
/// bundle-tag ::= String Constant</doc>
