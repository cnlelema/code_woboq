<dec f='llvm/clang/include/clang/Parse/Parser.h' l='3011' type='bool clang::Parser::AnnotateTemplateIdToken(TemplateTy Template, clang::TemplateNameKind TNK, clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, clang::UnqualifiedId &amp; TemplateName, bool AllowTypeAnnotation = true)'/>
<use f='llvm/clang/lib/Parse/ParseDeclCXX.cpp' l='1189' u='c' c='_ZN5clang6Parser22ParseBaseTypeSpecifierERNS_14SourceLocationES2_'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='325' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbPbbPPNS_14IdentifierInfoEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='508' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbPbbPPNS_14IdentifierInfoEb'/>
<use f='llvm/clang/lib/Parse/ParseExprCXX.cpp' l='533' u='c' c='_ZN5clang6Parser30ParseOptionalCXXScopeSpecifierERNS_12CXXScopeSpecENS_9OpaquePtrINS_8QualTypeEEEbPbbPPNS_14IdentifierInfoEb'/>
<def f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='1011' ll='1097' type='bool clang::Parser::AnnotateTemplateIdToken(TemplateTy Template, clang::TemplateNameKind TNK, clang::CXXScopeSpec &amp; SS, clang::SourceLocation TemplateKWLoc, clang::UnqualifiedId &amp; TemplateName, bool AllowTypeAnnotation = true)'/>
<doc f='llvm/clang/lib/Parse/ParseTemplate.cpp' l='974'>/// Replace the tokens that form a simple-template-id with an
/// annotation token containing the complete template-id.
///
/// The first token in the stream must be the name of a template that
/// is followed by a &apos;&lt;&apos;. This routine will parse the complete
/// simple-template-id and replace the tokens with a single annotation
/// token with one of two different kinds: if the template-id names a
/// type (and \p AllowTypeAnnotation is true), the annotation token is
/// a type annotation that includes the optional nested-name-specifier
/// (\p SS). Otherwise, the annotation token is a template-id
/// annotation that does not include the optional
/// nested-name-specifier.
///
/// \param Template  the declaration of the template named by the first
/// token (an identifier), as returned from \c Action::isTemplateName().
///
/// \param TNK the kind of template that \p Template
/// refers to, as returned from \c Action::isTemplateName().
///
/// \param SS if non-NULL, the nested-name-specifier that precedes
/// this template name.
///
/// \param TemplateKWLoc if valid, specifies that this template-id
/// annotation was preceded by the &apos;template&apos; keyword and gives the
/// location of that keyword. If invalid (the default), then this
/// template-id was not preceded by a &apos;template&apos; keyword.
///
/// \param AllowTypeAnnotation if true (the default), then a
/// simple-template-id that refers to a class template, template
/// template parameter, or other template that produces a type will be
/// replaced with a type annotation token. Otherwise, the
/// simple-template-id is always replaced with a template-id
/// annotation token.
///
/// If an unrecoverable parse error occurs and no annotation token can be
/// formed, this function returns true.
///</doc>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1699' u='c' c='_ZN5clang6Parser15TryAnnotateNameEbPNS_27CorrectionCandidateCallbackE'/>
<use f='llvm/clang/lib/Parse/Parser.cpp' l='1935' u='c' c='_ZN5clang6Parser41TryAnnotateTypeOrScopeTokenAfterScopeSpecERNS_12CXXScopeSpecEb'/>
