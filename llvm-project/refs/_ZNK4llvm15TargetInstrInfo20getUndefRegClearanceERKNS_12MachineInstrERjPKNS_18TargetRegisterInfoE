<def f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1515' ll='1519' type='unsigned int llvm::TargetInstrInfo::getUndefRegClearance(const llvm::MachineInstr &amp; MI, unsigned int &amp; OpNum, const llvm::TargetRegisterInfo * TRI) const'/>
<doc f='llvm/llvm/include/llvm/CodeGen/TargetInstrInfo.h' l='1501'>/// Return the minimum clearance before an instruction that reads an
  /// unused register.
  ///
  /// For example, AVX instructions may copy part of a register operand into
  /// the unused high bits of the destination register.
  ///
  /// vcvtsi2sdq %rax, undef %xmm0, %xmm14
  ///
  /// In the code above, vcvtsi2sdq copies %xmm0[127:64] into %xmm14 creating a
  /// false dependence on any previous write to %xmm0.
  ///
  /// This hook works similarly to getPartialRegUpdateClearance, except that it
  /// does not take an operand index. Instead sets \p OpNum to the index of the
  /// unused register.</doc>
<use f='llvm/llvm/lib/CodeGen/BreakFalseDeps.cpp' l='182' u='c' c='_ZN4llvm14BreakFalseDeps11processDefsEPNS_12MachineInstrE'/>
