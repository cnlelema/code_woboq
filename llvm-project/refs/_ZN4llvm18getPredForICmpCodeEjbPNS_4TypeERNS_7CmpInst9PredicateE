<dec f='llvm/llvm/include/llvm/Analysis/CmpInstAnalysis.h' l='54' type='llvm::Constant * llvm::getPredForICmpCode(unsigned int Code, bool Sign, llvm::Type * OpTy, CmpInst::Predicate &amp; Pred)'/>
<def f='llvm/llvm/lib/Analysis/CmpInstAnalysis.cpp' l='42' ll='58' type='llvm::Constant * llvm::getPredForICmpCode(unsigned int Code, bool Sign, llvm::Type * OpTy, CmpInst::Predicate &amp; Pred)'/>
<doc f='llvm/llvm/include/llvm/Analysis/CmpInstAnalysis.h' l='48'>/// This is the complement of getICmpCode. It turns a predicate code into
  /// either a constant true or false or the predicate for a new ICmp.
  /// The sign is passed in to determine which kind of predicate to use in the
  /// new ICmp instruction.
  /// Non-NULL return value will be a true or false constant.
  /// NULL return means a new ICmp is needed. The predicate is output in Pred.</doc>
<use f='llvm/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp' l='58' u='c' c='_ZL15getNewICmpValuejbPN4llvm5ValueES1_RNS_9IRBuilderINS_12TargetFolderENS_25IRBuilderCallbackInserterEEE'/>
