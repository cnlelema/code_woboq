<dec f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='57' type='const llvm::Instruction * llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(const llvm::BasicBlock * BB)'/>
<use f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='105' u='c' c='_ZN4llvm27ImplicitControlFlowTracking12getFirstICFIEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='129' u='c' c='_ZN4llvm19MemoryWriteTracking19getFirstMemoryWriteEPKNS_10BasicBlockE'/>
<doc f='llvm/llvm/include/llvm/Analysis/InstructionPrecedenceTracking.h' l='55'>/// Returns the topmost special instruction from the block \p BB. Returns
  /// nullptr if there is no special instructions in the block.</doc>
<def f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='34' ll='50' type='const llvm::Instruction * llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(const llvm::BasicBlock * BB)'/>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='54' u='c' c='_ZN4llvm29InstructionPrecedenceTracking22hasSpecialInstructionsEPKNS_10BasicBlockE'/>
<use f='llvm/llvm/lib/Analysis/InstructionPrecedenceTracking.cpp' l='60' u='c' c='_ZN4llvm29InstructionPrecedenceTracking31isPreceededBySpecialInstructionEPKNS_11InstructionE'/>
