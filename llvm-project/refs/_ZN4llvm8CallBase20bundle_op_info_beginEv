<def f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='2032' ll='2038' type='bundle_op_iterator llvm::CallBase::bundle_op_info_begin()'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='2044' u='c' c='_ZNK4llvm8CallBase20bundle_op_info_beginEv'/>
<use f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='2066' u='c' c='_ZN4llvm8CallBase15bundle_op_infosEv'/>
<doc f='llvm/llvm/include/llvm/IR/InstrTypes.h' l='1986'>/// Return the start of the list of BundleOpInfo instances associated
  /// with this OperandBundleUser.
  ///
  /// OperandBundleUser uses the descriptor area co-allocated with the host User
  /// to store some meta information about which operands are &quot;normal&quot; operands,
  /// and which ones belong to some operand bundle.
  ///
  /// The layout of an operand bundle user is
  ///
  ///          +-----------uint32_t End-------------------------------------+
  ///          |                                                            |
  ///          |  +--------uint32_t Begin--------------------+              |
  ///          |  |                                          |              |
  ///          ^  ^                                          v              v
  ///  |------|------|----|----|----|----|----|---------|----|---------|----|-----
  ///  | BOI0 | BOI1 | .. | DU | U0 | U1 | .. | BOI0_U0 | .. | BOI1_U0 | .. | Un
  ///  |------|------|----|----|----|----|----|---------|----|---------|----|-----
  ///   v  v                                  ^              ^
  ///   |  |                                  |              |
  ///   |  +--------uint32_t Begin------------+              |
  ///   |                                                    |
  ///   +-----------uint32_t End-----------------------------+
  ///
  ///
  /// BOI0, BOI1 ... are descriptions of operand bundles in this User&apos;s use
  /// list. These descriptions are installed and managed by this class, and
  /// they&apos;re all instances of OperandBundleUser&lt;T&gt;::BundleOpInfo.
  ///
  /// DU is an additional descriptor installed by User&apos;s &apos;operator new&apos; to keep
  /// track of the &apos;BOI0 ... BOIN&apos; co-allocation.  OperandBundleUser does not
  /// access or modify DU in any way, it&apos;s an implementation detail private to
  /// User.
  ///
  /// The regular Use&amp; vector for the User starts at U0.  The operand bundle
  /// uses are part of the Use&amp; vector, just like normal uses.  In the diagram
  /// above, the operand bundle uses start at BOI0_U0.  Each instance of
  /// BundleOpInfo has information about a contiguous set of uses constituting
  /// an operand bundle, and the total set of operand bundle uses themselves
  /// form a contiguous set of uses (i.e. there are no gaps between uses
  /// corresponding to individual operand bundles).
  ///
  /// This class does not know the location of the set of operand bundle uses
  /// within the use list -- that is decided by the User using this class via
  /// the BeginIdx argument in populateBundleOperandInfos.
  ///
  /// Currently operand bundle users with hung-off operands are not supported.</doc>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='451' u='c' c='_ZN4llvm8CallInstC1ERKS0_'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='762' u='c' c='_ZN4llvm10InvokeInstC1ERKS0_'/>
<use f='llvm/llvm/lib/IR/Instructions.cpp' l='833' u='c' c='_ZN4llvm10CallBrInstC1ERKS0_'/>
