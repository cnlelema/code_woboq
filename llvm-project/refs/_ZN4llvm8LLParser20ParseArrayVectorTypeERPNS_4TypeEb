<dec f='llvm/llvm/lib/AsmParser/LLParser.h' l='407' type='bool llvm::LLParser::ParseArrayVectorType(llvm::Type *&amp; Result, bool isVector)'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2330' u='c' c='_ZN4llvm8LLParser9ParseTypeERPNS_4TypeERKNS_5TwineEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2340' u='c' c='_ZN4llvm8LLParser9ParseTypeERPNS_4TypeERKNS_5TwineEb'/>
<use f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2697' u='c' c='_ZN4llvm8LLParser21ParseStructDefinitionENS_5SMLocENS_9StringRefERSt4pairIPNS_4TypeES1_ERS5_'/>
<def f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2760' ll='2794' type='bool llvm::LLParser::ParseArrayVectorType(llvm::Type *&amp; Result, bool isVector)'/>
<doc f='llvm/llvm/lib/AsmParser/LLParser.cpp' l='2755'>/// ParseArrayVectorType - Parse an array or vector type, assuming the first
/// token has already been consumed.
///   Type
///     ::= &apos;[&apos; APSINTVAL &apos;x&apos; Types &apos;]&apos;
///     ::= &apos;&lt;&apos; APSINTVAL &apos;x&apos; Types &apos;&gt;&apos;</doc>
