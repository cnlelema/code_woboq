<dec f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.h' l='50' type='llvm::VPValue * llvm::VPlanPredicator::getOrCreateNotPredicate(llvm::VPBasicBlock * PredBB, llvm::VPBasicBlock * CurrBB)'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.h' l='48'>/// Create and return VPValue corresponding to the predicate for the edge from
  /// \p PredBB to \p CurrentBlock.</doc>
<def f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='37' ll='63' type='llvm::VPValue * llvm::VPlanPredicator::getOrCreateNotPredicate(llvm::VPBasicBlock * PredBB, llvm::VPBasicBlock * CurrBB)'/>
<use f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='171' u='c' c='_ZN4llvm15VPlanPredicator27createOrPropagatePredicatesEPNS_11VPBlockBaseEPNS_13VPRegionBlockE'/>
<doc f='llvm/llvm/lib/Transforms/Vectorize/VPlanPredicator.cpp' l='27'>// Generate VPInstructions at the beginning of CurrBB that calculate the
// predicate being propagated from PredBB to CurrBB depending on the edge type
// between them. For example if:
//  i.  PredBB is controlled by predicate %BP, and
//  ii. The edge PredBB-&gt;CurrBB is the false edge, controlled by the condition
//  bit value %CBV then this function will generate the following two
//  VPInstructions at the start of CurrBB:
//   %IntermediateVal = not %CBV
//   %FinalVal        = and %BP %IntermediateVal
// It returns %FinalVal.</doc>
