<dec f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='307' type='Optional&lt;ScalarEvolution::ValueOffsetPair&gt; llvm::SCEVExpander::getRelatedExistingExpansion(const llvm::SCEV * S, const llvm::Instruction * At, llvm::Loop * L)'/>
<doc f='llvm/llvm/include/llvm/Analysis/ScalarEvolutionExpander.h' l='294'>/// Try to find the ValueOffsetPair for S. The function is mainly used to
    /// check whether S can be expanded cheaply.  If this returns a non-None
    /// value, we know we can codegen the `ValueOffsetPair` into a suitable
    /// expansion identical with S so that S can be expanded cheaply.
    ///
    /// L is a hint which tells in which loop to look for the suitable value.
    /// On success return value which is equivalent to the expanded S at point
    /// At. Return nullptr if value was not found.
    ///
    /// Note that this function does not perform an exhaustive search. I.e if it
    /// didn&apos;t find any value it does not mean that there is no such value.
    ///</doc>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2077' u='c' c='_ZN4llvm12SCEVExpander25getExactExistingExpansionEPKNS_4SCEVEPKNS_11InstructionEPNS_4LoopE'/>
<def f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2083' ll='2120' type='Optional&lt;ScalarEvolution::ValueOffsetPair&gt; llvm::SCEVExpander::getRelatedExistingExpansion(const llvm::SCEV * S, const llvm::Instruction * At, llvm::Loop * L)'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2128' u='c' c='_ZN4llvm12SCEVExpander25isHighCostExpansionHelperEPKNS_4SCEVEPNS_4LoopEPKNS_11InstructionERNS_15SmallPtrSetImplIS3_EE'/>
<use f='llvm/llvm/lib/Analysis/ScalarEvolutionExpander.cpp' l='2179' u='c' c='_ZN4llvm12SCEVExpander25isHighCostExpansionHelperEPKNS_4SCEVEPNS_4LoopEPKNS_11InstructionERNS_15SmallPtrSetImplIS3_EE'/>
