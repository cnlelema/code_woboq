<dec f='llvm/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h' l='70' type='llvm::Instruction * llvm::MemCpyOptPass::tryMergingIntoMemset(llvm::Instruction * I, llvm::Value * StartPtr, llvm::Value * ByteVal)'/>
<def f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='388' ll='506' type='llvm::Instruction * llvm::MemCpyOptPass::tryMergingIntoMemset(llvm::Instruction * StartInst, llvm::Value * StartPtr, llvm::Value * ByteVal)'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='758' u='c' c='_ZN4llvm13MemCpyOptPass12processStoreEPNS_9StoreInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb1ELb0EvEELb0ELb0EEE'/>
<use f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='796' u='c' c='_ZN4llvm13MemCpyOptPass13processMemSetEPNS_10MemSetInstERNS_14ilist_iteratorINS_12ilist_detail12node_optionsINS_11InstructionELb1ELb0EvEELb0ELb0EEE'/>
<doc f='llvm/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp' l='384'>/// When scanning forward over instructions, we look for some other patterns to
/// fold away. In particular, this looks for stores to neighboring locations of
/// memory. If it sees enough consecutive ones, it attempts to merge them
/// together into a memcpy/memset.</doc>
