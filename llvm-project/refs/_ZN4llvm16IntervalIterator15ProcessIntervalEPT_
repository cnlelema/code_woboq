<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='103' u='c' c='_ZN4llvm16IntervalIteratorC1EPNS_8FunctionEb'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='116' u='c' c='_ZN4llvm16IntervalIteratorC1ERNS_17IntervalPartitionEb'/>
<use f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='147' u='c' c='_ZN4llvm16IntervalIteratorppEv'/>
<def f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='176' ll='190' type='bool llvm::IntervalIterator::ProcessInterval(NodeTy * Node)'/>
<doc f='llvm/llvm/include/llvm/Analysis/IntervalIterator.h' l='169'>// ProcessInterval - This method is used during the construction of the
  // interval graph.  It walks through the source graph, recursively creating
  // an interval per invocation until the entire graph is covered.  This uses
  // the ProcessNode method to add all of the nodes to the interval.
  //
  // This method is templated because it may operate on two different source
  // graphs: a basic block graph, or a preexisting interval graph.</doc>
