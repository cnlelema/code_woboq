<inh f='llvm/llvm/include/llvm/ExecutionEngine/JITSymbol.h' l='374' c='_ZN4llvm23LegacyJITSymbolResolver24findSymbolInLogicalDylibERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<def f='llvm/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h' l='122' ll='126' type='llvm::JITSymbol llvm::RTDyldMemoryManager::findSymbolInLogicalDylib(const std::string &amp; Name)'/>
<doc f='llvm/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h' l='112'>/// Default to treating all modules as separate.
  ///
  /// By default this falls back on the legacy lookup method:
  /// &apos;getSymbolAddressInLogicalDylib&apos;. The address returned by
  /// getSymbolAddressInLogicalDylib is treated as a strong, exported symbol,
  /// consistent with historical treatment by RuntimeDyld.
  ///
  /// Clients writing custom RTDyldMemoryManagers are encouraged to override
  /// this method and return a SymbolInfo with the flags set correctly. This is
  /// necessary for RuntimeDyld to correctly handle weak and non-exported symbols.</doc>
<ovr f='llvm/llvm/tools/lli/RemoteJITUtils.h' l='141' c='_ZN4llvm23ForwardingMemoryManager24findSymbolInLogicalDylibERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
