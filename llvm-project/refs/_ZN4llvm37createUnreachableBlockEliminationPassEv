<dec f='llvm/llvm/include/llvm/CodeGen/Passes.h' l='43' type='llvm::FunctionPass * llvm::createUnreachableBlockEliminationPass()'/>
<doc f='llvm/llvm/include/llvm/CodeGen/Passes.h' l='37'>/// createUnreachableBlockEliminationPass - The LLVM code generator does not
  /// work well with unreachable basic blocks (what live ranges make sense for a
  /// block that cannot be reached?).  As such, a code generator should either
  /// not instruction select unreachable blocks, or run this pass as its
  /// last LLVM modifying pass to clean up blocks that are not reachable from
  /// the entry block.</doc>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='659' u='c' c='_ZN4llvm16TargetPassConfig11addIRPassesEv'/>
<use f='llvm/llvm/lib/CodeGen/TargetPassConfig.cpp' l='718' u='c' c='_ZN4llvm16TargetPassConfig27addPassesToHandleExceptionsEv'/>
<def f='llvm/llvm/lib/CodeGen/UnreachableBlockElim.cpp' l='65' ll='67' type='llvm::FunctionPass * llvm::createUnreachableBlockEliminationPass()'/>
<use f='llvm/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp' l='363' u='c' c='_ZN12_GLOBAL__N_121WebAssemblyPassConfig11addIRPassesEv'/>
